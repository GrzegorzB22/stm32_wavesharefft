
stm32_wavesharefft.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008d28  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b68  08008eb8  08008eb8  00018eb8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009a20  08009a20  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  08009a20  08009a20  00019a20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009a28  08009a28  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009a28  08009a28  00019a28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009a2c  08009a2c  00019a2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  08009a30  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00012314  200001e8  08009c18  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200124fc  08009c18  000224fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001eff2  00000000  00000000  0002025b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003eb2  00000000  00000000  0003f24d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 0000c3b0  00000000  00000000  000430ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001120  00000000  00000000  0004f4b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000121a  00000000  00000000  000505d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002af8f  00000000  00000000  000517ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00020d7b  00000000  00000000  0007c779  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0010a6f0  00000000  00000000  0009d4f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004858  00000000  00000000  001a7be4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000069  00000000  00000000  001ac43c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e8 	.word	0x200001e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008ea0 	.word	0x08008ea0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	08008ea0 	.word	0x08008ea0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 bad0 	b.w	8001240 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f966 	bl	8000f78 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__mulsc3>:
 8000cb8:	ee60 6a01 	vmul.f32	s13, s0, s2
 8000cbc:	ee20 6aa1 	vmul.f32	s12, s1, s3
 8000cc0:	ee20 5a21 	vmul.f32	s10, s0, s3
 8000cc4:	ee76 7ac6 	vsub.f32	s15, s13, s12
 8000cc8:	ee61 5a20 	vmul.f32	s11, s2, s1
 8000ccc:	eef4 7a67 	vcmp.f32	s15, s15
 8000cd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cd4:	ee35 7a25 	vadd.f32	s14, s10, s11
 8000cd8:	d604      	bvs.n	8000ce4 <__mulsc3+0x2c>
 8000cda:	eeb0 0a67 	vmov.f32	s0, s15
 8000cde:	eef0 0a47 	vmov.f32	s1, s14
 8000ce2:	4770      	bx	lr
 8000ce4:	eeb4 7a47 	vcmp.f32	s14, s14
 8000ce8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cec:	d7f5      	bvc.n	8000cda <__mulsc3+0x22>
 8000cee:	eddf 4a9e 	vldr	s9, [pc, #632]	; 8000f68 <__mulsc3+0x2b0>
 8000cf2:	eeb0 4ac0 	vabs.f32	s8, s0
 8000cf6:	eeb4 4a64 	vcmp.f32	s8, s9
 8000cfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cfe:	bfcc      	ite	gt
 8000d00:	2301      	movgt	r3, #1
 8000d02:	2300      	movle	r3, #0
 8000d04:	eeb0 4ae0 	vabs.f32	s8, s1
 8000d08:	f300 80a0 	bgt.w	8000e4c <__mulsc3+0x194>
 8000d0c:	eeb4 4a64 	vcmp.f32	s8, s9
 8000d10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d14:	f300 809a 	bgt.w	8000e4c <__mulsc3+0x194>
 8000d18:	2300      	movs	r3, #0
 8000d1a:	eddf 4a93 	vldr	s9, [pc, #588]	; 8000f68 <__mulsc3+0x2b0>
 8000d1e:	eeb0 4ac1 	vabs.f32	s8, s2
 8000d22:	eeb4 4a64 	vcmp.f32	s8, s9
 8000d26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d2a:	eef0 3ae1 	vabs.f32	s7, s3
 8000d2e:	dc48      	bgt.n	8000dc2 <__mulsc3+0x10a>
 8000d30:	eef4 3a64 	vcmp.f32	s7, s9
 8000d34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d38:	dc43      	bgt.n	8000dc2 <__mulsc3+0x10a>
 8000d3a:	bb9b      	cbnz	r3, 8000da4 <__mulsc3+0xec>
 8000d3c:	eef0 6ae6 	vabs.f32	s13, s13
 8000d40:	eef4 6a64 	vcmp.f32	s13, s9
 8000d44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d48:	dc14      	bgt.n	8000d74 <__mulsc3+0xbc>
 8000d4a:	eeb0 6ac6 	vabs.f32	s12, s12
 8000d4e:	eeb4 6a64 	vcmp.f32	s12, s9
 8000d52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d56:	dc0d      	bgt.n	8000d74 <__mulsc3+0xbc>
 8000d58:	eeb0 5ac5 	vabs.f32	s10, s10
 8000d5c:	eeb4 5a64 	vcmp.f32	s10, s9
 8000d60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d64:	dc06      	bgt.n	8000d74 <__mulsc3+0xbc>
 8000d66:	eef0 5ae5 	vabs.f32	s11, s11
 8000d6a:	eef4 5a64 	vcmp.f32	s11, s9
 8000d6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d72:	ddb2      	ble.n	8000cda <__mulsc3+0x22>
 8000d74:	eeb4 0a40 	vcmp.f32	s0, s0
 8000d78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d7c:	f180 80e7 	bvs.w	8000f4e <__mulsc3+0x296>
 8000d80:	eef4 0a60 	vcmp.f32	s1, s1
 8000d84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d88:	f180 80d4 	bvs.w	8000f34 <__mulsc3+0x27c>
 8000d8c:	eeb4 1a41 	vcmp.f32	s2, s2
 8000d90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d94:	f180 80c1 	bvs.w	8000f1a <__mulsc3+0x262>
 8000d98:	eef4 1a61 	vcmp.f32	s3, s3
 8000d9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000da0:	f180 80ae 	bvs.w	8000f00 <__mulsc3+0x248>
 8000da4:	ee61 7ae0 	vnmul.f32	s15, s3, s1
 8000da8:	ee60 0a81 	vmul.f32	s1, s1, s2
 8000dac:	eee0 7a01 	vfma.f32	s15, s0, s2
 8000db0:	eee0 0a21 	vfma.f32	s1, s0, s3
 8000db4:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8000f6c <__mulsc3+0x2b4>
 8000db8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000dbc:	ee20 7a87 	vmul.f32	s14, s1, s14
 8000dc0:	e78b      	b.n	8000cda <__mulsc3+0x22>
 8000dc2:	eddf 7a69 	vldr	s15, [pc, #420]	; 8000f68 <__mulsc3+0x2b0>
 8000dc6:	ed9f 7a68 	vldr	s14, [pc, #416]	; 8000f68 <__mulsc3+0x2b0>
 8000dca:	eeb4 4a67 	vcmp.f32	s8, s15
 8000dce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dd2:	bfcc      	ite	gt
 8000dd4:	2301      	movgt	r3, #1
 8000dd6:	2300      	movle	r3, #0
 8000dd8:	ee07 3a90 	vmov	s15, r3
 8000ddc:	ee11 3a10 	vmov	r3, s2
 8000de0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	eef0 7ae7 	vabs.f32	s15, s15
 8000dea:	eef4 3a47 	vcmp.f32	s7, s14
 8000dee:	bfb8      	it	lt
 8000df0:	eef1 7a67 	vneglt.f32	s15, s15
 8000df4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000df8:	bfcc      	ite	gt
 8000dfa:	2301      	movgt	r3, #1
 8000dfc:	2300      	movle	r3, #0
 8000dfe:	eeb0 1a67 	vmov.f32	s2, s15
 8000e02:	ee07 3a90 	vmov	s15, r3
 8000e06:	ee11 3a90 	vmov	r3, s3
 8000e0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	eef0 7ae7 	vabs.f32	s15, s15
 8000e14:	eeb4 0a40 	vcmp.f32	s0, s0
 8000e18:	bfb8      	it	lt
 8000e1a:	eef1 7a67 	vneglt.f32	s15, s15
 8000e1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e22:	eef0 1a67 	vmov.f32	s3, s15
 8000e26:	d651      	bvs.n	8000ecc <__mulsc3+0x214>
 8000e28:	eef4 0a60 	vcmp.f32	s1, s1
 8000e2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e30:	d7b8      	bvc.n	8000da4 <__mulsc3+0xec>
 8000e32:	ee10 3a90 	vmov	r3, s1
 8000e36:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 8000f70 <__mulsc3+0x2b8>
 8000e3a:	eddf 7a4e 	vldr	s15, [pc, #312]	; 8000f74 <__mulsc3+0x2bc>
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	bfb4      	ite	lt
 8000e42:	eef0 0a67 	vmovlt.f32	s1, s15
 8000e46:	eef0 0a47 	vmovge.f32	s1, s14
 8000e4a:	e7ab      	b.n	8000da4 <__mulsc3+0xec>
 8000e4c:	ee04 3a90 	vmov	s9, r3
 8000e50:	eddf 3a45 	vldr	s7, [pc, #276]	; 8000f68 <__mulsc3+0x2b0>
 8000e54:	ee10 3a10 	vmov	r3, s0
 8000e58:	eef8 4ae4 	vcvt.f32.s32	s9, s9
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	eef0 4ae4 	vabs.f32	s9, s9
 8000e62:	eeb4 4a63 	vcmp.f32	s8, s7
 8000e66:	bfb8      	it	lt
 8000e68:	eef1 4a64 	vneglt.f32	s9, s9
 8000e6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e70:	bfcc      	ite	gt
 8000e72:	2301      	movgt	r3, #1
 8000e74:	2300      	movle	r3, #0
 8000e76:	eeb0 0a64 	vmov.f32	s0, s9
 8000e7a:	ee04 3a90 	vmov	s9, r3
 8000e7e:	ee10 3a90 	vmov	r3, s1
 8000e82:	eef8 4ae4 	vcvt.f32.s32	s9, s9
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	eef0 4ae4 	vabs.f32	s9, s9
 8000e8c:	eeb4 1a41 	vcmp.f32	s2, s2
 8000e90:	bfb8      	it	lt
 8000e92:	eef1 4a64 	vneglt.f32	s9, s9
 8000e96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e9a:	eef0 0a64 	vmov.f32	s1, s9
 8000e9e:	d622      	bvs.n	8000ee6 <__mulsc3+0x22e>
 8000ea0:	eef4 1a61 	vcmp.f32	s3, s3
 8000ea4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ea8:	bf78      	it	vc
 8000eaa:	2301      	movvc	r3, #1
 8000eac:	f5ff af35 	bvc.w	8000d1a <__mulsc3+0x62>
 8000eb0:	ee11 3a90 	vmov	r3, s3
 8000eb4:	ed9f 4a2e 	vldr	s8, [pc, #184]	; 8000f70 <__mulsc3+0x2b8>
 8000eb8:	eddf 4a2e 	vldr	s9, [pc, #184]	; 8000f74 <__mulsc3+0x2bc>
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	bfb4      	ite	lt
 8000ec0:	eef0 1a64 	vmovlt.f32	s3, s9
 8000ec4:	eef0 1a44 	vmovge.f32	s3, s8
 8000ec8:	2301      	movs	r3, #1
 8000eca:	e726      	b.n	8000d1a <__mulsc3+0x62>
 8000ecc:	ee10 3a10 	vmov	r3, s0
 8000ed0:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8000f70 <__mulsc3+0x2b8>
 8000ed4:	eddf 7a27 	vldr	s15, [pc, #156]	; 8000f74 <__mulsc3+0x2bc>
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	bfb4      	ite	lt
 8000edc:	eeb0 0a67 	vmovlt.f32	s0, s15
 8000ee0:	eeb0 0a47 	vmovge.f32	s0, s14
 8000ee4:	e7a0      	b.n	8000e28 <__mulsc3+0x170>
 8000ee6:	ee11 3a10 	vmov	r3, s2
 8000eea:	ed9f 4a21 	vldr	s8, [pc, #132]	; 8000f70 <__mulsc3+0x2b8>
 8000eee:	eddf 4a21 	vldr	s9, [pc, #132]	; 8000f74 <__mulsc3+0x2bc>
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	bfb4      	ite	lt
 8000ef6:	eeb0 1a64 	vmovlt.f32	s2, s9
 8000efa:	eeb0 1a44 	vmovge.f32	s2, s8
 8000efe:	e7cf      	b.n	8000ea0 <__mulsc3+0x1e8>
 8000f00:	ee11 3a90 	vmov	r3, s3
 8000f04:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8000f70 <__mulsc3+0x2b8>
 8000f08:	eddf 7a1a 	vldr	s15, [pc, #104]	; 8000f74 <__mulsc3+0x2bc>
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	bfb4      	ite	lt
 8000f10:	eef0 1a67 	vmovlt.f32	s3, s15
 8000f14:	eef0 1a47 	vmovge.f32	s3, s14
 8000f18:	e744      	b.n	8000da4 <__mulsc3+0xec>
 8000f1a:	ee11 3a10 	vmov	r3, s2
 8000f1e:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8000f70 <__mulsc3+0x2b8>
 8000f22:	eddf 7a14 	vldr	s15, [pc, #80]	; 8000f74 <__mulsc3+0x2bc>
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	bfb4      	ite	lt
 8000f2a:	eeb0 1a67 	vmovlt.f32	s2, s15
 8000f2e:	eeb0 1a47 	vmovge.f32	s2, s14
 8000f32:	e731      	b.n	8000d98 <__mulsc3+0xe0>
 8000f34:	ee10 3a90 	vmov	r3, s1
 8000f38:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8000f70 <__mulsc3+0x2b8>
 8000f3c:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8000f74 <__mulsc3+0x2bc>
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	bfb4      	ite	lt
 8000f44:	eef0 0a67 	vmovlt.f32	s1, s15
 8000f48:	eef0 0a47 	vmovge.f32	s1, s14
 8000f4c:	e71e      	b.n	8000d8c <__mulsc3+0xd4>
 8000f4e:	ee10 3a10 	vmov	r3, s0
 8000f52:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8000f70 <__mulsc3+0x2b8>
 8000f56:	eddf 7a07 	vldr	s15, [pc, #28]	; 8000f74 <__mulsc3+0x2bc>
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	bfb4      	ite	lt
 8000f5e:	eeb0 0a67 	vmovlt.f32	s0, s15
 8000f62:	eeb0 0a47 	vmovge.f32	s0, s14
 8000f66:	e70b      	b.n	8000d80 <__mulsc3+0xc8>
 8000f68:	7f7fffff 	.word	0x7f7fffff
 8000f6c:	7f800000 	.word	0x7f800000
 8000f70:	00000000 	.word	0x00000000
 8000f74:	80000000 	.word	0x80000000

08000f78 <__udivmoddi4>:
 8000f78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000f7c:	9e08      	ldr	r6, [sp, #32]
 8000f7e:	460d      	mov	r5, r1
 8000f80:	4604      	mov	r4, r0
 8000f82:	460f      	mov	r7, r1
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d14a      	bne.n	800101e <__udivmoddi4+0xa6>
 8000f88:	428a      	cmp	r2, r1
 8000f8a:	4694      	mov	ip, r2
 8000f8c:	d965      	bls.n	800105a <__udivmoddi4+0xe2>
 8000f8e:	fab2 f382 	clz	r3, r2
 8000f92:	b143      	cbz	r3, 8000fa6 <__udivmoddi4+0x2e>
 8000f94:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f98:	f1c3 0220 	rsb	r2, r3, #32
 8000f9c:	409f      	lsls	r7, r3
 8000f9e:	fa20 f202 	lsr.w	r2, r0, r2
 8000fa2:	4317      	orrs	r7, r2
 8000fa4:	409c      	lsls	r4, r3
 8000fa6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000faa:	fa1f f58c 	uxth.w	r5, ip
 8000fae:	fbb7 f1fe 	udiv	r1, r7, lr
 8000fb2:	0c22      	lsrs	r2, r4, #16
 8000fb4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000fb8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000fbc:	fb01 f005 	mul.w	r0, r1, r5
 8000fc0:	4290      	cmp	r0, r2
 8000fc2:	d90a      	bls.n	8000fda <__udivmoddi4+0x62>
 8000fc4:	eb1c 0202 	adds.w	r2, ip, r2
 8000fc8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000fcc:	f080 811c 	bcs.w	8001208 <__udivmoddi4+0x290>
 8000fd0:	4290      	cmp	r0, r2
 8000fd2:	f240 8119 	bls.w	8001208 <__udivmoddi4+0x290>
 8000fd6:	3902      	subs	r1, #2
 8000fd8:	4462      	add	r2, ip
 8000fda:	1a12      	subs	r2, r2, r0
 8000fdc:	b2a4      	uxth	r4, r4
 8000fde:	fbb2 f0fe 	udiv	r0, r2, lr
 8000fe2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000fe6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000fea:	fb00 f505 	mul.w	r5, r0, r5
 8000fee:	42a5      	cmp	r5, r4
 8000ff0:	d90a      	bls.n	8001008 <__udivmoddi4+0x90>
 8000ff2:	eb1c 0404 	adds.w	r4, ip, r4
 8000ff6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ffa:	f080 8107 	bcs.w	800120c <__udivmoddi4+0x294>
 8000ffe:	42a5      	cmp	r5, r4
 8001000:	f240 8104 	bls.w	800120c <__udivmoddi4+0x294>
 8001004:	4464      	add	r4, ip
 8001006:	3802      	subs	r0, #2
 8001008:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800100c:	1b64      	subs	r4, r4, r5
 800100e:	2100      	movs	r1, #0
 8001010:	b11e      	cbz	r6, 800101a <__udivmoddi4+0xa2>
 8001012:	40dc      	lsrs	r4, r3
 8001014:	2300      	movs	r3, #0
 8001016:	e9c6 4300 	strd	r4, r3, [r6]
 800101a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800101e:	428b      	cmp	r3, r1
 8001020:	d908      	bls.n	8001034 <__udivmoddi4+0xbc>
 8001022:	2e00      	cmp	r6, #0
 8001024:	f000 80ed 	beq.w	8001202 <__udivmoddi4+0x28a>
 8001028:	2100      	movs	r1, #0
 800102a:	e9c6 0500 	strd	r0, r5, [r6]
 800102e:	4608      	mov	r0, r1
 8001030:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001034:	fab3 f183 	clz	r1, r3
 8001038:	2900      	cmp	r1, #0
 800103a:	d149      	bne.n	80010d0 <__udivmoddi4+0x158>
 800103c:	42ab      	cmp	r3, r5
 800103e:	d302      	bcc.n	8001046 <__udivmoddi4+0xce>
 8001040:	4282      	cmp	r2, r0
 8001042:	f200 80f8 	bhi.w	8001236 <__udivmoddi4+0x2be>
 8001046:	1a84      	subs	r4, r0, r2
 8001048:	eb65 0203 	sbc.w	r2, r5, r3
 800104c:	2001      	movs	r0, #1
 800104e:	4617      	mov	r7, r2
 8001050:	2e00      	cmp	r6, #0
 8001052:	d0e2      	beq.n	800101a <__udivmoddi4+0xa2>
 8001054:	e9c6 4700 	strd	r4, r7, [r6]
 8001058:	e7df      	b.n	800101a <__udivmoddi4+0xa2>
 800105a:	b902      	cbnz	r2, 800105e <__udivmoddi4+0xe6>
 800105c:	deff      	udf	#255	; 0xff
 800105e:	fab2 f382 	clz	r3, r2
 8001062:	2b00      	cmp	r3, #0
 8001064:	f040 8090 	bne.w	8001188 <__udivmoddi4+0x210>
 8001068:	1a8a      	subs	r2, r1, r2
 800106a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800106e:	fa1f fe8c 	uxth.w	lr, ip
 8001072:	2101      	movs	r1, #1
 8001074:	fbb2 f5f7 	udiv	r5, r2, r7
 8001078:	fb07 2015 	mls	r0, r7, r5, r2
 800107c:	0c22      	lsrs	r2, r4, #16
 800107e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8001082:	fb0e f005 	mul.w	r0, lr, r5
 8001086:	4290      	cmp	r0, r2
 8001088:	d908      	bls.n	800109c <__udivmoddi4+0x124>
 800108a:	eb1c 0202 	adds.w	r2, ip, r2
 800108e:	f105 38ff 	add.w	r8, r5, #4294967295
 8001092:	d202      	bcs.n	800109a <__udivmoddi4+0x122>
 8001094:	4290      	cmp	r0, r2
 8001096:	f200 80cb 	bhi.w	8001230 <__udivmoddi4+0x2b8>
 800109a:	4645      	mov	r5, r8
 800109c:	1a12      	subs	r2, r2, r0
 800109e:	b2a4      	uxth	r4, r4
 80010a0:	fbb2 f0f7 	udiv	r0, r2, r7
 80010a4:	fb07 2210 	mls	r2, r7, r0, r2
 80010a8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80010ac:	fb0e fe00 	mul.w	lr, lr, r0
 80010b0:	45a6      	cmp	lr, r4
 80010b2:	d908      	bls.n	80010c6 <__udivmoddi4+0x14e>
 80010b4:	eb1c 0404 	adds.w	r4, ip, r4
 80010b8:	f100 32ff 	add.w	r2, r0, #4294967295
 80010bc:	d202      	bcs.n	80010c4 <__udivmoddi4+0x14c>
 80010be:	45a6      	cmp	lr, r4
 80010c0:	f200 80bb 	bhi.w	800123a <__udivmoddi4+0x2c2>
 80010c4:	4610      	mov	r0, r2
 80010c6:	eba4 040e 	sub.w	r4, r4, lr
 80010ca:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80010ce:	e79f      	b.n	8001010 <__udivmoddi4+0x98>
 80010d0:	f1c1 0720 	rsb	r7, r1, #32
 80010d4:	408b      	lsls	r3, r1
 80010d6:	fa22 fc07 	lsr.w	ip, r2, r7
 80010da:	ea4c 0c03 	orr.w	ip, ip, r3
 80010de:	fa05 f401 	lsl.w	r4, r5, r1
 80010e2:	fa20 f307 	lsr.w	r3, r0, r7
 80010e6:	40fd      	lsrs	r5, r7
 80010e8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80010ec:	4323      	orrs	r3, r4
 80010ee:	fbb5 f8f9 	udiv	r8, r5, r9
 80010f2:	fa1f fe8c 	uxth.w	lr, ip
 80010f6:	fb09 5518 	mls	r5, r9, r8, r5
 80010fa:	0c1c      	lsrs	r4, r3, #16
 80010fc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8001100:	fb08 f50e 	mul.w	r5, r8, lr
 8001104:	42a5      	cmp	r5, r4
 8001106:	fa02 f201 	lsl.w	r2, r2, r1
 800110a:	fa00 f001 	lsl.w	r0, r0, r1
 800110e:	d90b      	bls.n	8001128 <__udivmoddi4+0x1b0>
 8001110:	eb1c 0404 	adds.w	r4, ip, r4
 8001114:	f108 3aff 	add.w	sl, r8, #4294967295
 8001118:	f080 8088 	bcs.w	800122c <__udivmoddi4+0x2b4>
 800111c:	42a5      	cmp	r5, r4
 800111e:	f240 8085 	bls.w	800122c <__udivmoddi4+0x2b4>
 8001122:	f1a8 0802 	sub.w	r8, r8, #2
 8001126:	4464      	add	r4, ip
 8001128:	1b64      	subs	r4, r4, r5
 800112a:	b29d      	uxth	r5, r3
 800112c:	fbb4 f3f9 	udiv	r3, r4, r9
 8001130:	fb09 4413 	mls	r4, r9, r3, r4
 8001134:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8001138:	fb03 fe0e 	mul.w	lr, r3, lr
 800113c:	45a6      	cmp	lr, r4
 800113e:	d908      	bls.n	8001152 <__udivmoddi4+0x1da>
 8001140:	eb1c 0404 	adds.w	r4, ip, r4
 8001144:	f103 35ff 	add.w	r5, r3, #4294967295
 8001148:	d26c      	bcs.n	8001224 <__udivmoddi4+0x2ac>
 800114a:	45a6      	cmp	lr, r4
 800114c:	d96a      	bls.n	8001224 <__udivmoddi4+0x2ac>
 800114e:	3b02      	subs	r3, #2
 8001150:	4464      	add	r4, ip
 8001152:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8001156:	fba3 9502 	umull	r9, r5, r3, r2
 800115a:	eba4 040e 	sub.w	r4, r4, lr
 800115e:	42ac      	cmp	r4, r5
 8001160:	46c8      	mov	r8, r9
 8001162:	46ae      	mov	lr, r5
 8001164:	d356      	bcc.n	8001214 <__udivmoddi4+0x29c>
 8001166:	d053      	beq.n	8001210 <__udivmoddi4+0x298>
 8001168:	b156      	cbz	r6, 8001180 <__udivmoddi4+0x208>
 800116a:	ebb0 0208 	subs.w	r2, r0, r8
 800116e:	eb64 040e 	sbc.w	r4, r4, lr
 8001172:	fa04 f707 	lsl.w	r7, r4, r7
 8001176:	40ca      	lsrs	r2, r1
 8001178:	40cc      	lsrs	r4, r1
 800117a:	4317      	orrs	r7, r2
 800117c:	e9c6 7400 	strd	r7, r4, [r6]
 8001180:	4618      	mov	r0, r3
 8001182:	2100      	movs	r1, #0
 8001184:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001188:	f1c3 0120 	rsb	r1, r3, #32
 800118c:	fa02 fc03 	lsl.w	ip, r2, r3
 8001190:	fa20 f201 	lsr.w	r2, r0, r1
 8001194:	fa25 f101 	lsr.w	r1, r5, r1
 8001198:	409d      	lsls	r5, r3
 800119a:	432a      	orrs	r2, r5
 800119c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80011a0:	fa1f fe8c 	uxth.w	lr, ip
 80011a4:	fbb1 f0f7 	udiv	r0, r1, r7
 80011a8:	fb07 1510 	mls	r5, r7, r0, r1
 80011ac:	0c11      	lsrs	r1, r2, #16
 80011ae:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80011b2:	fb00 f50e 	mul.w	r5, r0, lr
 80011b6:	428d      	cmp	r5, r1
 80011b8:	fa04 f403 	lsl.w	r4, r4, r3
 80011bc:	d908      	bls.n	80011d0 <__udivmoddi4+0x258>
 80011be:	eb1c 0101 	adds.w	r1, ip, r1
 80011c2:	f100 38ff 	add.w	r8, r0, #4294967295
 80011c6:	d22f      	bcs.n	8001228 <__udivmoddi4+0x2b0>
 80011c8:	428d      	cmp	r5, r1
 80011ca:	d92d      	bls.n	8001228 <__udivmoddi4+0x2b0>
 80011cc:	3802      	subs	r0, #2
 80011ce:	4461      	add	r1, ip
 80011d0:	1b49      	subs	r1, r1, r5
 80011d2:	b292      	uxth	r2, r2
 80011d4:	fbb1 f5f7 	udiv	r5, r1, r7
 80011d8:	fb07 1115 	mls	r1, r7, r5, r1
 80011dc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80011e0:	fb05 f10e 	mul.w	r1, r5, lr
 80011e4:	4291      	cmp	r1, r2
 80011e6:	d908      	bls.n	80011fa <__udivmoddi4+0x282>
 80011e8:	eb1c 0202 	adds.w	r2, ip, r2
 80011ec:	f105 38ff 	add.w	r8, r5, #4294967295
 80011f0:	d216      	bcs.n	8001220 <__udivmoddi4+0x2a8>
 80011f2:	4291      	cmp	r1, r2
 80011f4:	d914      	bls.n	8001220 <__udivmoddi4+0x2a8>
 80011f6:	3d02      	subs	r5, #2
 80011f8:	4462      	add	r2, ip
 80011fa:	1a52      	subs	r2, r2, r1
 80011fc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8001200:	e738      	b.n	8001074 <__udivmoddi4+0xfc>
 8001202:	4631      	mov	r1, r6
 8001204:	4630      	mov	r0, r6
 8001206:	e708      	b.n	800101a <__udivmoddi4+0xa2>
 8001208:	4639      	mov	r1, r7
 800120a:	e6e6      	b.n	8000fda <__udivmoddi4+0x62>
 800120c:	4610      	mov	r0, r2
 800120e:	e6fb      	b.n	8001008 <__udivmoddi4+0x90>
 8001210:	4548      	cmp	r0, r9
 8001212:	d2a9      	bcs.n	8001168 <__udivmoddi4+0x1f0>
 8001214:	ebb9 0802 	subs.w	r8, r9, r2
 8001218:	eb65 0e0c 	sbc.w	lr, r5, ip
 800121c:	3b01      	subs	r3, #1
 800121e:	e7a3      	b.n	8001168 <__udivmoddi4+0x1f0>
 8001220:	4645      	mov	r5, r8
 8001222:	e7ea      	b.n	80011fa <__udivmoddi4+0x282>
 8001224:	462b      	mov	r3, r5
 8001226:	e794      	b.n	8001152 <__udivmoddi4+0x1da>
 8001228:	4640      	mov	r0, r8
 800122a:	e7d1      	b.n	80011d0 <__udivmoddi4+0x258>
 800122c:	46d0      	mov	r8, sl
 800122e:	e77b      	b.n	8001128 <__udivmoddi4+0x1b0>
 8001230:	3d02      	subs	r5, #2
 8001232:	4462      	add	r2, ip
 8001234:	e732      	b.n	800109c <__udivmoddi4+0x124>
 8001236:	4608      	mov	r0, r1
 8001238:	e70a      	b.n	8001050 <__udivmoddi4+0xd8>
 800123a:	4464      	add	r4, ip
 800123c:	3802      	subs	r0, #2
 800123e:	e742      	b.n	80010c6 <__udivmoddi4+0x14e>

08001240 <__aeabi_idiv0>:
 8001240:	4770      	bx	lr
 8001242:	bf00      	nop

08001244 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001244:	b510      	push	{r4, lr}

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001246:	2400      	movs	r4, #0
{
 8001248:	b08a      	sub	sp, #40	; 0x28
  ADC_ChannelConfTypeDef sConfig = {0};
 800124a:	4621      	mov	r1, r4
 800124c:	2218      	movs	r2, #24
 800124e:	a804      	add	r0, sp, #16
  ADC_MultiModeTypeDef multimode = {0};
 8001250:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8001254:	9403      	str	r4, [sp, #12]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001256:	f004 f988 	bl	800556a <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800125a:	481d      	ldr	r0, [pc, #116]	; (80012d0 <MX_ADC1_Init+0x8c>)
 800125c:	4b1d      	ldr	r3, [pc, #116]	; (80012d4 <MX_ADC1_Init+0x90>)
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800125e:	8304      	strh	r4, [r0, #24]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001260:	e9c0 3400 	strd	r3, r4, [r0]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001264:	2304      	movs	r3, #4
 8001266:	6143      	str	r3, [r0, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.NbrOfConversion = 1;
 8001268:	2301      	movs	r3, #1
 800126a:	61c3      	str	r3, [r0, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T3_TRGO;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800126c:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8001270:	f44f 6380 	mov.w	r3, #1024	; 0x400
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001274:	e9c0 4402 	strd	r4, r4, [r0, #8]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001278:	e9c0 130a 	strd	r1, r3, [r0, #40]	; 0x28
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800127c:	6104      	str	r4, [r0, #16]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800127e:	f880 4020 	strb.w	r4, [r0, #32]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001282:	f880 4030 	strb.w	r4, [r0, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001286:	6344      	str	r4, [r0, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001288:	f880 4038 	strb.w	r4, [r0, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800128c:	f001 f80a 	bl	80022a4 <HAL_ADC_Init>
 8001290:	b108      	cbz	r0, 8001296 <MX_ADC1_Init+0x52>
  {
    Error_Handler();
 8001292:	f000 fc0b 	bl	8001aac <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001296:	480e      	ldr	r0, [pc, #56]	; (80012d0 <MX_ADC1_Init+0x8c>)
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001298:	9401      	str	r4, [sp, #4]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800129a:	a901      	add	r1, sp, #4
 800129c:	f001 fcc6 	bl	8002c2c <HAL_ADCEx_MultiModeConfigChannel>
 80012a0:	b108      	cbz	r0, 80012a6 <MX_ADC1_Init+0x62>
  {
    Error_Handler();
 80012a2:	f000 fc03 	bl	8001aac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80012a6:	4a0c      	ldr	r2, [pc, #48]	; (80012d8 <MX_ADC1_Init+0x94>)
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
  sConfig.Offset = 0;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012a8:	4809      	ldr	r0, [pc, #36]	; (80012d0 <MX_ADC1_Init+0x8c>)
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80012aa:	2306      	movs	r3, #6
 80012ac:	e9cd 2304 	strd	r2, r3, [sp, #16]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80012b0:	2300      	movs	r3, #0
 80012b2:	227f      	movs	r2, #127	; 0x7f
 80012b4:	e9cd 3206 	strd	r3, r2, [sp, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012b8:	a904      	add	r1, sp, #16
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80012ba:	2204      	movs	r2, #4
  sConfig.Offset = 0;
 80012bc:	e9cd 2308 	strd	r2, r3, [sp, #32]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012c0:	f001 f9f4 	bl	80026ac <HAL_ADC_ConfigChannel>
 80012c4:	b108      	cbz	r0, 80012ca <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 80012c6:	f000 fbf1 	bl	8001aac <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80012ca:	b00a      	add	sp, #40	; 0x28
 80012cc:	bd10      	pop	{r4, pc}
 80012ce:	bf00      	nop
 80012d0:	20000204 	.word	0x20000204
 80012d4:	50040000 	.word	0x50040000
 80012d8:	0c900008 	.word	0x0c900008

080012dc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80012dc:	b510      	push	{r4, lr}
 80012de:	b0aa      	sub	sp, #168	; 0xa8
 80012e0:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e2:	2214      	movs	r2, #20
 80012e4:	2100      	movs	r1, #0
 80012e6:	a803      	add	r0, sp, #12
 80012e8:	f004 f93f 	bl	800556a <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012ec:	2288      	movs	r2, #136	; 0x88
 80012ee:	2100      	movs	r1, #0
 80012f0:	a808      	add	r0, sp, #32
 80012f2:	f004 f93a 	bl	800556a <memset>
  if(adcHandle->Instance==ADC1)
 80012f6:	6822      	ldr	r2, [r4, #0]
 80012f8:	4b21      	ldr	r3, [pc, #132]	; (8001380 <HAL_ADC_MspInit+0xa4>)
 80012fa:	429a      	cmp	r2, r3
 80012fc:	d13d      	bne.n	800137a <HAL_ADC_MspInit+0x9e>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80012fe:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001302:	9308      	str	r3, [sp, #32]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001304:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001308:	2201      	movs	r2, #1
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800130a:	9326      	str	r3, [sp, #152]	; 0x98
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800130c:	2302      	movs	r3, #2
 800130e:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001312:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001316:	2408      	movs	r4, #8
 8001318:	2207      	movs	r2, #7
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800131a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800131e:	a808      	add	r0, sp, #32
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001320:	e9cd 420b 	strd	r4, r2, [sp, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001324:	930f      	str	r3, [sp, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001326:	f002 fb5b 	bl	80039e0 <HAL_RCCEx_PeriphCLKConfig>
 800132a:	b108      	cbz	r0, 8001330 <HAL_ADC_MspInit+0x54>
    {
      Error_Handler();
 800132c:	f000 fbbe 	bl	8001aac <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001330:	4b14      	ldr	r3, [pc, #80]	; (8001384 <HAL_ADC_MspInit+0xa8>)
    PC2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001332:	4815      	ldr	r0, [pc, #84]	; (8001388 <HAL_ADC_MspInit+0xac>)
    __HAL_RCC_ADC_CLK_ENABLE();
 8001334:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001336:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800133a:	64da      	str	r2, [r3, #76]	; 0x4c
 800133c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800133e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001342:	9201      	str	r2, [sp, #4]
 8001344:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001346:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001348:	f042 0204 	orr.w	r2, r2, #4
 800134c:	64da      	str	r2, [r3, #76]	; 0x4c
 800134e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001350:	f003 0304 	and.w	r3, r3, #4
 8001354:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001356:	2204      	movs	r2, #4
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001358:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135a:	2400      	movs	r4, #0
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800135c:	230b      	movs	r3, #11
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800135e:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001360:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001364:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001366:	f001 fd39 	bl	8002ddc <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 1, 0);
 800136a:	2012      	movs	r0, #18
 800136c:	4622      	mov	r2, r4
 800136e:	2101      	movs	r1, #1
 8001370:	f001 fce0 	bl	8002d34 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001374:	2012      	movs	r0, #18
 8001376:	f001 fd0f 	bl	8002d98 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800137a:	b02a      	add	sp, #168	; 0xa8
 800137c:	bd10      	pop	{r4, pc}
 800137e:	bf00      	nop
 8001380:	50040000 	.word	0x50040000
 8001384:	40021000 	.word	0x40021000
 8001388:	48000800 	.word	0x48000800
 800138c:	00000000 	.word	0x00000000

08001390 <FFT_Init>:

static uint16_t FFT_LENGTH, FFT_BIT_LENGTH;
static complex float W[FFT_MAX_LENGTH] = {0};

void FFT_Init(uint16_t N)
{
 8001390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001394:	ed2d 8b02 	vpush	{d8}
    FFT_LENGTH = N;
 8001398:	4b3b      	ldr	r3, [pc, #236]	; (8001488 <FFT_Init+0xf8>)
    FFT_BIT_LENGTH = log2(FFT_LENGTH);

    W[0] = 1;
 800139a:	4f3c      	ldr	r7, [pc, #240]	; (800148c <FFT_Init+0xfc>)
    FFT_LENGTH = N;
 800139c:	8018      	strh	r0, [r3, #0]
{
 800139e:	b085      	sub	sp, #20
 80013a0:	4605      	mov	r5, r0
    FFT_BIT_LENGTH = log2(FFT_LENGTH);
 80013a2:	f7ff f8af 	bl	8000504 <__aeabi_ui2d>
 80013a6:	ec41 0b10 	vmov	d0, r0, r1
 80013aa:	f006 f9d9 	bl	8007760 <log>
 80013ae:	a332      	add	r3, pc, #200	; (adr r3, 8001478 <FFT_Init+0xe8>)
 80013b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013b4:	ec51 0b10 	vmov	r0, r1, d0
 80013b8:	f7ff fa48 	bl	800084c <__aeabi_ddiv>
 80013bc:	f7ff fbf4 	bl	8000ba8 <__aeabi_d2uiz>
 80013c0:	4b33      	ldr	r3, [pc, #204]	; (8001490 <FFT_Init+0x100>)
    W[0] = 1;
 80013c2:	4c34      	ldr	r4, [pc, #208]	; (8001494 <FFT_Init+0x104>)
    FFT_BIT_LENGTH = log2(FFT_LENGTH);
 80013c4:	8018      	strh	r0, [r3, #0]
    W[0] = 1;
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	6023      	str	r3, [r4, #0]
    for (uint16_t i = 1; i < FFT_LENGTH; i++) {
    	if (i == FFT_LENGTH/2)
    		W[i] = -1;
    	else
    		W[i] = cos((2 * M_PI * i) / FFT_LENGTH) - I*sin((2 * M_PI * i) / FFT_LENGTH);
 80013ca:	f20f 0bb4 	addw	fp, pc, #180	; 0xb4
 80013ce:	e9db ab00 	ldrd	sl, fp, [fp]
    W[0] = 1;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6063      	str	r3, [r4, #4]
    	if (i == FFT_LENGTH/2)
 80013d6:	086b      	lsrs	r3, r5, #1
 80013d8:	9301      	str	r3, [sp, #4]
    for (uint16_t i = 1; i < FFT_LENGTH; i++) {
 80013da:	2601      	movs	r6, #1
 80013dc:	b2b3      	uxth	r3, r6
 80013de:	429d      	cmp	r5, r3
 80013e0:	d804      	bhi.n	80013ec <FFT_Init+0x5c>
    }
}
 80013e2:	b005      	add	sp, #20
 80013e4:	ecbd 8b02 	vpop	{d8}
 80013e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    	if (i == FFT_LENGTH/2)
 80013ec:	9a01      	ldr	r2, [sp, #4]
 80013ee:	429a      	cmp	r2, r3
 80013f0:	d106      	bne.n	8001400 <FFT_Init+0x70>
    		W[i] = -1;
 80013f2:	68bb      	ldr	r3, [r7, #8]
 80013f4:	60a3      	str	r3, [r4, #8]
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	60e3      	str	r3, [r4, #12]
    for (uint16_t i = 1; i < FFT_LENGTH; i++) {
 80013fa:	3601      	adds	r6, #1
 80013fc:	3408      	adds	r4, #8
 80013fe:	e7ed      	b.n	80013dc <FFT_Init+0x4c>
    		W[i] = cos((2 * M_PI * i) / FFT_LENGTH) - I*sin((2 * M_PI * i) / FFT_LENGTH);
 8001400:	4630      	mov	r0, r6
 8001402:	f7ff f88f 	bl	8000524 <__aeabi_i2d>
 8001406:	4652      	mov	r2, sl
 8001408:	465b      	mov	r3, fp
 800140a:	f7ff f8f5 	bl	80005f8 <__aeabi_dmul>
 800140e:	4680      	mov	r8, r0
 8001410:	4628      	mov	r0, r5
 8001412:	4689      	mov	r9, r1
 8001414:	f7ff f886 	bl	8000524 <__aeabi_i2d>
 8001418:	4602      	mov	r2, r0
 800141a:	460b      	mov	r3, r1
 800141c:	4640      	mov	r0, r8
 800141e:	4649      	mov	r1, r9
 8001420:	f7ff fa14 	bl	800084c <__aeabi_ddiv>
 8001424:	ec41 0b10 	vmov	d0, r0, r1
 8001428:	ec41 0b18 	vmov	d8, r0, r1
 800142c:	f006 fa58 	bl	80078e0 <sin>
 8001430:	ec59 8b10 	vmov	r8, r9, d0
 8001434:	eeb0 0a48 	vmov.f32	s0, s16
 8001438:	eef0 0a68 	vmov.f32	s1, s17
 800143c:	f006 f9fc 	bl	8007838 <cos>
 8001440:	2200      	movs	r2, #0
 8001442:	2300      	movs	r3, #0
 8001444:	4640      	mov	r0, r8
 8001446:	4649      	mov	r1, r9
 8001448:	ed8d 0b02 	vstr	d0, [sp, #8]
 800144c:	f7ff f8d4 	bl	80005f8 <__aeabi_dmul>
 8001450:	4602      	mov	r2, r0
 8001452:	460b      	mov	r3, r1
 8001454:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8001458:	f7fe ff16 	bl	8000288 <__aeabi_dsub>
 800145c:	f7ff fbc4 	bl	8000be8 <__aeabi_d2f>
 8001460:	4649      	mov	r1, r9
 8001462:	60a0      	str	r0, [r4, #8]
 8001464:	4640      	mov	r0, r8
 8001466:	f7ff fbbf 	bl	8000be8 <__aeabi_d2f>
 800146a:	ee07 0a90 	vmov	s15, r0
 800146e:	eef1 7a67 	vneg.f32	s15, s15
 8001472:	edc4 7a03 	vstr	s15, [r4, #12]
 8001476:	e7c0      	b.n	80013fa <FFT_Init+0x6a>
 8001478:	fefa39ef 	.word	0xfefa39ef
 800147c:	3fe62e42 	.word	0x3fe62e42
 8001480:	54442d18 	.word	0x54442d18
 8001484:	401921fb 	.word	0x401921fb
 8001488:	2000026a 	.word	0x2000026a
 800148c:	08008eb8 	.word	0x08008eb8
 8001490:	20000268 	.word	0x20000268
 8001494:	2000026c 	.word	0x2000026c

08001498 <FFT_Compute>:
        }
    }
}

void FFT_Compute(float fft_in[], float fft_out[])
{
 8001498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800149c:	ed2d 8b04 	vpush	{d8-d9}
    complex float fft_data[FFT_LENGTH];
 80014a0:	4bc7      	ldr	r3, [pc, #796]	; (80017c0 <FFT_Compute+0x328>)
{
 80014a2:	b095      	sub	sp, #84	; 0x54
    complex float fft_data[FFT_LENGTH];
 80014a4:	881d      	ldrh	r5, [r3, #0]
 80014a6:	466b      	mov	r3, sp
{
 80014a8:	af00      	add	r7, sp, #0
    complex float fft_data[FFT_LENGTH];
 80014aa:	eba3 03c5 	sub.w	r3, r3, r5, lsl #3
 80014ae:	469d      	mov	sp, r3
    complex float fft_last_data[FFT_LENGTH];
 80014b0:	eba3 03c5 	sub.w	r3, r3, r5, lsl #3
    complex float fft_data[FFT_LENGTH];
 80014b4:	f8c7 d040 	str.w	sp, [r7, #64]	; 0x40
    complex float fft_last_data[FFT_LENGTH];
 80014b8:	469d      	mov	sp, r3
    uint16_t bitp = FFT_BIT_LENGTH-1;
 80014ba:	4bc2      	ldr	r3, [pc, #776]	; (80017c4 <FFT_Compute+0x32c>)
{
 80014bc:	6179      	str	r1, [r7, #20]
    uint16_t bitp = FFT_BIT_LENGTH-1;
 80014be:	f8b3 9000 	ldrh.w	r9, [r3]
 80014c2:	f109 3bff 	add.w	fp, r9, #4294967295
    complex float fft_last_data[FFT_LENGTH];
 80014c6:	466c      	mov	r4, sp
    uint16_t bitp = FFT_BIT_LENGTH-1;
 80014c8:	fa1f fb8b 	uxth.w	fp, fp
 80014cc:	4606      	mov	r6, r0
    for (uint16_t i = 0; i < FFT_LENGTH; i++) {
 80014ce:	4684      	mov	ip, r0
 80014d0:	f04f 0a00 	mov.w	sl, #0
 80014d4:	fa1f f88a 	uxth.w	r8, sl
 80014d8:	4545      	cmp	r5, r8
 80014da:	d869      	bhi.n	80015b0 <FFT_Compute+0x118>

    array_reverse(fft_in);

    for (uint16_t i = 0; i < FFT_LENGTH/2; i += 2) {
 80014dc:	ea4f 0855 	mov.w	r8, r5, lsr #1
 80014e0:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 80014e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80014e6:	eb04 03c8 	add.w	r3, r4, r8, lsl #3
 80014ea:	64fc      	str	r4, [r7, #76]	; 0x4c
 80014ec:	eb00 0088 	add.w	r0, r0, r8, lsl #2
 80014f0:	64bb      	str	r3, [r7, #72]	; 0x48
        fft_last_data[i] = fft_in[i+1] + fft_in[i];
        fft_last_data[i+1] = fft_in[i] - fft_in[i+1];

        fft_last_data[i+FFT_LENGTH/2] = fft_in[i+1+FFT_LENGTH/2] + fft_in[i+FFT_LENGTH/2];
 80014f2:	4622      	mov	r2, r4
 80014f4:	2100      	movs	r1, #0
        fft_last_data[i] = fft_in[i+1] + fft_in[i];
 80014f6:	f04f 0e00 	mov.w	lr, #0
    for (uint16_t i = 0; i < FFT_LENGTH/2; i += 2) {
 80014fa:	fa1f fc81 	uxth.w	ip, r1
 80014fe:	45e0      	cmp	r8, ip
 8001500:	f106 0608 	add.w	r6, r6, #8
 8001504:	f102 0210 	add.w	r2, r2, #16
 8001508:	f100 0008 	add.w	r0, r0, #8
 800150c:	f103 0310 	add.w	r3, r3, #16
 8001510:	d852      	bhi.n	80015b8 <FFT_Compute+0x120>
        fft_last_data[i+1+FFT_LENGTH/2] = fft_in[i+FFT_LENGTH/2] - fft_in[i+1+FFT_LENGTH/2];
    }

    for (uint16_t i = 0; i < FFT_BIT_LENGTH-2; i++) {
 8001512:	f1a9 0302 	sub.w	r3, r9, #2
 8001516:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001518:	61fb      	str	r3, [r7, #28]
 800151a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800151c:	4413      	add	r3, r2
 800151e:	647b      	str	r3, [r7, #68]	; 0x44
 8001520:	2300      	movs	r3, #0
 8001522:	633b      	str	r3, [r7, #48]	; 0x30
 8001524:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8001526:	69fa      	ldr	r2, [r7, #28]
 8001528:	4293      	cmp	r3, r2
 800152a:	db67      	blt.n	80015fc <FFT_Compute+0x164>
 800152c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800152e:	f8df 8298 	ldr.w	r8, [pc, #664]	; 80017c8 <FFT_Compute+0x330>
 8001532:	6c3e      	ldr	r6, [r7, #64]	; 0x40
 8001534:	eb03 0908 	add.w	r9, r3, r8
 8001538:	441c      	add	r4, r3
 800153a:	46b2      	mov	sl, r6
        for (uint16_t j = 0; j < FFT_LENGTH; j++) fft_last_data[j] = fft_data[j];

    }


    for (uint16_t i = 0; i < FFT_LENGTH/2; i++) {
 800153c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800153e:	3308      	adds	r3, #8
 8001540:	64bb      	str	r3, [r7, #72]	; 0x48
 8001542:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001544:	3308      	adds	r3, #8
 8001546:	647b      	str	r3, [r7, #68]	; 0x44
 8001548:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800154a:	42a3      	cmp	r3, r4
 800154c:	f108 0808 	add.w	r8, r8, #8
 8001550:	f10a 0a08 	add.w	sl, sl, #8
 8001554:	f109 0908 	add.w	r9, r9, #8
 8001558:	f040 80f4 	bne.w	8001744 <FFT_Compute+0x2ac>
 800155c:	2200      	movs	r2, #0
 800155e:	b291      	uxth	r1, r2
 8001560:	004b      	lsls	r3, r1, #1
        fft_data[i] = fft_last_data[i] + (W[i] * fft_last_data[i + FFT_LENGTH/2]);
        fft_data[i + FFT_LENGTH/2] = fft_last_data[i] + (W[i + FFT_LENGTH/2] * fft_last_data[i + FFT_LENGTH/2]);
    }

    uint16_t i, j;
    for (i = 0, j = 0; i < FFT_LENGTH; i++, j += 2) {
 8001562:	42a9      	cmp	r1, r5
 8001564:	b29b      	uxth	r3, r3
 8001566:	f106 0608 	add.w	r6, r6, #8
 800156a:	f0c0 811e 	bcc.w	80017aa <FFT_Compute+0x312>
        fft_out[j] = creal(fft_data[i]);
        fft_out[j + 1] = cimag(fft_data[i]);
    }
}
 800156e:	3754      	adds	r7, #84	; 0x54
 8001570:	46bd      	mov	sp, r7
 8001572:	ecbd 8b04 	vpop	{d8-d9}
 8001576:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        xr |= ((x & 0x01) << bitp);
 800157a:	f00e 0101 	and.w	r1, lr, #1
 800157e:	4091      	lsls	r1, r2
 8001580:	4319      	orrs	r1, r3
        bitp--;
 8001582:	3a01      	subs	r2, #1
        xr |= ((x & 0x01) << bitp);
 8001584:	b28b      	uxth	r3, r1
        x /= 2;
 8001586:	f3ce 0e4f 	ubfx	lr, lr, #1, #16
        bitp--;
 800158a:	b292      	uxth	r2, r2
    while (x) {
 800158c:	f1be 0f00 	cmp.w	lr, #0
 8001590:	d1f3      	bne.n	800157a <FFT_Compute+0xe2>
        if (i < j) {
 8001592:	4543      	cmp	r3, r8
 8001594:	d907      	bls.n	80015a6 <FFT_Compute+0x10e>
            array[i] = array[j];
 8001596:	eb00 0383 	add.w	r3, r0, r3, lsl #2
            tmp = array[i];
 800159a:	f8dc 2000 	ldr.w	r2, [ip]
            array[i] = array[j];
 800159e:	6819      	ldr	r1, [r3, #0]
 80015a0:	f8cc 1000 	str.w	r1, [ip]
            array[j] = tmp;
 80015a4:	601a      	str	r2, [r3, #0]
    for (uint16_t i = 0; i < FFT_LENGTH; i++) {
 80015a6:	f10a 0a01 	add.w	sl, sl, #1
 80015aa:	f10c 0c04 	add.w	ip, ip, #4
 80015ae:	e791      	b.n	80014d4 <FFT_Compute+0x3c>
    uint16_t bitp = FFT_BIT_LENGTH-1;
 80015b0:	465a      	mov	r2, fp
 80015b2:	46c6      	mov	lr, r8
    uint16_t xr = 0;
 80015b4:	2300      	movs	r3, #0
 80015b6:	e7e9      	b.n	800158c <FFT_Compute+0xf4>
        fft_last_data[i] = fft_in[i+1] + fft_in[i];
 80015b8:	ed16 7a01 	vldr	s14, [r6, #-4]
 80015bc:	ed56 7a02 	vldr	s15, [r6, #-8]
 80015c0:	f842 ec0c 	str.w	lr, [r2, #-12]
 80015c4:	ee77 6a27 	vadd.f32	s13, s14, s15
        fft_last_data[i+1] = fft_in[i] - fft_in[i+1];
 80015c8:	ee77 7ac7 	vsub.f32	s15, s15, s14
        fft_last_data[i+FFT_LENGTH/2] = fft_in[i+1+FFT_LENGTH/2] + fft_in[i+FFT_LENGTH/2];
 80015cc:	ed10 7a01 	vldr	s14, [r0, #-4]
        fft_last_data[i+1] = fft_in[i] - fft_in[i+1];
 80015d0:	ed42 7a02 	vstr	s15, [r2, #-8]
        fft_last_data[i+FFT_LENGTH/2] = fft_in[i+1+FFT_LENGTH/2] + fft_in[i+FFT_LENGTH/2];
 80015d4:	ed50 7a02 	vldr	s15, [r0, #-8]
        fft_last_data[i] = fft_in[i+1] + fft_in[i];
 80015d8:	ed42 6a04 	vstr	s13, [r2, #-16]
        fft_last_data[i+FFT_LENGTH/2] = fft_in[i+1+FFT_LENGTH/2] + fft_in[i+FFT_LENGTH/2];
 80015dc:	ee77 6a27 	vadd.f32	s13, s14, s15
        fft_last_data[i+1+FFT_LENGTH/2] = fft_in[i+FFT_LENGTH/2] - fft_in[i+1+FFT_LENGTH/2];
 80015e0:	ee77 7ac7 	vsub.f32	s15, s15, s14
        fft_last_data[i+1] = fft_in[i] - fft_in[i+1];
 80015e4:	f842 ec04 	str.w	lr, [r2, #-4]
        fft_last_data[i+FFT_LENGTH/2] = fft_in[i+1+FFT_LENGTH/2] + fft_in[i+FFT_LENGTH/2];
 80015e8:	3102      	adds	r1, #2
 80015ea:	ed43 6a04 	vstr	s13, [r3, #-16]
 80015ee:	f843 ec0c 	str.w	lr, [r3, #-12]
        fft_last_data[i+1+FFT_LENGTH/2] = fft_in[i+FFT_LENGTH/2] - fft_in[i+1+FFT_LENGTH/2];
 80015f2:	ed43 7a02 	vstr	s15, [r3, #-8]
 80015f6:	f843 ec04 	str.w	lr, [r3, #-4]
    for (uint16_t i = 0; i < FFT_LENGTH/2; i += 2) {
 80015fa:	e77e      	b.n	80014fa <FFT_Compute+0x62>
        uint16_t stage_index = (1 << (i+1));
 80015fc:	2201      	movs	r2, #1
 80015fe:	3301      	adds	r3, #1
 8001600:	fa02 f303 	lsl.w	r3, r2, r3
 8001604:	b29a      	uxth	r2, r3
        index_offset_b = stage_index;
 8001606:	b21b      	sxth	r3, r3
 8001608:	627b      	str	r3, [r7, #36]	; 0x24
        uint16_t stage_index = (1 << (i+1));
 800160a:	61ba      	str	r2, [r7, #24]
        uint16_t W_offset = FFT_LENGTH / (stage_index * 2);
 800160c:	62ba      	str	r2, [r7, #40]	; 0x28
 800160e:	0052      	lsls	r2, r2, #1
 8001610:	fbb5 f2f2 	udiv	r2, r5, r2
 8001614:	623a      	str	r2, [r7, #32]
        for (uint16_t j = 0; j < FFT_LENGTH/2; j++) {
 8001616:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800161a:	2600      	movs	r6, #0
 800161c:	63bb      	str	r3, [r7, #56]	; 0x38
        index_offset_b = stage_index;
 800161e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
        for (uint16_t j = 0; j < FFT_LENGTH/2; j++) {
 8001620:	63fa      	str	r2, [r7, #60]	; 0x3c
        uint16_t counter = 0;
 8001622:	637e      	str	r6, [r7, #52]	; 0x34
        uint16_t W_index = 0;
 8001624:	4631      	mov	r1, r6
        index_offset_a = 0;
 8001626:	46b3      	mov	fp, r6
        for (uint16_t j = 0; j < FFT_LENGTH/2; j++) {
 8001628:	b2b0      	uxth	r0, r6
 800162a:	4580      	cmp	r8, r0
 800162c:	d80b      	bhi.n	8001646 <FFT_Compute+0x1ae>
 800162e:	4623      	mov	r3, r4
 8001630:	2100      	movs	r1, #0
        for (uint16_t j = 0; j < FFT_LENGTH; j++) fft_last_data[j] = fft_data[j];
 8001632:	b288      	uxth	r0, r1
 8001634:	4285      	cmp	r5, r0
 8001636:	f102 0208 	add.w	r2, r2, #8
 800163a:	f103 0308 	add.w	r3, r3, #8
 800163e:	d877      	bhi.n	8001730 <FFT_Compute+0x298>
    for (uint16_t i = 0; i < FFT_BIT_LENGTH-2; i++) {
 8001640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001642:	3301      	adds	r3, #1
 8001644:	e76d      	b.n	8001522 <FFT_Compute+0x8a>
 8001646:	607a      	str	r2, [r7, #4]
            fft_data[j] = fft_last_data[j + index_offset_a] + (W[W_index] * fft_last_data[j + index_offset_b]);
 8001648:	4a5f      	ldr	r2, [pc, #380]	; (80017c8 <FFT_Compute+0x330>)
 800164a:	60f9      	str	r1, [r7, #12]
 800164c:	eb02 0cc1 	add.w	ip, r2, r1, lsl #3
 8001650:	eb06 0a03 	add.w	sl, r6, r3
 8001654:	ed9c 8a00 	vldr	s16, [ip]
 8001658:	eddc 8a01 	vldr	s17, [ip, #4]
 800165c:	613b      	str	r3, [r7, #16]
 800165e:	eb04 0cca 	add.w	ip, r4, sl, lsl #3
 8001662:	eb0b 0906 	add.w	r9, fp, r6
 8001666:	eb04 00c9 	add.w	r0, r4, r9, lsl #3
 800166a:	eddc 1a01 	vldr	s3, [ip, #4]
 800166e:	ed9c 1a00 	vldr	s2, [ip]
 8001672:	60b8      	str	r0, [r7, #8]
 8001674:	eef0 0a68 	vmov.f32	s1, s17
 8001678:	eeb0 0a48 	vmov.f32	s0, s16
 800167c:	f7ff fb1c 	bl	8000cb8 <__mulsc3>
 8001680:	68b8      	ldr	r0, [r7, #8]
 8001682:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001684:	edd0 7a01 	vldr	s15, [r0, #4]
 8001688:	ee70 0aa7 	vadd.f32	s1, s1, s15
 800168c:	edd0 7a00 	vldr	s15, [r0]
 8001690:	edc3 0a01 	vstr	s1, [r3, #4]
 8001694:	ee37 0a80 	vadd.f32	s0, s15, s0
            fft_data[j + FFT_LENGTH/2] = fft_last_data[j + index_offset_a + FFT_LENGTH/2] + (W[W_index] * fft_last_data[j + index_offset_b + FFT_LENGTH/2]);
 8001698:	44c2      	add	sl, r8
 800169a:	eb04 0aca 	add.w	sl, r4, sl, lsl #3
            fft_data[j] = fft_last_data[j + index_offset_a] + (W[W_index] * fft_last_data[j + index_offset_b]);
 800169e:	ed83 0a00 	vstr	s0, [r3]
            fft_data[j + FFT_LENGTH/2] = fft_last_data[j + index_offset_a + FFT_LENGTH/2] + (W[W_index] * fft_last_data[j + index_offset_b + FFT_LENGTH/2]);
 80016a2:	edda 1a01 	vldr	s3, [sl, #4]
 80016a6:	ed9a 1a00 	vldr	s2, [sl]
 80016aa:	44c1      	add	r9, r8
 80016ac:	eef0 0a68 	vmov.f32	s1, s17
 80016b0:	eeb0 0a48 	vmov.f32	s0, s16
 80016b4:	f7ff fb00 	bl	8000cb8 <__mulsc3>
 80016b8:	eb04 09c9 	add.w	r9, r4, r9, lsl #3
 80016bc:	edd9 7a01 	vldr	s15, [r9, #4]
 80016c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
            if (counter == stage_index) {
 80016c2:	687a      	ldr	r2, [r7, #4]
            fft_data[j + FFT_LENGTH/2] = fft_last_data[j + index_offset_a + FFT_LENGTH/2] + (W[W_index] * fft_last_data[j + index_offset_b + FFT_LENGTH/2]);
 80016c4:	ee70 0aa7 	vadd.f32	s1, s1, s15
 80016c8:	edd9 7a00 	vldr	s15, [r9]
 80016cc:	edc3 0a01 	vstr	s1, [r3, #4]
 80016d0:	ee37 0a80 	vadd.f32	s0, s15, s0
 80016d4:	ed83 0a00 	vstr	s0, [r3]
            counter++;
 80016d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016da:	1c58      	adds	r0, r3, #1
            if (counter == stage_index) {
 80016dc:	69bb      	ldr	r3, [r7, #24]
            counter++;
 80016de:	fa1f fe80 	uxth.w	lr, r0
            if (counter == stage_index) {
 80016e2:	4573      	cmp	r3, lr
 80016e4:	e9d7 1303 	ldrd	r1, r3, [r7, #12]
 80016e8:	d10f      	bne.n	800170a <FFT_Compute+0x272>
                index_offset_a = (index_offset_a == 0 ? -stage_index : 0);
 80016ea:	f1bb 0f00 	cmp.w	fp, #0
 80016ee:	d11c      	bne.n	800172a <FFT_Compute+0x292>
 80016f0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80016f2:	ea6f 0b00 	mvn.w	fp, r0
 80016f6:	fa0f fb8b 	sxth.w	fp, fp
                index_offset_b = (index_offset_b == stage_index ? 0 : stage_index);
 80016fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80016fc:	4283      	cmp	r3, r0
                counter = 0;
 80016fe:	bf0d      	iteet	eq
 8001700:	2300      	moveq	r3, #0
                index_offset_b = (index_offset_b == stage_index ? 0 : stage_index);
 8001702:	6a7b      	ldrne	r3, [r7, #36]	; 0x24
                counter = 0;
 8001704:	f04f 0e00 	movne.w	lr, #0
                index_offset_b = (index_offset_b == stage_index ? 0 : stage_index);
 8001708:	469e      	moveq	lr, r3
            W_index = (W_index + W_offset) % FFT_LENGTH;
 800170a:	6a38      	ldr	r0, [r7, #32]
 800170c:	4401      	add	r1, r0
 800170e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001710:	fbb1 fcf5 	udiv	ip, r1, r5
 8001714:	3008      	adds	r0, #8
 8001716:	63f8      	str	r0, [r7, #60]	; 0x3c
 8001718:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800171a:	fb05 111c 	mls	r1, r5, ip, r1
 800171e:	3008      	adds	r0, #8
 8001720:	e9c7 e00d 	strd	lr, r0, [r7, #52]	; 0x34
 8001724:	b289      	uxth	r1, r1
        for (uint16_t j = 0; j < FFT_LENGTH/2; j++) {
 8001726:	3601      	adds	r6, #1
 8001728:	e77e      	b.n	8001628 <FFT_Compute+0x190>
                index_offset_a = (index_offset_a == 0 ? -stage_index : 0);
 800172a:	f04f 0b00 	mov.w	fp, #0
 800172e:	e7e4      	b.n	80016fa <FFT_Compute+0x262>
        for (uint16_t j = 0; j < FFT_LENGTH; j++) fft_last_data[j] = fft_data[j];
 8001730:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8001734:	f852 6c08 	ldr.w	r6, [r2, #-8]
 8001738:	f843 6c08 	str.w	r6, [r3, #-8]
 800173c:	f843 0c04 	str.w	r0, [r3, #-4]
 8001740:	3101      	adds	r1, #1
 8001742:	e776      	b.n	8001632 <FFT_Compute+0x19a>
        fft_data[i] = fft_last_data[i] + (W[i] * fft_last_data[i + FFT_LENGTH/2]);
 8001744:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001746:	ed58 0a01 	vldr	s1, [r8, #-4]
 800174a:	edd3 8a00 	vldr	s17, [r3]
 800174e:	ed93 8a01 	vldr	s16, [r3, #4]
 8001752:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001754:	ed18 0a02 	vldr	s0, [r8, #-8]
 8001758:	ed13 9a02 	vldr	s18, [r3, #-8]
 800175c:	ed53 9a01 	vldr	s19, [r3, #-4]
 8001760:	eeb0 1a49 	vmov.f32	s2, s18
 8001764:	eef0 1a69 	vmov.f32	s3, s19
 8001768:	f7ff faa6 	bl	8000cb8 <__mulsc3>
 800176c:	ee30 0a28 	vadd.f32	s0, s0, s17
 8001770:	ee70 0a88 	vadd.f32	s1, s1, s16
 8001774:	ed0a 0a02 	vstr	s0, [sl, #-8]
 8001778:	ed4a 0a01 	vstr	s1, [sl, #-4]
        fft_data[i + FFT_LENGTH/2] = fft_last_data[i] + (W[i + FFT_LENGTH/2] * fft_last_data[i + FFT_LENGTH/2]);
 800177c:	ed59 1a01 	vldr	s3, [r9, #-4]
 8001780:	ed19 1a02 	vldr	s2, [r9, #-8]
 8001784:	eef0 0a69 	vmov.f32	s1, s19
 8001788:	eeb0 0a49 	vmov.f32	s0, s18
 800178c:	f7ff fa94 	bl	8000cb8 <__mulsc3>
 8001790:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001792:	ee30 0a28 	vadd.f32	s0, s0, s17
 8001796:	ee70 0a88 	vadd.f32	s1, s1, s16
 800179a:	ed03 0a02 	vstr	s0, [r3, #-8]
 800179e:	ed43 0a01 	vstr	s1, [r3, #-4]
    for (uint16_t i = 0; i < FFT_LENGTH/2; i++) {
 80017a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80017a4:	3308      	adds	r3, #8
 80017a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80017a8:	e6c8      	b.n	800153c <FFT_Compute+0xa4>
        fft_out[j] = creal(fft_data[i]);
 80017aa:	6979      	ldr	r1, [r7, #20]
 80017ac:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80017b0:	f856 1c08 	ldr.w	r1, [r6, #-8]
 80017b4:	6019      	str	r1, [r3, #0]
        fft_out[j + 1] = cimag(fft_data[i]);
 80017b6:	f856 1c04 	ldr.w	r1, [r6, #-4]
 80017ba:	6059      	str	r1, [r3, #4]
    for (i = 0, j = 0; i < FFT_LENGTH; i++, j += 2) {
 80017bc:	3201      	adds	r2, #1
 80017be:	e6ce      	b.n	800155e <FFT_Compute+0xc6>
 80017c0:	2000026a 	.word	0x2000026a
 80017c4:	20000268 	.word	0x20000268
 80017c8:	2000026c 	.word	0x2000026c

080017cc <FFT_Magnitude>:

void FFT_Magnitude(float fft_in[], float fft_out[])
{
 80017cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uint16_t i, j;
    for (i = 0, j = 0; i < FFT_LENGTH; i++, j += 2)
 80017d0:	f8df 8050 	ldr.w	r8, [pc, #80]	; 8001824 <FFT_Magnitude+0x58>
{
 80017d4:	4605      	mov	r5, r0
 80017d6:	460e      	mov	r6, r1
    for (i = 0, j = 0; i < FFT_LENGTH; i++, j += 2)
 80017d8:	2400      	movs	r4, #0
 80017da:	f8b8 1000 	ldrh.w	r1, [r8]
 80017de:	b2a2      	uxth	r2, r4
 80017e0:	0053      	lsls	r3, r2, #1
 80017e2:	4291      	cmp	r1, r2
 80017e4:	b29b      	uxth	r3, r3
 80017e6:	d801      	bhi.n	80017ec <FFT_Magnitude+0x20>
        fft_out[i] = sqrt(fft_in[j]*fft_in[j] + fft_in[j+1]*fft_in[j+1]);
}
 80017e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        fft_out[i] = sqrt(fft_in[j]*fft_in[j] + fft_in[j+1]*fft_in[j+1]);
 80017ec:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80017f0:	edd3 7a01 	vldr	s15, [r3, #4]
 80017f4:	ed93 7a00 	vldr	s14, [r3]
 80017f8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80017fc:	b2a7      	uxth	r7, r4
 80017fe:	eee7 7a07 	vfma.f32	s15, s14, s14
 8001802:	eb06 0787 	add.w	r7, r6, r7, lsl #2
 8001806:	3401      	adds	r4, #1
 8001808:	ee17 0a90 	vmov	r0, s15
 800180c:	f7fe fe9c 	bl	8000548 <__aeabi_f2d>
 8001810:	ec41 0b10 	vmov	d0, r0, r1
 8001814:	f005 ffe2 	bl	80077dc <sqrt>
 8001818:	ec51 0b10 	vmov	r0, r1, d0
 800181c:	f7ff f9e4 	bl	8000be8 <__aeabi_d2f>
 8001820:	6038      	str	r0, [r7, #0]
    for (i = 0, j = 0; i < FFT_LENGTH; i++, j += 2)
 8001822:	e7da      	b.n	80017da <FFT_Magnitude+0xe>
 8001824:	2000026a 	.word	0x2000026a

08001828 <array_scale>:
		fft_out[i] = 20 * log10(sqrt(fft_in[j]*fft_in[j] + fft_in[j+1]*fft_in[j+1]));
}

void array_scale(float array[], uint16_t N, float scale_factor)
{
	for (uint16_t i = 0; i < N; i++)
 8001828:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800182c:	4288      	cmp	r0, r1
 800182e:	d100      	bne.n	8001832 <array_scale+0xa>
		array[i] *= scale_factor;
}
 8001830:	4770      	bx	lr
		array[i] *= scale_factor;
 8001832:	edd0 7a00 	vldr	s15, [r0]
 8001836:	ee67 7a80 	vmul.f32	s15, s15, s0
 800183a:	ece0 7a01 	vstmia	r0!, {s15}
	for (uint16_t i = 0; i < N; i++)
 800183e:	e7f5      	b.n	800182c <array_scale+0x4>

08001840 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001840:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001842:	2214      	movs	r2, #20
{
 8001844:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001846:	eb0d 0002 	add.w	r0, sp, r2
 800184a:	2100      	movs	r1, #0
 800184c:	f003 fe8d 	bl	800556a <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001850:	4b30      	ldr	r3, [pc, #192]	; (8001914 <MX_GPIO_Init+0xd4>)
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8001852:	4e31      	ldr	r6, [pc, #196]	; (8001918 <MX_GPIO_Init+0xd8>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001854:	6cda      	ldr	r2, [r3, #76]	; 0x4c

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8001856:	4f31      	ldr	r7, [pc, #196]	; (800191c <MX_GPIO_Init+0xdc>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001858:	f042 0204 	orr.w	r2, r2, #4
 800185c:	64da      	str	r2, [r3, #76]	; 0x4c
 800185e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001860:	f002 0204 	and.w	r2, r2, #4
 8001864:	9201      	str	r2, [sp, #4]
 8001866:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001868:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800186a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800186e:	64da      	str	r2, [r3, #76]	; 0x4c
 8001870:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001872:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8001876:	9202      	str	r2, [sp, #8]
 8001878:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800187a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800187c:	f042 0201 	orr.w	r2, r2, #1
 8001880:	64da      	str	r2, [r3, #76]	; 0x4c
 8001882:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001884:	f002 0201 	and.w	r2, r2, #1
 8001888:	9203      	str	r2, [sp, #12]
 800188a:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800188c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800188e:	f042 0202 	orr.w	r2, r2, #2
 8001892:	64da      	str	r2, [r3, #76]	; 0x4c
 8001894:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001896:	f003 0302 	and.w	r3, r3, #2
 800189a:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 800189c:	4630      	mov	r0, r6
 800189e:	2200      	movs	r2, #0
 80018a0:	2103      	movs	r1, #3
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018a2:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 80018a4:	f001 fb78 	bl	8002f98 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80018a8:	2200      	movs	r2, #0
 80018aa:	2120      	movs	r1, #32
 80018ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018b0:	f001 fb72 	bl	8002f98 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80018b4:	4638      	mov	r0, r7
 80018b6:	2200      	movs	r2, #0
 80018b8:	2101      	movs	r1, #1
 80018ba:	f001 fb6d 	bl	8002f98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018be:	2400      	movs	r4, #0
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80018c0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80018c4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80018c8:	a905      	add	r1, sp, #20
 80018ca:	4630      	mov	r0, r6
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80018cc:	e9cd 2305 	strd	r2, r3, [sp, #20]

  /*Configure GPIO pins : PC0 PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018d0:	2501      	movs	r5, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d2:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80018d4:	f001 fa82 	bl	8002ddc <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018d8:	2303      	movs	r3, #3
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018da:	a905      	add	r1, sp, #20
 80018dc:	4630      	mov	r0, r6
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018de:	e9cd 3505 	strd	r3, r5, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018e2:	e9cd 4407 	strd	r4, r4, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018e6:	f001 fa79 	bl	8002ddc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80018ea:	2320      	movs	r3, #32
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80018ec:	a905      	add	r1, sp, #20
 80018ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018f2:	e9cd 3505 	strd	r3, r5, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018f6:	e9cd 4407 	strd	r4, r4, [sp, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80018fa:	f001 fa6f 	bl	8002ddc <HAL_GPIO_Init>
  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018fe:	a905      	add	r1, sp, #20
 8001900:	4638      	mov	r0, r7
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001902:	e9cd 5505 	strd	r5, r5, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001906:	e9cd 4407 	strd	r4, r4, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800190a:	f001 fa67 	bl	8002ddc <HAL_GPIO_Init>

}
 800190e:	b00b      	add	sp, #44	; 0x2c
 8001910:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001912:	bf00      	nop
 8001914:	40021000 	.word	0x40021000
 8001918:	48000800 	.word	0x48000800
 800191c:	48000400 	.word	0x48000400

08001920 <HAL_ADC_ConvCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_ADC_ConvCpltCallback (ADC_HandleTypeDef * hadc)
{
	adc_conv_cplt = true;
 8001920:	4b01      	ldr	r3, [pc, #4]	; (8001928 <HAL_ADC_ConvCpltCallback+0x8>)
 8001922:	2201      	movs	r2, #1
 8001924:	701a      	strb	r2, [r3, #0]
}
 8001926:	4770      	bx	lr
 8001928:	2000826c 	.word	0x2000826c

0800192c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800192c:	b500      	push	{lr}
 800192e:	b097      	sub	sp, #92	; 0x5c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001930:	2244      	movs	r2, #68	; 0x44
 8001932:	2100      	movs	r1, #0
 8001934:	a805      	add	r0, sp, #20
 8001936:	f003 fe18 	bl	800556a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800193a:	2214      	movs	r2, #20
 800193c:	2100      	movs	r1, #0
 800193e:	4668      	mov	r0, sp
 8001940:	f003 fe13 	bl	800556a <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001944:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001948:	f001 fb34 	bl	8002fb4 <HAL_PWREx_ControlVoltageScaling>
 800194c:	b108      	cbz	r0, 8001952 <SystemClock_Config+0x26>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800194e:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001950:	e7fe      	b.n	8001950 <SystemClock_Config+0x24>
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001952:	2210      	movs	r2, #16
 8001954:	f44f 7180 	mov.w	r1, #256	; 0x100
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001958:	2001      	movs	r0, #1
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800195a:	e9cd 1208 	strd	r1, r2, [sp, #32]
  RCC_OscInitStruct.PLL.PLLN = 10;
 800195e:	220a      	movs	r2, #10
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001960:	2302      	movs	r3, #2
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001962:	e9cd 0211 	strd	r0, r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001966:	2207      	movs	r2, #7
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001968:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800196a:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800196e:	e9cd 2313 	strd	r2, r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001972:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001974:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001976:	f001 fbe3 	bl	8003140 <HAL_RCC_OscConfig>
 800197a:	b108      	cbz	r0, 8001980 <SystemClock_Config+0x54>
 800197c:	b672      	cpsid	i
  while (1)
 800197e:	e7fe      	b.n	800197e <SystemClock_Config+0x52>
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001980:	e9cd 0002 	strd	r0, r0, [sp, #8]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001984:	220f      	movs	r2, #15
 8001986:	2303      	movs	r3, #3
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001988:	9004      	str	r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800198a:	2104      	movs	r1, #4
 800198c:	4668      	mov	r0, sp
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800198e:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001992:	f001 fe55 	bl	8003640 <HAL_RCC_ClockConfig>
 8001996:	b108      	cbz	r0, 800199c <SystemClock_Config+0x70>
 8001998:	b672      	cpsid	i
  while (1)
 800199a:	e7fe      	b.n	800199a <SystemClock_Config+0x6e>
}
 800199c:	b017      	add	sp, #92	; 0x5c
 800199e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080019a4 <main>:
{
 80019a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80019a8:	ed2d 8b02 	vpush	{d8}
 80019ac:	b0a0      	sub	sp, #128	; 0x80
  HAL_Init();
 80019ae:	f000 fc25 	bl	80021fc <HAL_Init>
  SystemClock_Config();
 80019b2:	f7ff ffbb 	bl	800192c <SystemClock_Config>
  MX_GPIO_Init();
 80019b6:	f7ff ff43 	bl	8001840 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80019ba:	f000 fb6f 	bl	800209c <MX_USART2_UART_Init>
  MX_SPI2_Init();
 80019be:	f000 f877 	bl	8001ab0 <MX_SPI2_Init>
  MX_ADC1_Init();
 80019c2:	f7ff fc3f 	bl	8001244 <MX_ADC1_Init>
  MX_TIM3_Init();
 80019c6:	f000 fb1d 	bl	8002004 <MX_TIM3_Init>
  float fft_in[FFT_LENGTH] = {1, 2, 3, 4, 5, 6, 7};
 80019ca:	2300      	movs	r3, #0
 80019cc:	9307      	str	r3, [sp, #28]
 80019ce:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80019d2:	9300      	str	r3, [sp, #0]
 80019d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80019d8:	9301      	str	r3, [sp, #4]
 80019da:	4b2b      	ldr	r3, [pc, #172]	; (8001a88 <main+0xe4>)
 80019dc:	9302      	str	r3, [sp, #8]
 80019de:	f04f 4381 	mov.w	r3, #1082130432	; 0x40800000
 80019e2:	9303      	str	r3, [sp, #12]
 80019e4:	4b29      	ldr	r3, [pc, #164]	; (8001a8c <main+0xe8>)
 80019e6:	9304      	str	r3, [sp, #16]
 80019e8:	4b29      	ldr	r3, [pc, #164]	; (8001a90 <main+0xec>)
 80019ea:	9305      	str	r3, [sp, #20]
  HAL_TIM_Base_Start(&htim3);
 80019ec:	4829      	ldr	r0, [pc, #164]	; (8001a94 <main+0xf0>)
  float fft_in[FFT_LENGTH] = {1, 2, 3, 4, 5, 6, 7};
 80019ee:	4b2a      	ldr	r3, [pc, #168]	; (8001a98 <main+0xf4>)
 80019f0:	9306      	str	r3, [sp, #24]
  HAL_TIM_Base_Start(&htim3);
 80019f2:	f002 fbef 	bl	80041d4 <HAL_TIM_Base_Start>
  HAL_ADC_Start_IT(&hadc1);
 80019f6:	4829      	ldr	r0, [pc, #164]	; (8001a9c <main+0xf8>)
	  if (adc_conv_cplt == true) {
 80019f8:	4e29      	ldr	r6, [pc, #164]	; (8001aa0 <main+0xfc>)
		  adc_value = HAL_ADC_GetValue(&hadc1);
 80019fa:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 8001a9c <main+0xf8>
		  fft_in[voltage_index++] = (3.3f * adc_value) / 4096.0;
 80019fe:	ed9f 8a29 	vldr	s16, [pc, #164]	; 8001aa4 <main+0x100>
  HAL_ADC_Start_IT(&hadc1);
 8001a02:	f001 f861 	bl	8002ac8 <HAL_ADC_Start_IT>
  FFT_Init(FFT_LENGTH);
 8001a06:	2008      	movs	r0, #8
 8001a08:	f7ff fcc2 	bl	8001390 <FFT_Init>
  ST7735_Init();
 8001a0c:	f000 f910 	bl	8001c30 <ST7735_Init>
  ST7735_Clear();
 8001a10:	f000 fa5a 	bl	8001ec8 <ST7735_Clear>
  ST7735_Update();
 8001a14:	f000 f940 	bl	8001c98 <ST7735_Update>
 8001a18:	466d      	mov	r5, sp
{
 8001a1a:	2408      	movs	r4, #8
 8001a1c:	462f      	mov	r7, r5
	  if (adc_conv_cplt == true) {
 8001a1e:	7833      	ldrb	r3, [r6, #0]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d0fc      	beq.n	8001a1e <main+0x7a>
		  adc_conv_cplt = false;
 8001a24:	2300      	movs	r3, #0
		  adc_value = HAL_ADC_GetValue(&hadc1);
 8001a26:	4640      	mov	r0, r8
		  adc_conv_cplt = false;
 8001a28:	7033      	strb	r3, [r6, #0]
		  adc_value = HAL_ADC_GetValue(&hadc1);
 8001a2a:	f000 fd17 	bl	800245c <HAL_ADC_GetValue>
		  fft_in[voltage_index++] = (3.3f * adc_value) / 4096.0;
 8001a2e:	b283      	uxth	r3, r0
 8001a30:	ee07 3a90 	vmov	s15, r3
 8001a34:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a38:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8001aa8 <main+0x104>
 8001a3c:	ee67 7a88 	vmul.f32	s15, s15, s16
	  if (voltage_index == FFT_LENGTH) {
 8001a40:	3c01      	subs	r4, #1
		  fft_in[voltage_index++] = (3.3f * adc_value) / 4096.0;
 8001a42:	ee67 7a87 	vmul.f32	s15, s15, s14
	  if (voltage_index == FFT_LENGTH) {
 8001a46:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
		  fft_in[voltage_index++] = (3.3f * adc_value) / 4096.0;
 8001a4a:	ece5 7a01 	vstmia	r5!, {s15}
	  if (voltage_index == FFT_LENGTH) {
 8001a4e:	d1e6      	bne.n	8001a1e <main+0x7a>
		  FFT_Compute(fft_in, fft_out);
 8001a50:	a910      	add	r1, sp, #64	; 0x40
 8001a52:	4638      	mov	r0, r7
 8001a54:	f7ff fd20 	bl	8001498 <FFT_Compute>
		  FFT_Magnitude(fft_out, fft_mag);
 8001a58:	a908      	add	r1, sp, #32
 8001a5a:	a810      	add	r0, sp, #64	; 0x40
 8001a5c:	f7ff feb6 	bl	80017cc <FFT_Magnitude>
		  array_scale(fft_mag, FFT_LENGTH, 1.0/FFT_LENGTH);
 8001a60:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8001a64:	a808      	add	r0, sp, #32
 8001a66:	2108      	movs	r1, #8
 8001a68:	f7ff fede 	bl	8001828 <array_scale>
		  ST7735_Clear();
 8001a6c:	f000 fa2c 	bl	8001ec8 <ST7735_Clear>
		  ST7735_DrawFFT(fft_mag, FFT_LENGTH, SAMPLING_RATE, BLUE);
 8001a70:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001a74:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8001a78:	2108      	movs	r1, #8
 8001a7a:	a808      	add	r0, sp, #32
 8001a7c:	f000 f986 	bl	8001d8c <ST7735_DrawFFT>
		  ST7735_Update();
 8001a80:	f000 f90a 	bl	8001c98 <ST7735_Update>
 8001a84:	e7c8      	b.n	8001a18 <main+0x74>
 8001a86:	bf00      	nop
 8001a88:	40400000 	.word	0x40400000
 8001a8c:	40a00000 	.word	0x40a00000
 8001a90:	40c00000 	.word	0x40c00000
 8001a94:	200122d8 	.word	0x200122d8
 8001a98:	40e00000 	.word	0x40e00000
 8001a9c:	20000204 	.word	0x20000204
 8001aa0:	2000826c 	.word	0x2000826c
 8001aa4:	40533333 	.word	0x40533333
 8001aa8:	39800000 	.word	0x39800000

08001aac <Error_Handler>:
 8001aac:	b672      	cpsid	i
  while (1)
 8001aae:	e7fe      	b.n	8001aae <Error_Handler+0x2>

08001ab0 <MX_SPI2_Init>:
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001ab0:	4811      	ldr	r0, [pc, #68]	; (8001af8 <MX_SPI2_Init+0x48>)
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001ab2:	4a12      	ldr	r2, [pc, #72]	; (8001afc <MX_SPI2_Init+0x4c>)
{
 8001ab4:	b508      	push	{r3, lr}
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001ab6:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001aba:	e9c0 2300 	strd	r2, r3, [r0]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001ac4:	e9c0 3202 	strd	r3, r2, [r0, #8]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi2.Init.NSS = SPI_NSS_SOFT;
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001ac8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001acc:	2210      	movs	r2, #16
 8001ace:	e9c0 1206 	strd	r1, r2, [r0, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi2.Init.CRCPolynomial = 7;
 8001ad2:	2207      	movs	r2, #7
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001ad4:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ad8:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001adc:	e9c0 230b 	strd	r2, r3, [r0, #44]	; 0x2c
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ae0:	6283      	str	r3, [r0, #40]	; 0x28
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001ae2:	2308      	movs	r3, #8
 8001ae4:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001ae6:	f002 fa40 	bl	8003f6a <HAL_SPI_Init>
 8001aea:	b118      	cbz	r0, 8001af4 <MX_SPI2_Init+0x44>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001aec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8001af0:	f7ff bfdc 	b.w	8001aac <Error_Handler>
}
 8001af4:	bd08      	pop	{r3, pc}
 8001af6:	bf00      	nop
 8001af8:	20008270 	.word	0x20008270
 8001afc:	40003800 	.word	0x40003800

08001b00 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001b00:	b570      	push	{r4, r5, r6, lr}
 8001b02:	4604      	mov	r4, r0
 8001b04:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b06:	2214      	movs	r2, #20
 8001b08:	2100      	movs	r1, #0
 8001b0a:	a803      	add	r0, sp, #12
 8001b0c:	f003 fd2d 	bl	800556a <memset>
  if(spiHandle->Instance==SPI2)
 8001b10:	6822      	ldr	r2, [r4, #0]
 8001b12:	4b1d      	ldr	r3, [pc, #116]	; (8001b88 <HAL_SPI_MspInit+0x88>)
 8001b14:	429a      	cmp	r2, r3
 8001b16:	d134      	bne.n	8001b82 <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001b18:	f503 33ec 	add.w	r3, r3, #120832	; 0x1d800
    GPIO_InitStruct.Pin = GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b1c:	481b      	ldr	r0, [pc, #108]	; (8001b8c <HAL_SPI_MspInit+0x8c>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001b1e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001b20:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001b24:	659a      	str	r2, [r3, #88]	; 0x58
 8001b26:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001b28:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001b2c:	9200      	str	r2, [sp, #0]
 8001b2e:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b30:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001b32:	f042 0204 	orr.w	r2, r2, #4
 8001b36:	64da      	str	r2, [r3, #76]	; 0x4c
 8001b38:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001b3a:	f002 0204 	and.w	r2, r2, #4
 8001b3e:	9201      	str	r2, [sp, #4]
 8001b40:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b42:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001b44:	f042 0202 	orr.w	r2, r2, #2
 8001b48:	64da      	str	r2, [r3, #76]	; 0x4c
 8001b4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b4c:	f003 0302 	and.w	r3, r3, #2
 8001b50:	9302      	str	r3, [sp, #8]
 8001b52:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b54:	2602      	movs	r6, #2
 8001b56:	2308      	movs	r3, #8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001b58:	2503      	movs	r5, #3
 8001b5a:	2405      	movs	r4, #5
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b5c:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b5e:	e9cd 3603 	strd	r3, r6, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001b62:	e9cd 5406 	strd	r5, r4, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b66:	f001 f939 	bl	8002ddc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001b6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b6e:	e9cd 3603 	strd	r3, r6, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b72:	4807      	ldr	r0, [pc, #28]	; (8001b90 <HAL_SPI_MspInit+0x90>)
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001b74:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b76:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b78:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b7a:	e9cd 3505 	strd	r3, r5, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b7e:	f001 f92d 	bl	8002ddc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001b82:	b008      	add	sp, #32
 8001b84:	bd70      	pop	{r4, r5, r6, pc}
 8001b86:	bf00      	nop
 8001b88:	40003800 	.word	0x40003800
 8001b8c:	48000800 	.word	0x48000800
 8001b90:	48000400 	.word	0x48000400

08001b94 <st7735_data>:
	HAL_SPI_Transmit(&st7735_spi, &cmd, 1, HAL_MAX_DELAY);
	SPI_STOP;
}

static void st7735_data(uint8_t data)
{
 8001b94:	b513      	push	{r0, r1, r4, lr}
	ST7735_SET_DATA;
 8001b96:	4c0e      	ldr	r4, [pc, #56]	; (8001bd0 <st7735_data+0x3c>)
{
 8001b98:	f88d 0007 	strb.w	r0, [sp, #7]
	ST7735_SET_DATA;
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	4620      	mov	r0, r4
 8001ba0:	2102      	movs	r1, #2
 8001ba2:	f001 f9f9 	bl	8002f98 <HAL_GPIO_WritePin>
	SPI_START;
 8001ba6:	4620      	mov	r0, r4
 8001ba8:	2200      	movs	r2, #0
 8001baa:	2101      	movs	r1, #1
 8001bac:	f001 f9f4 	bl	8002f98 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&st7735_spi, &data, 1, HAL_MAX_DELAY);
 8001bb0:	f04f 33ff 	mov.w	r3, #4294967295
 8001bb4:	f10d 0107 	add.w	r1, sp, #7
 8001bb8:	2201      	movs	r2, #1
 8001bba:	4806      	ldr	r0, [pc, #24]	; (8001bd4 <st7735_data+0x40>)
 8001bbc:	f002 fa3f 	bl	800403e <HAL_SPI_Transmit>
	SPI_STOP;
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	4611      	mov	r1, r2
 8001bc4:	4620      	mov	r0, r4
 8001bc6:	f001 f9e7 	bl	8002f98 <HAL_GPIO_WritePin>
}
 8001bca:	b002      	add	sp, #8
 8001bcc:	bd10      	pop	{r4, pc}
 8001bce:	bf00      	nop
 8001bd0:	48000800 	.word	0x48000800
 8001bd4:	20008270 	.word	0x20008270

08001bd8 <st7735_data16>:
	else
		st7735_data(value);
}

static void st7735_data16(uint16_t data)
{
 8001bd8:	b510      	push	{r4, lr}
 8001bda:	4604      	mov	r4, r0
	st7735_data(data >> 8);
 8001bdc:	0a00      	lsrs	r0, r0, #8
 8001bde:	f7ff ffd9 	bl	8001b94 <st7735_data>
	st7735_data(data);
 8001be2:	b2e0      	uxtb	r0, r4
}
 8001be4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	st7735_data(data);
 8001be8:	f7ff bfd4 	b.w	8001b94 <st7735_data>

08001bec <st7735_cmd>:
{
 8001bec:	b513      	push	{r0, r1, r4, lr}
	ST7735_SET_COMMAND;
 8001bee:	4c0e      	ldr	r4, [pc, #56]	; (8001c28 <st7735_cmd+0x3c>)
{
 8001bf0:	f88d 0007 	strb.w	r0, [sp, #7]
	ST7735_SET_COMMAND;
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	4620      	mov	r0, r4
 8001bf8:	2102      	movs	r1, #2
 8001bfa:	f001 f9cd 	bl	8002f98 <HAL_GPIO_WritePin>
	SPI_START;
 8001bfe:	4620      	mov	r0, r4
 8001c00:	2200      	movs	r2, #0
 8001c02:	2101      	movs	r1, #1
 8001c04:	f001 f9c8 	bl	8002f98 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&st7735_spi, &cmd, 1, HAL_MAX_DELAY);
 8001c08:	f04f 33ff 	mov.w	r3, #4294967295
 8001c0c:	f10d 0107 	add.w	r1, sp, #7
 8001c10:	2201      	movs	r2, #1
 8001c12:	4806      	ldr	r0, [pc, #24]	; (8001c2c <st7735_cmd+0x40>)
 8001c14:	f002 fa13 	bl	800403e <HAL_SPI_Transmit>
	SPI_STOP;
 8001c18:	2201      	movs	r2, #1
 8001c1a:	4611      	mov	r1, r2
 8001c1c:	4620      	mov	r0, r4
 8001c1e:	f001 f9bb 	bl	8002f98 <HAL_GPIO_WritePin>
}
 8001c22:	b002      	add	sp, #8
 8001c24:	bd10      	pop	{r4, pc}
 8001c26:	bf00      	nop
 8001c28:	48000800 	.word	0x48000800
 8001c2c:	20008270 	.word	0x20008270

08001c30 <ST7735_Init>:
{
	screen_buffer[x + y*ST7735_WIDTH] = color;
}

void ST7735_Init(void)
{
 8001c30:	b538      	push	{r3, r4, r5, lr}
	HAL_GPIO_WritePin(ST7735_RST_PORT, ST7735_RST_PIN, GPIO_PIN_RESET);
 8001c32:	2200      	movs	r2, #0
 8001c34:	2101      	movs	r1, #1
 8001c36:	4816      	ldr	r0, [pc, #88]	; (8001c90 <ST7735_Init+0x60>)
 8001c38:	4d16      	ldr	r5, [pc, #88]	; (8001c94 <ST7735_Init+0x64>)
 8001c3a:	f001 f9ad 	bl	8002f98 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8001c3e:	2064      	movs	r0, #100	; 0x64
 8001c40:	f000 fb04 	bl	800224c <HAL_Delay>
	HAL_GPIO_WritePin(ST7735_RST_PORT, ST7735_RST_PIN, GPIO_PIN_SET);
 8001c44:	2201      	movs	r2, #1
 8001c46:	4812      	ldr	r0, [pc, #72]	; (8001c90 <ST7735_Init+0x60>)
 8001c48:	4611      	mov	r1, r2
 8001c4a:	f001 f9a5 	bl	8002f98 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8001c4e:	2064      	movs	r0, #100	; 0x64
 8001c50:	f000 fafc 	bl	800224c <HAL_Delay>
 8001c54:	244a      	movs	r4, #74	; 0x4a

	for (uint16_t i = 0; i < sizeof(init_array)/sizeof(init_array[0]); i++)
		st7735_transmit16(init_array[i]);
 8001c56:	f835 3b02 	ldrh.w	r3, [r5], #2
		st7735_cmd(value);
 8001c5a:	b2d8      	uxtb	r0, r3
	if (value & 0x100)
 8001c5c:	05db      	lsls	r3, r3, #23
 8001c5e:	d513      	bpl.n	8001c88 <ST7735_Init+0x58>
		st7735_cmd(value);
 8001c60:	f7ff ffc4 	bl	8001bec <st7735_cmd>
	for (uint16_t i = 0; i < sizeof(init_array)/sizeof(init_array[0]); i++)
 8001c64:	3c01      	subs	r4, #1
 8001c66:	b2a4      	uxth	r4, r4
 8001c68:	2c00      	cmp	r4, #0
 8001c6a:	d1f4      	bne.n	8001c56 <ST7735_Init+0x26>

	HAL_Delay(200);
 8001c6c:	20c8      	movs	r0, #200	; 0xc8
 8001c6e:	f000 faed 	bl	800224c <HAL_Delay>

	st7735_cmd(ST7735_SLPOUT);
 8001c72:	2011      	movs	r0, #17
 8001c74:	f7ff ffba 	bl	8001bec <st7735_cmd>
	HAL_Delay(120);
 8001c78:	2078      	movs	r0, #120	; 0x78
 8001c7a:	f000 fae7 	bl	800224c <HAL_Delay>

	st7735_cmd(ST7735_DISPON);
}
 8001c7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	st7735_cmd(ST7735_DISPON);
 8001c82:	2029      	movs	r0, #41	; 0x29
 8001c84:	f7ff bfb2 	b.w	8001bec <st7735_cmd>
		st7735_data(value);
 8001c88:	f7ff ff84 	bl	8001b94 <st7735_data>
 8001c8c:	e7ea      	b.n	8001c64 <ST7735_Init+0x34>
 8001c8e:	bf00      	nop
 8001c90:	48000400 	.word	0x48000400
 8001c94:	080093de 	.word	0x080093de

08001c98 <ST7735_Update>:

void ST7735_Update(void)
{
 8001c98:	b510      	push	{r4, lr}
	st7735_cmd(ST7735_CASET);
 8001c9a:	202a      	movs	r0, #42	; 0x2a
 8001c9c:	f7ff ffa6 	bl	8001bec <st7735_cmd>
	st7735_data16(ST7735_OFFSET_X + x);
 8001ca0:	2001      	movs	r0, #1
 8001ca2:	f7ff ff99 	bl	8001bd8 <st7735_data16>
	st7735_data16(ST7735_OFFSET_X + x + width - 1);
 8001ca6:	20a0      	movs	r0, #160	; 0xa0
 8001ca8:	f7ff ff96 	bl	8001bd8 <st7735_data16>
	st7735_cmd(ST7735_RASET);
 8001cac:	202b      	movs	r0, #43	; 0x2b
 8001cae:	f7ff ff9d 	bl	8001bec <st7735_cmd>
	st7735_data16(ST7735_OFFSET_Y + y);
 8001cb2:	2002      	movs	r0, #2
 8001cb4:	f7ff ff90 	bl	8001bd8 <st7735_data16>
	st7735_set_window(0, 0, ST7735_WIDTH, ST7735_HEIGHT);

	st7735_cmd(ST7735_RAMWR);

	ST7735_SET_DATA;
 8001cb8:	4c0f      	ldr	r4, [pc, #60]	; (8001cf8 <ST7735_Update+0x60>)
	st7735_data16(ST7735_OFFSET_Y + y + height - 1);
 8001cba:	2081      	movs	r0, #129	; 0x81
 8001cbc:	f7ff ff8c 	bl	8001bd8 <st7735_data16>
	st7735_cmd(ST7735_RAMWR);
 8001cc0:	202c      	movs	r0, #44	; 0x2c
 8001cc2:	f7ff ff93 	bl	8001bec <st7735_cmd>
	ST7735_SET_DATA;
 8001cc6:	4620      	mov	r0, r4
 8001cc8:	2201      	movs	r2, #1
 8001cca:	2102      	movs	r1, #2
 8001ccc:	f001 f964 	bl	8002f98 <HAL_GPIO_WritePin>
	SPI_START;
 8001cd0:	4620      	mov	r0, r4
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	2101      	movs	r1, #1
 8001cd6:	f001 f95f 	bl	8002f98 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&st7735_spi, (uint8_t *)screen_buffer, sizeof(screen_buffer), HAL_MAX_DELAY);
 8001cda:	4908      	ldr	r1, [pc, #32]	; (8001cfc <ST7735_Update+0x64>)
 8001cdc:	4808      	ldr	r0, [pc, #32]	; (8001d00 <ST7735_Update+0x68>)
 8001cde:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 8001ce2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ce6:	f002 f9aa 	bl	800403e <HAL_SPI_Transmit>
	SPI_STOP;
 8001cea:	2201      	movs	r2, #1
 8001cec:	4620      	mov	r0, r4
 8001cee:	4611      	mov	r1, r2
}
 8001cf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	SPI_STOP;
 8001cf4:	f001 b950 	b.w	8002f98 <HAL_GPIO_WritePin>
 8001cf8:	48000800 	.word	0x48000800
 8001cfc:	200082d4 	.word	0x200082d4
 8001d00:	20008270 	.word	0x20008270

08001d04 <ST7735_WriteChar>:

void ST7735_WriteChar(uint8_t x, uint8_t y, char c, uint16_t color)
{
 8001d04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	for (i = 0; i < 6; i++) {
		if (i == 5)
			line = 0;
		else
			line = Font[(c * 5) + i];
 8001d08:	4d14      	ldr	r5, [pc, #80]	; (8001d5c <ST7735_WriteChar+0x58>)
	screen_buffer[x + y*ST7735_WIDTH] = color;
 8001d0a:	f8df e054 	ldr.w	lr, [pc, #84]	; 8001d60 <ST7735_WriteChar+0x5c>
			line = Font[(c * 5) + i];
 8001d0e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001d12:	2400      	movs	r4, #0
 8001d14:	442a      	add	r2, r5
	screen_buffer[x + y*ST7735_WIDTH] = color;
 8001d16:	f04f 08a0 	mov.w	r8, #160	; 0xa0
		if (i == 5)
 8001d1a:	2c05      	cmp	r4, #5
			line = Font[(c * 5) + i];
 8001d1c:	b2e6      	uxtb	r6, r4
	screen_buffer[x + y*ST7735_WIDTH] = color;
 8001d1e:	4406      	add	r6, r0
			line = Font[(c * 5) + i];
 8001d20:	bf14      	ite	ne
 8001d22:	f812 c004 	ldrbne.w	ip, [r2, r4]
			line = 0;
 8001d26:	f04f 0c00 	moveq.w	ip, #0
 8001d2a:	2500      	movs	r5, #0
	screen_buffer[x + y*ST7735_WIDTH] = color;
 8001d2c:	b2f6      	uxtb	r6, r6
		for (j = 0; j < 8; j++) {
			if (line & 0x1)
 8001d2e:	f01c 0f01 	tst.w	ip, #1
				st7735_put_pixel(x+i, y+j, color);
 8001d32:	bf1e      	ittt	ne
 8001d34:	194f      	addne	r7, r1, r5
	screen_buffer[x + y*ST7735_WIDTH] = color;
 8001d36:	b2ff      	uxtbne	r7, r7
 8001d38:	fb18 6707 	smlabbne	r7, r8, r7, r6
		for (j = 0; j < 8; j++) {
 8001d3c:	f105 0501 	add.w	r5, r5, #1
 8001d40:	b2ed      	uxtb	r5, r5
	screen_buffer[x + y*ST7735_WIDTH] = color;
 8001d42:	bf18      	it	ne
 8001d44:	f82e 3017 	strhne.w	r3, [lr, r7, lsl #1]
		for (j = 0; j < 8; j++) {
 8001d48:	2d08      	cmp	r5, #8
			line >>= 1;
 8001d4a:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
		for (j = 0; j < 8; j++) {
 8001d4e:	d1ee      	bne.n	8001d2e <ST7735_WriteChar+0x2a>
	for (i = 0; i < 6; i++) {
 8001d50:	3401      	adds	r4, #1
 8001d52:	2c06      	cmp	r4, #6
 8001d54:	d1e1      	bne.n	8001d1a <ST7735_WriteChar+0x16>
		}
	}
}
 8001d56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001d5a:	bf00      	nop
 8001d5c:	08008ee3 	.word	0x08008ee3
 8001d60:	200082d4 	.word	0x200082d4

08001d64 <ST7735_WriteString>:

void ST7735_WriteString(uint8_t x, uint8_t y, char *s, uint16_t color)
{
 8001d64:	b510      	push	{r4, lr}
 8001d66:	1e54      	subs	r4, r2, #1
	while (*s) {
 8001d68:	f814 2f01 	ldrb.w	r2, [r4, #1]!
 8001d6c:	b902      	cbnz	r2, 8001d70 <ST7735_WriteString+0xc>
			if ((y + 8) > ST7735_HEIGHT)
				y = 0;
		}
		s++;
	}
}
 8001d6e:	bd10      	pop	{r4, pc}
		ST7735_WriteChar(x, y, *s, color);
 8001d70:	f7ff ffc8 	bl	8001d04 <ST7735_WriteChar>
		x += 6;
 8001d74:	3006      	adds	r0, #6
 8001d76:	b2c0      	uxtb	r0, r0
		if ((x + 6) > ST7735_WIDTH) {
 8001d78:	289a      	cmp	r0, #154	; 0x9a
 8001d7a:	d9f5      	bls.n	8001d68 <ST7735_WriteString+0x4>
			y += 8;
 8001d7c:	3108      	adds	r1, #8
 8001d7e:	b2c9      	uxtb	r1, r1
			if ((y + 8) > ST7735_HEIGHT)
 8001d80:	2978      	cmp	r1, #120	; 0x78
				y = 0;
 8001d82:	bf88      	it	hi
 8001d84:	2100      	movhi	r1, #0
			x = 0;
 8001d86:	2000      	movs	r0, #0
		s++;
 8001d88:	e7ee      	b.n	8001d68 <ST7735_WriteString+0x4>
	...

08001d8c <ST7735_DrawFFT>:

void ST7735_DrawFFT(float fft_data[], uint16_t FFT_N, uint16_t SAMPLING_N, uint16_t color)
{
 8001d8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001d90:	ed2d 8b04 	vpush	{d8-d9}
	char tekst[20];
	float max_value, max_f;

	max_value = fft_data[0];
 8001d94:	4607      	mov	r7, r0
{
 8001d96:	b089      	sub	sp, #36	; 0x24
 8001d98:	ee09 2a10 	vmov	s18, r2
	max_value = fft_data[0];
 8001d9c:	ecb7 8a01 	vldmia	r7!, {s16}
	max_f = 0;
	for (uint16_t i = 1; i < FFT_N; i++) {
		if (fft_data[i] > max_value) {
			max_value = fft_data[i];
			max_f = (1.0*i * SAMPLING_N) / FFT_N / 2;
 8001da0:	f8df b11c 	ldr.w	fp, [pc, #284]	; 8001ec0 <ST7735_DrawFFT+0x134>
{
 8001da4:	9301      	str	r3, [sp, #4]
 8001da6:	4604      	mov	r4, r0
 8001da8:	460d      	mov	r5, r1
	for (uint16_t i = 1; i < FFT_N; i++) {
 8001daa:	2601      	movs	r6, #1
	max_f = 0;
 8001dac:	2000      	movs	r0, #0
			max_f = (1.0*i * SAMPLING_N) / FFT_N / 2;
 8001dae:	f04f 0a00 	mov.w	sl, #0
	for (uint16_t i = 1; i < FFT_N; i++) {
 8001db2:	b2b3      	uxth	r3, r6
 8001db4:	429d      	cmp	r5, r3
 8001db6:	d82f      	bhi.n	8001e18 <ST7735_DrawFFT+0x8c>
	screen_buffer[x + y*ST7735_WIDTH] = color;
 8001db8:	f8df e108 	ldr.w	lr, [pc, #264]	; 8001ec4 <ST7735_DrawFFT+0x138>
 8001dbc:	eb04 0585 	add.w	r5, r4, r5, lsl #2
	}

	float resolution = 30.0;
	uint16_t i, x, y;

	x = BIN_WIDTH;
 8001dc0:	2106      	movs	r1, #6
	for (i = 0; i < FFT_N; i++) {
			//y = (resolution * fft_data[i]) / max_value;
			y = resolution * fft_data[i];
 8001dc2:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
	screen_buffer[x + y*ST7735_WIDTH] = color;
 8001dc6:	f04f 08a0 	mov.w	r8, #160	; 0xa0
	for (i = 0; i < FFT_N; i++) {
 8001dca:	42ac      	cmp	r4, r5
 8001dcc:	d14f      	bne.n	8001e6e <ST7735_DrawFFT+0xe2>
					st7735_put_pixel(c+x, 116-z, color);

			x += BIN_WIDTH*2;
	}

	sprintf(tekst, "F: %.2f Hz", max_f);
 8001dce:	f7fe fbbb 	bl	8000548 <__aeabi_f2d>
 8001dd2:	4602      	mov	r2, r0
 8001dd4:	460b      	mov	r3, r1
 8001dd6:	a803      	add	r0, sp, #12
 8001dd8:	4937      	ldr	r1, [pc, #220]	; (8001eb8 <ST7735_DrawFFT+0x12c>)
 8001dda:	f003 fb63 	bl	80054a4 <siprintf>
	ST7735_WriteString(8, 8, tekst, BLUE);
 8001dde:	2108      	movs	r1, #8
 8001de0:	aa03      	add	r2, sp, #12
 8001de2:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001de6:	4608      	mov	r0, r1
 8001de8:	f7ff ffbc 	bl	8001d64 <ST7735_WriteString>
	sprintf(tekst, "Magnitude: %.2f", max_value);
 8001dec:	ee18 0a10 	vmov	r0, s16
 8001df0:	f7fe fbaa 	bl	8000548 <__aeabi_f2d>
 8001df4:	4602      	mov	r2, r0
 8001df6:	460b      	mov	r3, r1
 8001df8:	a803      	add	r0, sp, #12
 8001dfa:	4930      	ldr	r1, [pc, #192]	; (8001ebc <ST7735_DrawFFT+0x130>)
 8001dfc:	f003 fb52 	bl	80054a4 <siprintf>
	ST7735_WriteString(8, 16, tekst, BLUE);
 8001e00:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001e04:	aa03      	add	r2, sp, #12
 8001e06:	2110      	movs	r1, #16
 8001e08:	2008      	movs	r0, #8
 8001e0a:	f7ff ffab 	bl	8001d64 <ST7735_WriteString>
}
 8001e0e:	b009      	add	sp, #36	; 0x24
 8001e10:	ecbd 8b04 	vpop	{d8-d9}
 8001e14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (fft_data[i] > max_value) {
 8001e18:	ecf7 8a01 	vldmia	r7!, {s17}
 8001e1c:	eef4 8ac8 	vcmpe.f32	s17, s16
 8001e20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e24:	dd21      	ble.n	8001e6a <ST7735_DrawFFT+0xde>
			max_f = (1.0*i * SAMPLING_N) / FFT_N / 2;
 8001e26:	4630      	mov	r0, r6
 8001e28:	f7fe fb7c 	bl	8000524 <__aeabi_i2d>
 8001e2c:	4680      	mov	r8, r0
 8001e2e:	ee19 0a10 	vmov	r0, s18
 8001e32:	4689      	mov	r9, r1
 8001e34:	f7fe fb76 	bl	8000524 <__aeabi_i2d>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	460b      	mov	r3, r1
 8001e3c:	4640      	mov	r0, r8
 8001e3e:	4649      	mov	r1, r9
 8001e40:	f7fe fbda 	bl	80005f8 <__aeabi_dmul>
 8001e44:	4680      	mov	r8, r0
 8001e46:	4628      	mov	r0, r5
 8001e48:	4689      	mov	r9, r1
 8001e4a:	f7fe fb6b 	bl	8000524 <__aeabi_i2d>
 8001e4e:	4602      	mov	r2, r0
 8001e50:	460b      	mov	r3, r1
 8001e52:	4640      	mov	r0, r8
 8001e54:	4649      	mov	r1, r9
 8001e56:	f7fe fcf9 	bl	800084c <__aeabi_ddiv>
 8001e5a:	4652      	mov	r2, sl
 8001e5c:	465b      	mov	r3, fp
 8001e5e:	f7fe fbcb 	bl	80005f8 <__aeabi_dmul>
 8001e62:	f7fe fec1 	bl	8000be8 <__aeabi_d2f>
			max_value = fft_data[i];
 8001e66:	eeb0 8a68 	vmov.f32	s16, s17
	for (uint16_t i = 1; i < FFT_N; i++) {
 8001e6a:	3601      	adds	r6, #1
 8001e6c:	e7a1      	b.n	8001db2 <ST7735_DrawFFT+0x26>
			y = resolution * fft_data[i];
 8001e6e:	ecf4 7a01 	vldmia	r4!, {s15}
 8001e72:	ee67 7a87 	vmul.f32	s15, s15, s14
			for (uint8_t c = 0; c < BIN_WIDTH; c++)
 8001e76:	2200      	movs	r2, #0
			y = resolution * fft_data[i];
 8001e78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e7c:	ee17 3a90 	vmov	r3, s15
 8001e80:	fa1f f983 	uxth.w	r9, r3
	screen_buffer[x + y*ST7735_WIDTH] = color;
 8001e84:	eb02 0c01 	add.w	ip, r2, r1
	max_f = 0;
 8001e88:	2700      	movs	r7, #0
	screen_buffer[x + y*ST7735_WIDTH] = color;
 8001e8a:	fa5f fc8c 	uxtb.w	ip, ip
 8001e8e:	e007      	b.n	8001ea0 <ST7735_DrawFFT+0x114>
 8001e90:	f1c7 0675 	rsb	r6, r7, #117	; 0x75
 8001e94:	b2f6      	uxtb	r6, r6
 8001e96:	fb18 c606 	smlabb	r6, r8, r6, ip
 8001e9a:	9b01      	ldr	r3, [sp, #4]
 8001e9c:	f82e 3016 	strh.w	r3, [lr, r6, lsl #1]
				for (uint8_t z = 0; z < y; z++)
 8001ea0:	b2fe      	uxtb	r6, r7
 8001ea2:	454e      	cmp	r6, r9
 8001ea4:	f107 0701 	add.w	r7, r7, #1
 8001ea8:	d3f2      	bcc.n	8001e90 <ST7735_DrawFFT+0x104>
			for (uint8_t c = 0; c < BIN_WIDTH; c++)
 8001eaa:	3201      	adds	r2, #1
 8001eac:	b2d2      	uxtb	r2, r2
 8001eae:	2a06      	cmp	r2, #6
 8001eb0:	d1e8      	bne.n	8001e84 <ST7735_DrawFFT+0xf8>
			x += BIN_WIDTH*2;
 8001eb2:	310c      	adds	r1, #12
 8001eb4:	b289      	uxth	r1, r1
	for (i = 0; i < FFT_N; i++) {
 8001eb6:	e788      	b.n	8001dca <ST7735_DrawFFT+0x3e>
 8001eb8:	08008ec8 	.word	0x08008ec8
 8001ebc:	08008ed3 	.word	0x08008ed3
 8001ec0:	3fe00000 	.word	0x3fe00000
 8001ec4:	200082d4 	.word	0x200082d4

08001ec8 <ST7735_Clear>:

void ST7735_Clear(void)
{
 8001ec8:	2200      	movs	r2, #0
 8001eca:	4907      	ldr	r1, [pc, #28]	; (8001ee8 <ST7735_Clear+0x20>)
	screen_buffer[x + y*ST7735_WIDTH] = color;
 8001ecc:	4610      	mov	r0, r2
{
 8001ece:	2300      	movs	r3, #0
	screen_buffer[x + y*ST7735_WIDTH] = color;
 8001ed0:	f821 0013 	strh.w	r0, [r1, r3, lsl #1]
	for (uint16_t x = 0; x < ST7735_WIDTH; x++)
		for (uint16_t y = 0; y < ST7735_HEIGHT; y++)
 8001ed4:	33a0      	adds	r3, #160	; 0xa0
 8001ed6:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8001eda:	d1f9      	bne.n	8001ed0 <ST7735_Clear+0x8>
	for (uint16_t x = 0; x < ST7735_WIDTH; x++)
 8001edc:	3201      	adds	r2, #1
 8001ede:	2aa0      	cmp	r2, #160	; 0xa0
 8001ee0:	f101 0102 	add.w	r1, r1, #2
 8001ee4:	d1f3      	bne.n	8001ece <ST7735_Clear+0x6>
			st7735_put_pixel(x, y, BLACK);
}
 8001ee6:	4770      	bx	lr
 8001ee8:	200082d4 	.word	0x200082d4

08001eec <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eec:	4b0b      	ldr	r3, [pc, #44]	; (8001f1c <HAL_MspInit+0x30>)
 8001eee:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001ef0:	f042 0201 	orr.w	r2, r2, #1
 8001ef4:	661a      	str	r2, [r3, #96]	; 0x60
 8001ef6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
{
 8001ef8:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001efa:	f002 0201 	and.w	r2, r2, #1
 8001efe:	9200      	str	r2, [sp, #0]
 8001f00:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f02:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001f04:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001f08:	659a      	str	r2, [r3, #88]	; 0x58
 8001f0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f10:	9301      	str	r3, [sp, #4]
 8001f12:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_1);
 8001f14:	2006      	movs	r0, #6
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f16:	b002      	add	sp, #8
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_1);
 8001f18:	f000 befa 	b.w	8002d10 <HAL_NVIC_SetPriorityGrouping>
 8001f1c:	40021000 	.word	0x40021000

08001f20 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001f20:	e7fe      	b.n	8001f20 <NMI_Handler>

08001f22 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f22:	e7fe      	b.n	8001f22 <HardFault_Handler>

08001f24 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f24:	e7fe      	b.n	8001f24 <MemManage_Handler>

08001f26 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f26:	e7fe      	b.n	8001f26 <BusFault_Handler>

08001f28 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f28:	e7fe      	b.n	8001f28 <UsageFault_Handler>

08001f2a <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f2a:	4770      	bx	lr

08001f2c <DebugMon_Handler>:
 8001f2c:	4770      	bx	lr

08001f2e <PendSV_Handler>:
 8001f2e:	4770      	bx	lr

08001f30 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f30:	f000 b97a 	b.w	8002228 <HAL_IncTick>

08001f34 <ADC1_2_IRQHandler>:
void ADC1_2_IRQHandler(void)
{
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001f34:	4801      	ldr	r0, [pc, #4]	; (8001f3c <ADC1_2_IRQHandler+0x8>)
 8001f36:	f000 ba97 	b.w	8002468 <HAL_ADC_IRQHandler>
 8001f3a:	bf00      	nop
 8001f3c:	20000204 	.word	0x20000204

08001f40 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 8001f40:	2001      	movs	r0, #1
 8001f42:	4770      	bx	lr

08001f44 <_kill>:

int _kill(int pid, int sig)
{
 8001f44:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001f46:	f003 fb63 	bl	8005610 <__errno>
 8001f4a:	2316      	movs	r3, #22
 8001f4c:	6003      	str	r3, [r0, #0]
  return -1;
}
 8001f4e:	f04f 30ff 	mov.w	r0, #4294967295
 8001f52:	bd08      	pop	{r3, pc}

08001f54 <_exit>:

void _exit (int status)
{
 8001f54:	b508      	push	{r3, lr}
  errno = EINVAL;
 8001f56:	f003 fb5b 	bl	8005610 <__errno>
 8001f5a:	2316      	movs	r3, #22
 8001f5c:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 8001f5e:	e7fe      	b.n	8001f5e <_exit+0xa>

08001f60 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f60:	b570      	push	{r4, r5, r6, lr}
 8001f62:	460d      	mov	r5, r1
 8001f64:	4614      	mov	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f66:	460e      	mov	r6, r1
 8001f68:	1b73      	subs	r3, r6, r5
 8001f6a:	429c      	cmp	r4, r3
 8001f6c:	dc01      	bgt.n	8001f72 <_read+0x12>
  {
    *ptr++ = __io_getchar();
  }

  return len;
}
 8001f6e:	4620      	mov	r0, r4
 8001f70:	bd70      	pop	{r4, r5, r6, pc}
    *ptr++ = __io_getchar();
 8001f72:	f3af 8000 	nop.w
 8001f76:	f806 0b01 	strb.w	r0, [r6], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f7a:	e7f5      	b.n	8001f68 <_read+0x8>

08001f7c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f7c:	b570      	push	{r4, r5, r6, lr}
 8001f7e:	460d      	mov	r5, r1
 8001f80:	4614      	mov	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f82:	460e      	mov	r6, r1
 8001f84:	1b73      	subs	r3, r6, r5
 8001f86:	429c      	cmp	r4, r3
 8001f88:	dc01      	bgt.n	8001f8e <_write+0x12>
  {
    __io_putchar(*ptr++);
  }
  return len;
}
 8001f8a:	4620      	mov	r0, r4
 8001f8c:	bd70      	pop	{r4, r5, r6, pc}
    __io_putchar(*ptr++);
 8001f8e:	f816 0b01 	ldrb.w	r0, [r6], #1
 8001f92:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f96:	e7f5      	b.n	8001f84 <_write+0x8>

08001f98 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8001f98:	f04f 30ff 	mov.w	r0, #4294967295
 8001f9c:	4770      	bx	lr

08001f9e <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8001f9e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001fa2:	604b      	str	r3, [r1, #4]
  return 0;
}
 8001fa4:	2000      	movs	r0, #0
 8001fa6:	4770      	bx	lr

08001fa8 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8001fa8:	2001      	movs	r0, #1
 8001faa:	4770      	bx	lr

08001fac <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8001fac:	2000      	movs	r0, #0
 8001fae:	4770      	bx	lr

08001fb0 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001fb0:	4a0b      	ldr	r2, [pc, #44]	; (8001fe0 <_sbrk+0x30>)
 8001fb2:	6811      	ldr	r1, [r2, #0]
{
 8001fb4:	b510      	push	{r4, lr}
 8001fb6:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 8001fb8:	b909      	cbnz	r1, 8001fbe <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 8001fba:	490a      	ldr	r1, [pc, #40]	; (8001fe4 <_sbrk+0x34>)
 8001fbc:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001fbe:	6810      	ldr	r0, [r2, #0]
 8001fc0:	4909      	ldr	r1, [pc, #36]	; (8001fe8 <_sbrk+0x38>)
 8001fc2:	4c0a      	ldr	r4, [pc, #40]	; (8001fec <_sbrk+0x3c>)
 8001fc4:	4403      	add	r3, r0
 8001fc6:	1b09      	subs	r1, r1, r4
 8001fc8:	428b      	cmp	r3, r1
 8001fca:	d906      	bls.n	8001fda <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8001fcc:	f003 fb20 	bl	8005610 <__errno>
 8001fd0:	230c      	movs	r3, #12
 8001fd2:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001fd4:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8001fd8:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8001fda:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8001fdc:	e7fc      	b.n	8001fd8 <_sbrk+0x28>
 8001fde:	bf00      	nop
 8001fe0:	200122d4 	.word	0x200122d4
 8001fe4:	20012500 	.word	0x20012500
 8001fe8:	20018000 	.word	0x20018000
 8001fec:	00000400 	.word	0x00000400

08001ff0 <SystemInit>:
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001ff0:	4a03      	ldr	r2, [pc, #12]	; (8002000 <SystemInit+0x10>)
 8001ff2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001ff6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ffa:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001ffe:	4770      	bx	lr
 8002000:	e000ed00 	.word	0xe000ed00

08002004 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002004:	b500      	push	{lr}

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002006:	2210      	movs	r2, #16
{
 8002008:	b089      	sub	sp, #36	; 0x24
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800200a:	2100      	movs	r1, #0
 800200c:	eb0d 0002 	add.w	r0, sp, r2
 8002010:	f003 faab 	bl	800556a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002014:	4815      	ldr	r0, [pc, #84]	; (800206c <MX_TIM3_Init+0x68>)
  htim3.Init.Prescaler = 5000-1;
 8002016:	4916      	ldr	r1, [pc, #88]	; (8002070 <MX_TIM3_Init+0x6c>)
 8002018:	f241 3287 	movw	r2, #4999	; 0x1387
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800201c:	2300      	movs	r3, #0
  htim3.Init.Prescaler = 5000-1;
 800201e:	e9c0 1200 	strd	r1, r2, [r0]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim3.Init.Period = 2-1;
 8002022:	2201      	movs	r2, #1
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002024:	e9cd 3301 	strd	r3, r3, [sp, #4]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002028:	e9c0 2303 	strd	r2, r3, [r0, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800202c:	9303      	str	r3, [sp, #12]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800202e:	6083      	str	r3, [r0, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002030:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002032:	f002 f96b 	bl	800430c <HAL_TIM_Base_Init>
 8002036:	b108      	cbz	r0, 800203c <MX_TIM3_Init+0x38>
  {
    Error_Handler();
 8002038:	f7ff fd38 	bl	8001aac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800203c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002040:	480a      	ldr	r0, [pc, #40]	; (800206c <MX_TIM3_Init+0x68>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002042:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002044:	a904      	add	r1, sp, #16
 8002046:	f002 f99b 	bl	8004380 <HAL_TIM_ConfigClockSource>
 800204a:	b108      	cbz	r0, 8002050 <MX_TIM3_Init+0x4c>
  {
    Error_Handler();
 800204c:	f7ff fd2e 	bl	8001aac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002050:	2320      	movs	r3, #32
 8002052:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002054:	4805      	ldr	r0, [pc, #20]	; (800206c <MX_TIM3_Init+0x68>)
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002056:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002058:	a901      	add	r1, sp, #4
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800205a:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800205c:	f002 fa2a 	bl	80044b4 <HAL_TIMEx_MasterConfigSynchronization>
 8002060:	b108      	cbz	r0, 8002066 <MX_TIM3_Init+0x62>
  {
    Error_Handler();
 8002062:	f7ff fd23 	bl	8001aac <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002066:	b009      	add	sp, #36	; 0x24
 8002068:	f85d fb04 	ldr.w	pc, [sp], #4
 800206c:	200122d8 	.word	0x200122d8
 8002070:	40000400 	.word	0x40000400

08002074 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM3)
 8002074:	6802      	ldr	r2, [r0, #0]
 8002076:	4b08      	ldr	r3, [pc, #32]	; (8002098 <HAL_TIM_Base_MspInit+0x24>)
 8002078:	429a      	cmp	r2, r3
{
 800207a:	b082      	sub	sp, #8
  if(tim_baseHandle->Instance==TIM3)
 800207c:	d10a      	bne.n	8002094 <HAL_TIM_Base_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800207e:	f503 3303 	add.w	r3, r3, #134144	; 0x20c00
 8002082:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002084:	f042 0202 	orr.w	r2, r2, #2
 8002088:	659a      	str	r2, [r3, #88]	; 0x58
 800208a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800208c:	f003 0302 	and.w	r3, r3, #2
 8002090:	9301      	str	r3, [sp, #4]
 8002092:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002094:	b002      	add	sp, #8
 8002096:	4770      	bx	lr
 8002098:	40000400 	.word	0x40000400

0800209c <MX_USART2_UART_Init>:
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800209c:	480c      	ldr	r0, [pc, #48]	; (80020d0 <MX_USART2_UART_Init+0x34>)
  huart2.Init.BaudRate = 115200;
 800209e:	4a0d      	ldr	r2, [pc, #52]	; (80020d4 <MX_USART2_UART_Init+0x38>)
{
 80020a0:	b508      	push	{r3, lr}
  huart2.Init.BaudRate = 115200;
 80020a2:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80020a6:	e9c0 2300 	strd	r2, r3, [r0]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80020aa:	2300      	movs	r3, #0
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 80020ac:	220c      	movs	r2, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 80020ae:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020b2:	e9c0 2305 	strd	r2, r3, [r0, #20]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80020b6:	e9c0 3307 	strd	r3, r3, [r0, #28]
  huart2.Init.Parity = UART_PARITY_NONE;
 80020ba:	6103      	str	r3, [r0, #16]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80020bc:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80020be:	f002 fc9b 	bl	80049f8 <HAL_UART_Init>
 80020c2:	b118      	cbz	r0, 80020cc <MX_USART2_UART_Init+0x30>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80020c4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80020c8:	f7ff bcf0 	b.w	8001aac <Error_Handler>
}
 80020cc:	bd08      	pop	{r3, pc}
 80020ce:	bf00      	nop
 80020d0:	20012324 	.word	0x20012324
 80020d4:	40004400 	.word	0x40004400

080020d8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80020d8:	b510      	push	{r4, lr}
 80020da:	b0aa      	sub	sp, #168	; 0xa8
 80020dc:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020de:	2214      	movs	r2, #20
 80020e0:	2100      	movs	r1, #0
 80020e2:	a803      	add	r0, sp, #12
 80020e4:	f003 fa41 	bl	800556a <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80020e8:	2288      	movs	r2, #136	; 0x88
 80020ea:	2100      	movs	r1, #0
 80020ec:	a808      	add	r0, sp, #32
 80020ee:	f003 fa3c 	bl	800556a <memset>
  if(uartHandle->Instance==USART2)
 80020f2:	6822      	ldr	r2, [r4, #0]
 80020f4:	4b17      	ldr	r3, [pc, #92]	; (8002154 <HAL_UART_MspInit+0x7c>)
 80020f6:	429a      	cmp	r2, r3
 80020f8:	d129      	bne.n	800214e <HAL_UART_MspInit+0x76>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80020fa:	2302      	movs	r3, #2
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80020fc:	a808      	add	r0, sp, #32
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80020fe:	9308      	str	r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002100:	f001 fc6e 	bl	80039e0 <HAL_RCCEx_PeriphCLKConfig>
 8002104:	b108      	cbz	r0, 800210a <HAL_UART_MspInit+0x32>
    {
      Error_Handler();
 8002106:	f7ff fcd1 	bl	8001aac <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800210a:	4b13      	ldr	r3, [pc, #76]	; (8002158 <HAL_UART_MspInit+0x80>)
 800210c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800210e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002112:	659a      	str	r2, [r3, #88]	; 0x58
 8002114:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002116:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 800211a:	9201      	str	r2, [sp, #4]
 800211c:	9a01      	ldr	r2, [sp, #4]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800211e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002120:	f042 0201 	orr.w	r2, r2, #1
 8002124:	64da      	str	r2, [r3, #76]	; 0x4c
 8002126:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002128:	f003 0301 	and.w	r3, r3, #1
 800212c:	9302      	str	r3, [sp, #8]
 800212e:	9b02      	ldr	r3, [sp, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002130:	220c      	movs	r2, #12
 8002132:	2302      	movs	r3, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002134:	2100      	movs	r1, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002136:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800213a:	2303      	movs	r3, #3
 800213c:	e9cd 1305 	strd	r1, r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002140:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002144:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002146:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002148:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800214a:	f000 fe47 	bl	8002ddc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800214e:	b02a      	add	sp, #168	; 0xa8
 8002150:	bd10      	pop	{r4, pc}
 8002152:	bf00      	nop
 8002154:	40004400 	.word	0x40004400
 8002158:	40021000 	.word	0x40021000

0800215c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800215c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002194 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002160:	f7ff ff46 	bl	8001ff0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002164:	480c      	ldr	r0, [pc, #48]	; (8002198 <LoopForever+0x6>)
  ldr r1, =_edata
 8002166:	490d      	ldr	r1, [pc, #52]	; (800219c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002168:	4a0d      	ldr	r2, [pc, #52]	; (80021a0 <LoopForever+0xe>)
  movs r3, #0
 800216a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800216c:	e002      	b.n	8002174 <LoopCopyDataInit>

0800216e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800216e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002170:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002172:	3304      	adds	r3, #4

08002174 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002174:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002176:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002178:	d3f9      	bcc.n	800216e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800217a:	4a0a      	ldr	r2, [pc, #40]	; (80021a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800217c:	4c0a      	ldr	r4, [pc, #40]	; (80021a8 <LoopForever+0x16>)
  movs r3, #0
 800217e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002180:	e001      	b.n	8002186 <LoopFillZerobss>

08002182 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002182:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002184:	3204      	adds	r2, #4

08002186 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002186:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002188:	d3fb      	bcc.n	8002182 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800218a:	f003 fa47 	bl	800561c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800218e:	f7ff fc09 	bl	80019a4 <main>

08002192 <LoopForever>:

LoopForever:
    b LoopForever
 8002192:	e7fe      	b.n	8002192 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002194:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002198:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800219c:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 80021a0:	08009a30 	.word	0x08009a30
  ldr r2, =_sbss
 80021a4:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 80021a8:	200124fc 	.word	0x200124fc

080021ac <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80021ac:	e7fe      	b.n	80021ac <ADC3_IRQHandler>
	...

080021b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021b0:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80021b2:	4b0f      	ldr	r3, [pc, #60]	; (80021f0 <HAL_InitTick+0x40>)
 80021b4:	781a      	ldrb	r2, [r3, #0]
{
 80021b6:	4605      	mov	r5, r0
  if ((uint32_t)uwTickFreq != 0U)
 80021b8:	b90a      	cbnz	r2, 80021be <HAL_InitTick+0xe>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 80021ba:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 80021bc:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80021be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021c2:	fbb3 f3f2 	udiv	r3, r3, r2
 80021c6:	4a0b      	ldr	r2, [pc, #44]	; (80021f4 <HAL_InitTick+0x44>)
 80021c8:	6810      	ldr	r0, [r2, #0]
 80021ca:	fbb0 f0f3 	udiv	r0, r0, r3
 80021ce:	f000 fdf1 	bl	8002db4 <HAL_SYSTICK_Config>
 80021d2:	4604      	mov	r4, r0
 80021d4:	2800      	cmp	r0, #0
 80021d6:	d1f0      	bne.n	80021ba <HAL_InitTick+0xa>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021d8:	2d0f      	cmp	r5, #15
 80021da:	d8ee      	bhi.n	80021ba <HAL_InitTick+0xa>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021dc:	4602      	mov	r2, r0
 80021de:	4629      	mov	r1, r5
 80021e0:	f04f 30ff 	mov.w	r0, #4294967295
 80021e4:	f000 fda6 	bl	8002d34 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80021e8:	4b03      	ldr	r3, [pc, #12]	; (80021f8 <HAL_InitTick+0x48>)
 80021ea:	4620      	mov	r0, r4
 80021ec:	601d      	str	r5, [r3, #0]
  return status;
 80021ee:	e7e5      	b.n	80021bc <HAL_InitTick+0xc>
 80021f0:	20000004 	.word	0x20000004
 80021f4:	20000000 	.word	0x20000000
 80021f8:	20000008 	.word	0x20000008

080021fc <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021fc:	4a09      	ldr	r2, [pc, #36]	; (8002224 <HAL_Init+0x28>)
 80021fe:	6813      	ldr	r3, [r2, #0]
 8002200:	f443 7380 	orr.w	r3, r3, #256	; 0x100
{
 8002204:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002206:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002208:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800220a:	f000 fd81 	bl	8002d10 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800220e:	2000      	movs	r0, #0
 8002210:	f7ff ffce 	bl	80021b0 <HAL_InitTick>
 8002214:	4604      	mov	r4, r0
 8002216:	b918      	cbnz	r0, 8002220 <HAL_Init+0x24>
    HAL_MspInit();
 8002218:	f7ff fe68 	bl	8001eec <HAL_MspInit>
}
 800221c:	4620      	mov	r0, r4
 800221e:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8002220:	2401      	movs	r4, #1
 8002222:	e7fb      	b.n	800221c <HAL_Init+0x20>
 8002224:	40022000 	.word	0x40022000

08002228 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8002228:	4a03      	ldr	r2, [pc, #12]	; (8002238 <HAL_IncTick+0x10>)
 800222a:	4b04      	ldr	r3, [pc, #16]	; (800223c <HAL_IncTick+0x14>)
 800222c:	6811      	ldr	r1, [r2, #0]
 800222e:	781b      	ldrb	r3, [r3, #0]
 8002230:	440b      	add	r3, r1
 8002232:	6013      	str	r3, [r2, #0]
}
 8002234:	4770      	bx	lr
 8002236:	bf00      	nop
 8002238:	200123ac 	.word	0x200123ac
 800223c:	20000004 	.word	0x20000004

08002240 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002240:	4b01      	ldr	r3, [pc, #4]	; (8002248 <HAL_GetTick+0x8>)
 8002242:	6818      	ldr	r0, [r3, #0]
}
 8002244:	4770      	bx	lr
 8002246:	bf00      	nop
 8002248:	200123ac 	.word	0x200123ac

0800224c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800224c:	b538      	push	{r3, r4, r5, lr}
 800224e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002250:	f7ff fff6 	bl	8002240 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002254:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)uwTickFreq;
 8002256:	bf1c      	itt	ne
 8002258:	4b05      	ldrne	r3, [pc, #20]	; (8002270 <HAL_Delay+0x24>)
 800225a:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 800225c:	4605      	mov	r5, r0
    wait += (uint32_t)uwTickFreq;
 800225e:	bf18      	it	ne
 8002260:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002262:	f7ff ffed 	bl	8002240 <HAL_GetTick>
 8002266:	1b43      	subs	r3, r0, r5
 8002268:	42a3      	cmp	r3, r4
 800226a:	d3fa      	bcc.n	8002262 <HAL_Delay+0x16>
  {
  }
}
 800226c:	bd38      	pop	{r3, r4, r5, pc}
 800226e:	bf00      	nop
 8002270:	20000004 	.word	0x20000004

08002274 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002274:	b530      	push	{r4, r5, lr}
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002276:	0dcc      	lsrs	r4, r1, #23
 8002278:	f004 0404 	and.w	r4, r4, #4
 800227c:	3014      	adds	r0, #20
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800227e:	f3c1 5104 	ubfx	r1, r1, #20, #5
 8002282:	5903      	ldr	r3, [r0, r4]
 8002284:	2507      	movs	r5, #7
 8002286:	408d      	lsls	r5, r1
 8002288:	ea23 0305 	bic.w	r3, r3, r5
 800228c:	408a      	lsls	r2, r1
 800228e:	4313      	orrs	r3, r2
 8002290:	5103      	str	r3, [r0, r4]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002292:	bd30      	pop	{r4, r5, pc}

08002294 <LL_ADC_IsEnabled>:
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002294:	6880      	ldr	r0, [r0, #8]
}
 8002296:	f000 0001 	and.w	r0, r0, #1
 800229a:	4770      	bx	lr

0800229c <LL_ADC_REG_IsConversionOngoing>:
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800229c:	6880      	ldr	r0, [r0, #8]
}
 800229e:	f3c0 0080 	ubfx	r0, r0, #2, #1
 80022a2:	4770      	bx	lr

080022a4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80022a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80022a6:	2300      	movs	r3, #0
 80022a8:	9301      	str	r3, [sp, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 80022aa:	4604      	mov	r4, r0
 80022ac:	2800      	cmp	r0, #0
 80022ae:	f000 80c5 	beq.w	800243c <HAL_ADC_Init+0x198>
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80022b2:	6d45      	ldr	r5, [r0, #84]	; 0x54
 80022b4:	b925      	cbnz	r5, 80022c0 <HAL_ADC_Init+0x1c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80022b6:	f7ff f811 	bl	80012dc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80022ba:	65a5      	str	r5, [r4, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80022bc:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80022c0:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80022c2:	689a      	ldr	r2, [r3, #8]
 80022c4:	0095      	lsls	r5, r2, #2
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80022c6:	bf41      	itttt	mi
 80022c8:	689a      	ldrmi	r2, [r3, #8]
 80022ca:	f022 4220 	bicmi.w	r2, r2, #2684354560	; 0xa0000000
 80022ce:	f022 023f 	bicmi.w	r2, r2, #63	; 0x3f
 80022d2:	609a      	strmi	r2, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80022d4:	689a      	ldr	r2, [r3, #8]
 80022d6:	00d0      	lsls	r0, r2, #3
 80022d8:	f140 808f 	bpl.w	80023fa <HAL_ADC_Init+0x156>
 80022dc:	689a      	ldr	r2, [r3, #8]
 80022de:	00d1      	lsls	r1, r2, #3
 80022e0:	f100 80a2 	bmi.w	8002428 <HAL_ADC_Init+0x184>
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022e4:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80022e6:	f042 0210 	orr.w	r2, r2, #16
 80022ea:	6562      	str	r2, [r4, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022ec:	6da2      	ldr	r2, [r4, #88]	; 0x58
 80022ee:	f042 0201 	orr.w	r2, r2, #1
 80022f2:	65a2      	str	r2, [r4, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80022f4:	2101      	movs	r1, #1

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80022f6:	4618      	mov	r0, r3
 80022f8:	f7ff ffd0 	bl	800229c <LL_ADC_REG_IsConversionOngoing>

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80022fc:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80022fe:	f002 0210 	and.w	r2, r2, #16
 8002302:	4310      	orrs	r0, r2
 8002304:	f040 8096 	bne.w	8002434 <HAL_ADC_Init+0x190>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002308:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800230a:	f422 7281 	bic.w	r2, r2, #258	; 0x102
 800230e:	f042 0202 	orr.w	r2, r2, #2
 8002312:	6562      	str	r2, [r4, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002314:	4618      	mov	r0, r3
 8002316:	f7ff ffbd 	bl	8002294 <LL_ADC_IsEnabled>
 800231a:	b998      	cbnz	r0, 8002344 <HAL_ADC_Init+0xa0>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800231c:	4848      	ldr	r0, [pc, #288]	; (8002440 <HAL_ADC_Init+0x19c>)
 800231e:	f7ff ffb9 	bl	8002294 <LL_ADC_IsEnabled>
 8002322:	4602      	mov	r2, r0
 8002324:	4847      	ldr	r0, [pc, #284]	; (8002444 <HAL_ADC_Init+0x1a0>)
 8002326:	f7ff ffb5 	bl	8002294 <LL_ADC_IsEnabled>
 800232a:	4302      	orrs	r2, r0
 800232c:	4846      	ldr	r0, [pc, #280]	; (8002448 <HAL_ADC_Init+0x1a4>)
 800232e:	f7ff ffb1 	bl	8002294 <LL_ADC_IsEnabled>
 8002332:	4310      	orrs	r0, r2
 8002334:	d106      	bne.n	8002344 <HAL_ADC_Init+0xa0>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002336:	4845      	ldr	r0, [pc, #276]	; (800244c <HAL_ADC_Init+0x1a8>)
 8002338:	6865      	ldr	r5, [r4, #4]
 800233a:	6882      	ldr	r2, [r0, #8]
 800233c:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
 8002340:	432a      	orrs	r2, r5
 8002342:	6082      	str	r2, [r0, #8]
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
                 hadc->Init.Overrun                                                     |
                 hadc->Init.DataAlign                                                   |
 8002344:	68e5      	ldr	r5, [r4, #12]
 8002346:	6b62      	ldr	r2, [r4, #52]	; 0x34
                 hadc->Init.Resolution                                                  |
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002348:	f894 0020 	ldrb.w	r0, [r4, #32]
                 hadc->Init.DataAlign                                                   |
 800234c:	432a      	orrs	r2, r5
 800234e:	68a5      	ldr	r5, [r4, #8]
 8002350:	432a      	orrs	r2, r5
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002352:	7e65      	ldrb	r5, [r4, #25]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002354:	2801      	cmp	r0, #1
                 hadc->Init.DataAlign                                                   |
 8002356:	ea42 3245 	orr.w	r2, r2, r5, lsl #13
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800235a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800235e:	bf02      	ittt	eq
 8002360:	6a60      	ldreq	r0, [r4, #36]	; 0x24
 8002362:	f100 30ff 	addeq.w	r0, r0, #4294967295
 8002366:	ea42 4240 	orreq.w	r2, r2, r0, lsl #17
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800236a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800236c:	b120      	cbz	r0, 8002378 <HAL_ADC_Init+0xd4>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
                   | hadc->Init.ExternalTrigConvEdge
 800236e:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002370:	f400 7070 	and.w	r0, r0, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8002374:	4328      	orrs	r0, r5
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002376:	4302      	orrs	r2, r0
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002378:	68dd      	ldr	r5, [r3, #12]
 800237a:	4835      	ldr	r0, [pc, #212]	; (8002450 <HAL_ADC_Init+0x1ac>)
 800237c:	4028      	ands	r0, r5
 800237e:	4310      	orrs	r0, r2
 8002380:	60d8      	str	r0, [r3, #12]
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002382:	689a      	ldr	r2, [r3, #8]
 8002384:	0712      	lsls	r2, r2, #28
 8002386:	d420      	bmi.n	80023ca <HAL_ADC_Init+0x126>
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002388:	68d8      	ldr	r0, [r3, #12]
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800238a:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800238e:	7e25      	ldrb	r5, [r4, #24]
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002390:	0052      	lsls	r2, r2, #1
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002392:	f420 4080 	bic.w	r0, r0, #16384	; 0x4000
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002396:	ea42 3285 	orr.w	r2, r2, r5, lsl #14
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800239a:	f020 0002 	bic.w	r0, r0, #2
 800239e:	4302      	orrs	r2, r0
 80023a0:	60da      	str	r2, [r3, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80023a2:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 80023a6:	2a01      	cmp	r2, #1
 80023a8:	d140      	bne.n	800242c <HAL_ADC_Init+0x188>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80023aa:	e9d4 250f 	ldrd	r2, r5, [r4, #60]	; 0x3c
 80023ae:	6918      	ldr	r0, [r3, #16]
 80023b0:	f420 60ff 	bic.w	r0, r0, #2040	; 0x7f8
 80023b4:	f020 0004 	bic.w	r0, r0, #4
 80023b8:	432a      	orrs	r2, r5
 80023ba:	4302      	orrs	r2, r0
 80023bc:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80023be:	4302      	orrs	r2, r0
 80023c0:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80023c2:	4302      	orrs	r2, r0
 80023c4:	f042 0201 	orr.w	r2, r2, #1
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80023c8:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80023ca:	6922      	ldr	r2, [r4, #16]
 80023cc:	2a01      	cmp	r2, #1
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80023ce:	bf05      	ittet	eq
 80023d0:	6b18      	ldreq	r0, [r3, #48]	; 0x30
 80023d2:	69e2      	ldreq	r2, [r4, #28]
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80023d4:	6b1a      	ldrne	r2, [r3, #48]	; 0x30
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80023d6:	f102 32ff 	addeq.w	r2, r2, #4294967295
 80023da:	bf06      	itte	eq
 80023dc:	f020 000f 	biceq.w	r0, r0, #15
 80023e0:	4302      	orreq	r2, r0
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80023e2:	f022 020f 	bicne.w	r2, r2, #15
 80023e6:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80023e8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80023ea:	f023 0303 	bic.w	r3, r3, #3
 80023ee:	f043 0301 	orr.w	r3, r3, #1
 80023f2:	6563      	str	r3, [r4, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
  }

  /* Return function status */
  return tmp_hal_status;
}
 80023f4:	4608      	mov	r0, r1
 80023f6:	b003      	add	sp, #12
 80023f8:	bd30      	pop	{r4, r5, pc}
  MODIFY_REG(ADCx->CR,
 80023fa:	689a      	ldr	r2, [r3, #8]
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80023fc:	4915      	ldr	r1, [pc, #84]	; (8002454 <HAL_ADC_Init+0x1b0>)
 80023fe:	f022 4210 	bic.w	r2, r2, #2415919104	; 0x90000000
 8002402:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8002406:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800240a:	609a      	str	r2, [r3, #8]
 800240c:	4a12      	ldr	r2, [pc, #72]	; (8002458 <HAL_ADC_Init+0x1b4>)
 800240e:	6812      	ldr	r2, [r2, #0]
 8002410:	fbb2 f2f1 	udiv	r2, r2, r1
 8002414:	3201      	adds	r2, #1
 8002416:	0052      	lsls	r2, r2, #1
      wait_loop_index--;
 8002418:	9201      	str	r2, [sp, #4]
    while (wait_loop_index != 0UL)
 800241a:	9a01      	ldr	r2, [sp, #4]
 800241c:	2a00      	cmp	r2, #0
 800241e:	f43f af5d 	beq.w	80022dc <HAL_ADC_Init+0x38>
      wait_loop_index--;
 8002422:	9a01      	ldr	r2, [sp, #4]
 8002424:	3a01      	subs	r2, #1
 8002426:	e7f7      	b.n	8002418 <HAL_ADC_Init+0x174>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002428:	2100      	movs	r1, #0
 800242a:	e764      	b.n	80022f6 <HAL_ADC_Init+0x52>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800242c:	691a      	ldr	r2, [r3, #16]
 800242e:	f022 0201 	bic.w	r2, r2, #1
 8002432:	e7c9      	b.n	80023c8 <HAL_ADC_Init+0x124>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002434:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002436:	f043 0310 	orr.w	r3, r3, #16
 800243a:	6563      	str	r3, [r4, #84]	; 0x54
    return HAL_ERROR;
 800243c:	2101      	movs	r1, #1
 800243e:	e7d9      	b.n	80023f4 <HAL_ADC_Init+0x150>
 8002440:	50040000 	.word	0x50040000
 8002444:	50040100 	.word	0x50040100
 8002448:	50040200 	.word	0x50040200
 800244c:	50040300 	.word	0x50040300
 8002450:	fff0c007 	.word	0xfff0c007
 8002454:	00030d40 	.word	0x00030d40
 8002458:	20000000 	.word	0x20000000

0800245c <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800245c:	6803      	ldr	r3, [r0, #0]
 800245e:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 8002460:	4770      	bx	lr

08002462 <HAL_ADC_LevelOutOfWindowCallback>:
 8002462:	4770      	bx	lr

08002464 <HAL_ADC_ErrorCallback>:
 8002464:	4770      	bx	lr
	...

08002468 <HAL_ADC_IRQHandler>:
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002468:	6803      	ldr	r3, [r0, #0]
{
 800246a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800246e:	f8df 8238 	ldr.w	r8, [pc, #568]	; 80026a8 <HAL_ADC_IRQHandler+0x240>
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002472:	681d      	ldr	r5, [r3, #0]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002474:	685e      	ldr	r6, [r3, #4]
 8002476:	f8d8 7008 	ldr.w	r7, [r8, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800247a:	07a9      	lsls	r1, r5, #30
{
 800247c:	4604      	mov	r4, r0
 800247e:	f007 071f 	and.w	r7, r7, #31
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002482:	d50d      	bpl.n	80024a0 <HAL_ADC_IRQHandler+0x38>
 8002484:	07b2      	lsls	r2, r6, #30
 8002486:	d50b      	bpl.n	80024a0 <HAL_ADC_IRQHandler+0x38>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002488:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800248a:	06db      	lsls	r3, r3, #27
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800248c:	bf5e      	ittt	pl
 800248e:	6d43      	ldrpl	r3, [r0, #84]	; 0x54
 8002490:	f443 6300 	orrpl.w	r3, r3, #2048	; 0x800
 8002494:	6543      	strpl	r3, [r0, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002496:	f000 fbc7 	bl	8002c28 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 800249a:	6823      	ldr	r3, [r4, #0]
 800249c:	2202      	movs	r2, #2
 800249e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80024a0:	0768      	lsls	r0, r5, #29
 80024a2:	d501      	bpl.n	80024a8 <HAL_ADC_IRQHandler+0x40>
 80024a4:	0771      	lsls	r1, r6, #29
 80024a6:	d403      	bmi.n	80024b0 <HAL_ADC_IRQHandler+0x48>
 80024a8:	072a      	lsls	r2, r5, #28
 80024aa:	d532      	bpl.n	8002512 <HAL_ADC_IRQHandler+0xaa>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80024ac:	0733      	lsls	r3, r6, #28
 80024ae:	d530      	bpl.n	8002512 <HAL_ADC_IRQHandler+0xaa>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80024b0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80024b2:	06d8      	lsls	r0, r3, #27
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80024b4:	bf5e      	ittt	pl
 80024b6:	6d63      	ldrpl	r3, [r4, #84]	; 0x54
 80024b8:	f443 7300 	orrpl.w	r3, r3, #512	; 0x200
 80024bc:	6563      	strpl	r3, [r4, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80024be:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80024c0:	68da      	ldr	r2, [r3, #12]
 80024c2:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 80024c6:	d11e      	bne.n	8002506 <HAL_ADC_IRQHandler+0x9e>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80024c8:	4a75      	ldr	r2, [pc, #468]	; (80026a0 <HAL_ADC_IRQHandler+0x238>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	f000 80dc 	beq.w	8002688 <HAL_ADC_IRQHandler+0x220>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80024d0:	68da      	ldr	r2, [r3, #12]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80024d2:	0491      	lsls	r1, r2, #18
 80024d4:	d417      	bmi.n	8002506 <HAL_ADC_IRQHandler+0x9e>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80024d6:	681a      	ldr	r2, [r3, #0]
 80024d8:	0712      	lsls	r2, r2, #28
 80024da:	d514      	bpl.n	8002506 <HAL_ADC_IRQHandler+0x9e>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80024dc:	4618      	mov	r0, r3
 80024de:	f7ff fedd 	bl	800229c <LL_ADC_REG_IsConversionOngoing>
 80024e2:	2800      	cmp	r0, #0
 80024e4:	f040 80b2 	bne.w	800264c <HAL_ADC_IRQHandler+0x1e4>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80024e8:	685a      	ldr	r2, [r3, #4]
 80024ea:	f022 020c 	bic.w	r2, r2, #12
 80024ee:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80024f0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80024f2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80024f6:	6563      	str	r3, [r4, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80024f8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80024fa:	04db      	lsls	r3, r3, #19
 80024fc:	d403      	bmi.n	8002506 <HAL_ADC_IRQHandler+0x9e>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80024fe:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002500:	f043 0301 	orr.w	r3, r3, #1
 8002504:	6563      	str	r3, [r4, #84]	; 0x54
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002506:	4620      	mov	r0, r4
 8002508:	f7ff fa0a 	bl	8001920 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800250c:	6823      	ldr	r3, [r4, #0]
 800250e:	220c      	movs	r2, #12
 8002510:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002512:	06a8      	lsls	r0, r5, #26
 8002514:	d501      	bpl.n	800251a <HAL_ADC_IRQHandler+0xb2>
 8002516:	06b1      	lsls	r1, r6, #26
 8002518:	d403      	bmi.n	8002522 <HAL_ADC_IRQHandler+0xba>
 800251a:	066a      	lsls	r2, r5, #25
 800251c:	d53a      	bpl.n	8002594 <HAL_ADC_IRQHandler+0x12c>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800251e:	0673      	lsls	r3, r6, #25
 8002520:	d538      	bpl.n	8002594 <HAL_ADC_IRQHandler+0x12c>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002522:	6d63      	ldr	r3, [r4, #84]	; 0x54
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002524:	4a5e      	ldr	r2, [pc, #376]	; (80026a0 <HAL_ADC_IRQHandler+0x238>)
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002526:	06d8      	lsls	r0, r3, #27
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002528:	bf5e      	ittt	pl
 800252a:	6d63      	ldrpl	r3, [r4, #84]	; 0x54
 800252c:	f443 5300 	orrpl.w	r3, r3, #8192	; 0x2000
 8002530:	6563      	strpl	r3, [r4, #84]	; 0x54
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002532:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002534:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002536:	68d8      	ldr	r0, [r3, #12]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002538:	4293      	cmp	r3, r2
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800253a:	f001 01c0 	and.w	r1, r1, #192	; 0xc0
 800253e:	f040 808e 	bne.w	800265e <HAL_ADC_IRQHandler+0x1f6>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002542:	22c1      	movs	r2, #193	; 0xc1
 8002544:	40fa      	lsrs	r2, r7
 8002546:	07d2      	lsls	r2, r2, #31
 8002548:	f100 8089 	bmi.w	800265e <HAL_ADC_IRQHandler+0x1f6>
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800254c:	4a55      	ldr	r2, [pc, #340]	; (80026a4 <HAL_ADC_IRQHandler+0x23c>)
 800254e:	68d2      	ldr	r2, [r2, #12]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8002550:	b9d1      	cbnz	r1, 8002588 <HAL_ADC_IRQHandler+0x120>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002552:	0191      	lsls	r1, r2, #6
 8002554:	d505      	bpl.n	8002562 <HAL_ADC_IRQHandler+0xfa>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002556:	f402 5100 	and.w	r1, r2, #8192	; 0x2000
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800255a:	f400 6040 	and.w	r0, r0, #3072	; 0xc00
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800255e:	4301      	orrs	r1, r0
 8002560:	d112      	bne.n	8002588 <HAL_ADC_IRQHandler+0x120>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002562:	6819      	ldr	r1, [r3, #0]
 8002564:	0648      	lsls	r0, r1, #25
 8002566:	d50f      	bpl.n	8002588 <HAL_ADC_IRQHandler+0x120>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002568:	0291      	lsls	r1, r2, #10
 800256a:	d40d      	bmi.n	8002588 <HAL_ADC_IRQHandler+0x120>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800256c:	689a      	ldr	r2, [r3, #8]
 800256e:	0712      	lsls	r2, r2, #28
 8002570:	d477      	bmi.n	8002662 <HAL_ADC_IRQHandler+0x1fa>
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002572:	685a      	ldr	r2, [r3, #4]
 8002574:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002578:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800257a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800257c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002580:	6563      	str	r3, [r4, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002582:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002584:	05db      	lsls	r3, r3, #23
 8002586:	d575      	bpl.n	8002674 <HAL_ADC_IRQHandler+0x20c>
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002588:	4620      	mov	r0, r4
 800258a:	f000 fb49 	bl	8002c20 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800258e:	6823      	ldr	r3, [r4, #0]
 8002590:	2260      	movs	r2, #96	; 0x60
 8002592:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002594:	0628      	lsls	r0, r5, #24
 8002596:	d50b      	bpl.n	80025b0 <HAL_ADC_IRQHandler+0x148>
 8002598:	0631      	lsls	r1, r6, #24
 800259a:	d509      	bpl.n	80025b0 <HAL_ADC_IRQHandler+0x148>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800259c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800259e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025a2:	6563      	str	r3, [r4, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80025a4:	4620      	mov	r0, r4
 80025a6:	f7ff ff5c 	bl	8002462 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80025aa:	6823      	ldr	r3, [r4, #0]
 80025ac:	2280      	movs	r2, #128	; 0x80
 80025ae:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80025b0:	05ea      	lsls	r2, r5, #23
 80025b2:	d50c      	bpl.n	80025ce <HAL_ADC_IRQHandler+0x166>
 80025b4:	05f3      	lsls	r3, r6, #23
 80025b6:	d50a      	bpl.n	80025ce <HAL_ADC_IRQHandler+0x166>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80025b8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80025ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025be:	6563      	str	r3, [r4, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80025c0:	4620      	mov	r0, r4
 80025c2:	f000 fb2f 	bl	8002c24 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80025c6:	6823      	ldr	r3, [r4, #0]
 80025c8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80025cc:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80025ce:	05a8      	lsls	r0, r5, #22
 80025d0:	d50c      	bpl.n	80025ec <HAL_ADC_IRQHandler+0x184>
 80025d2:	05b1      	lsls	r1, r6, #22
 80025d4:	d50a      	bpl.n	80025ec <HAL_ADC_IRQHandler+0x184>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80025d6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80025d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025dc:	6563      	str	r3, [r4, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80025de:	4620      	mov	r0, r4
 80025e0:	f000 fb21 	bl	8002c26 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80025e4:	6823      	ldr	r3, [r4, #0]
 80025e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025ea:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80025ec:	06ea      	lsls	r2, r5, #27
 80025ee:	d518      	bpl.n	8002622 <HAL_ADC_IRQHandler+0x1ba>
 80025f0:	06f3      	lsls	r3, r6, #27
 80025f2:	d516      	bpl.n	8002622 <HAL_ADC_IRQHandler+0x1ba>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80025f4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80025f6:	b133      	cbz	r3, 8002606 <HAL_ADC_IRQHandler+0x19e>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80025f8:	2f00      	cmp	r7, #0
 80025fa:	d040      	beq.n	800267e <HAL_ADC_IRQHandler+0x216>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80025fc:	f8d8 3008 	ldr.w	r3, [r8, #8]
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002600:	f413 4f60 	tst.w	r3, #57344	; 0xe000
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8002604:	d00a      	beq.n	800261c <HAL_ADC_IRQHandler+0x1b4>
    }

    if (overrun_error == 1UL)
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002606:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002608:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800260c:	6563      	str	r3, [r4, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800260e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002610:	f043 0302 	orr.w	r3, r3, #2
 8002614:	65a3      	str	r3, [r4, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002616:	4620      	mov	r0, r4
 8002618:	f7ff ff24 	bl	8002464 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800261c:	6823      	ldr	r3, [r4, #0]
 800261e:	2210      	movs	r2, #16
 8002620:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002622:	0568      	lsls	r0, r5, #21
 8002624:	d539      	bpl.n	800269a <HAL_ADC_IRQHandler+0x232>
 8002626:	0571      	lsls	r1, r6, #21
 8002628:	d537      	bpl.n	800269a <HAL_ADC_IRQHandler+0x232>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800262a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800262c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002630:	6563      	str	r3, [r4, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002632:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002634:	f043 0308 	orr.w	r3, r3, #8
 8002638:	65a3      	str	r3, [r4, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800263a:	6823      	ldr	r3, [r4, #0]
 800263c:	f44f 6280 	mov.w	r2, #1024	; 0x400

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002640:	4620      	mov	r0, r4
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002642:	601a      	str	r2, [r3, #0]
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8002644:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002648:	f000 baeb 	b.w	8002c22 <HAL_ADCEx_InjectedQueueOverflowCallback>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800264c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800264e:	f043 0310 	orr.w	r3, r3, #16
 8002652:	6563      	str	r3, [r4, #84]	; 0x54
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002654:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002656:	f043 0301 	orr.w	r3, r3, #1
 800265a:	65a3      	str	r3, [r4, #88]	; 0x58
 800265c:	e753      	b.n	8002506 <HAL_ADC_IRQHandler+0x9e>
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800265e:	68da      	ldr	r2, [r3, #12]
 8002660:	e776      	b.n	8002550 <HAL_ADC_IRQHandler+0xe8>
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002662:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002664:	f043 0310 	orr.w	r3, r3, #16
 8002668:	6563      	str	r3, [r4, #84]	; 0x54
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800266a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800266c:	f043 0301 	orr.w	r3, r3, #1
 8002670:	65a3      	str	r3, [r4, #88]	; 0x58
 8002672:	e789      	b.n	8002588 <HAL_ADC_IRQHandler+0x120>
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002674:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002676:	f043 0301 	orr.w	r3, r3, #1
 800267a:	6563      	str	r3, [r4, #84]	; 0x54
 800267c:	e784      	b.n	8002588 <HAL_ADC_IRQHandler+0x120>
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 800267e:	6823      	ldr	r3, [r4, #0]
 8002680:	68db      	ldr	r3, [r3, #12]
 8002682:	f013 0f01 	tst.w	r3, #1
 8002686:	e7bd      	b.n	8002604 <HAL_ADC_IRQHandler+0x19c>
 8002688:	f240 2221 	movw	r2, #545	; 0x221
 800268c:	40fa      	lsrs	r2, r7
 800268e:	07d2      	lsls	r2, r2, #31
 8002690:	f53f af1e 	bmi.w	80024d0 <HAL_ADC_IRQHandler+0x68>
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002694:	4a03      	ldr	r2, [pc, #12]	; (80026a4 <HAL_ADC_IRQHandler+0x23c>)
 8002696:	68d2      	ldr	r2, [r2, #12]
 8002698:	e71b      	b.n	80024d2 <HAL_ADC_IRQHandler+0x6a>
}
 800269a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800269e:	bf00      	nop
 80026a0:	50040100 	.word	0x50040100
 80026a4:	50040000 	.word	0x50040000
 80026a8:	50040300 	.word	0x50040300

080026ac <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80026ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80026ae:	2300      	movs	r3, #0
 80026b0:	9301      	str	r3, [sp, #4]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80026b2:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 80026b6:	2b01      	cmp	r3, #1
{
 80026b8:	4605      	mov	r5, r0
 80026ba:	460e      	mov	r6, r1
  __HAL_LOCK(hadc);
 80026bc:	f000 81a4 	beq.w	8002a08 <HAL_ADC_ConfigChannel+0x35c>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80026c0:	6804      	ldr	r4, [r0, #0]
  __HAL_LOCK(hadc);
 80026c2:	2301      	movs	r3, #1
 80026c4:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80026c8:	4620      	mov	r0, r4
 80026ca:	f7ff fde7 	bl	800229c <LL_ADC_REG_IsConversionOngoing>
 80026ce:	2800      	cmp	r0, #0
 80026d0:	f040 8194 	bne.w	80029fc <HAL_ADC_ConfigChannel+0x350>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 80026d4:	684b      	ldr	r3, [r1, #4]
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 80026d6:	2b05      	cmp	r3, #5
 80026d8:	d806      	bhi.n	80026e8 <HAL_ADC_ConfigChannel+0x3c>
    {
      switch (pConfig->Rank)
 80026da:	3b02      	subs	r3, #2
 80026dc:	2b03      	cmp	r3, #3
 80026de:	bf9a      	itte	ls
 80026e0:	4ab1      	ldrls	r2, [pc, #708]	; (80029a8 <HAL_ADC_ConfigChannel+0x2fc>)
 80026e2:	f832 3013 	ldrhls.w	r3, [r2, r3, lsl #1]
    if (pConfig->Rank <= 5U)
 80026e6:	2306      	movhi	r3, #6
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80026e8:	0999      	lsrs	r1, r3, #6
  MODIFY_REG(*preg,
 80026ea:	6832      	ldr	r2, [r6, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80026ec:	f001 010c 	and.w	r1, r1, #12
 80026f0:	f104 0730 	add.w	r7, r4, #48	; 0x30
  MODIFY_REG(*preg,
 80026f4:	f003 031f 	and.w	r3, r3, #31
 80026f8:	5878      	ldr	r0, [r7, r1]
 80026fa:	f04f 0c1f 	mov.w	ip, #31
 80026fe:	f3c2 6284 	ubfx	r2, r2, #26, #5
 8002702:	409a      	lsls	r2, r3
 8002704:	fa0c f303 	lsl.w	r3, ip, r3
 8002708:	ea20 0303 	bic.w	r3, r0, r3
 800270c:	431a      	orrs	r2, r3
 800270e:	507a      	str	r2, [r7, r1]
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002710:	4620      	mov	r0, r4
 8002712:	f7ff fdc3 	bl	800229c <LL_ADC_REG_IsConversionOngoing>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002716:	68a3      	ldr	r3, [r4, #8]
 8002718:	f003 0308 	and.w	r3, r3, #8
 800271c:	4318      	orrs	r0, r3
 800271e:	d120      	bne.n	8002762 <HAL_ADC_ConfigChannel+0xb6>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002720:	68b2      	ldr	r2, [r6, #8]
 8002722:	6831      	ldr	r1, [r6, #0]
 8002724:	4620      	mov	r0, r4
 8002726:	f7ff fda5 	bl	8002274 <LL_ADC_SetChannelSamplingTime>

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800272a:	6930      	ldr	r0, [r6, #16]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800272c:	6977      	ldr	r7, [r6, #20]
 800272e:	68e1      	ldr	r1, [r4, #12]
      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002730:	6833      	ldr	r3, [r6, #0]
 8002732:	2804      	cmp	r0, #4
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002734:	f104 0260 	add.w	r2, r4, #96	; 0x60
 8002738:	d055      	beq.n	80027e6 <HAL_ADC_ConfigChannel+0x13a>
  MODIFY_REG(*preg,
 800273a:	f852 e020 	ldr.w	lr, [r2, r0, lsl #2]
 800273e:	f8df c290 	ldr.w	ip, [pc, #656]	; 80029d0 <HAL_ADC_ConfigChannel+0x324>
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002742:	f3c1 01c1 	ubfx	r1, r1, #3, #2
 8002746:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
 800274a:	ea0e 0c0c 	and.w	ip, lr, ip
 800274e:	0049      	lsls	r1, r1, #1
 8002750:	ea43 030c 	orr.w	r3, r3, ip
 8002754:	fa07 f101 	lsl.w	r1, r7, r1
 8002758:	430b      	orrs	r3, r1
 800275a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800275e:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002762:	4620      	mov	r0, r4
 8002764:	f7ff fd96 	bl	8002294 <LL_ADC_IsEnabled>
 8002768:	bb90      	cbnz	r0, 80027d0 <HAL_ADC_ConfigChannel+0x124>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800276a:	68f7      	ldr	r7, [r6, #12]
 800276c:	6833      	ldr	r3, [r6, #0]
  MODIFY_REG(ADCx->DIFSEL,
 800276e:	4a8f      	ldr	r2, [pc, #572]	; (80029ac <HAL_ADC_ConfigChannel+0x300>)
 8002770:	f8d4 10b0 	ldr.w	r1, [r4, #176]	; 0xb0
 8002774:	f007 0c18 	and.w	ip, r7, #24
 8002778:	f3c3 0012 	ubfx	r0, r3, #0, #19
 800277c:	fa22 f20c 	lsr.w	r2, r2, ip
 8002780:	401a      	ands	r2, r3
 8002782:	ea21 0100 	bic.w	r1, r1, r0
 8002786:	430a      	orrs	r2, r1
 8002788:	f8c4 20b0 	str.w	r2, [r4, #176]	; 0xb0

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800278c:	4a88      	ldr	r2, [pc, #544]	; (80029b0 <HAL_ADC_ConfigChannel+0x304>)
 800278e:	4297      	cmp	r7, r2
 8002790:	d11e      	bne.n	80027d0 <HAL_ADC_ConfigChannel+0x124>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002792:	2800      	cmp	r0, #0
 8002794:	d17c      	bne.n	8002890 <HAL_ADC_ConfigChannel+0x1e4>
 8002796:	0e9a      	lsrs	r2, r3, #26
 8002798:	3201      	adds	r2, #1
 800279a:	f002 071f 	and.w	r7, r2, #31
 800279e:	2101      	movs	r1, #1
 80027a0:	0692      	lsls	r2, r2, #26
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80027a2:	2f09      	cmp	r7, #9
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80027a4:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 80027a8:	fa01 f107 	lsl.w	r1, r1, r7
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80027ac:	f200 80a2 	bhi.w	80028f4 <HAL_ADC_ConfigChannel+0x248>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80027b0:	4311      	orrs	r1, r2
 80027b2:	2800      	cmp	r0, #0
 80027b4:	f040 8088 	bne.w	80028c8 <HAL_ADC_ConfigChannel+0x21c>
 80027b8:	0e9b      	lsrs	r3, r3, #26
 80027ba:	3301      	adds	r3, #1
 80027bc:	f003 031f 	and.w	r3, r3, #31
 80027c0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80027c4:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80027c6:	68b2      	ldr	r2, [r6, #8]
 80027c8:	4319      	orrs	r1, r3
 80027ca:	4620      	mov	r0, r4
 80027cc:	f7ff fd52 	bl	8002274 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80027d0:	6832      	ldr	r2, [r6, #0]
 80027d2:	4b78      	ldr	r3, [pc, #480]	; (80029b4 <HAL_ADC_ConfigChannel+0x308>)
 80027d4:	421a      	tst	r2, r3
 80027d6:	f040 80a7 	bne.w	8002928 <HAL_ADC_ConfigChannel+0x27c>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027da:	2000      	movs	r0, #0

    tmp_hal_status = HAL_ERROR;
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80027dc:	2300      	movs	r3, #0
 80027de:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
}
 80027e2:	b003      	add	sp, #12
 80027e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80027e6:	6e21      	ldr	r1, [r4, #96]	; 0x60
 80027e8:	6e21      	ldr	r1, [r4, #96]	; 0x60
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80027ea:	f3c3 0012 	ubfx	r0, r3, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80027ee:	f3c1 6184 	ubfx	r1, r1, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80027f2:	2800      	cmp	r0, #0
 80027f4:	d138      	bne.n	8002868 <HAL_ADC_ConfigChannel+0x1bc>
 80027f6:	f3c3 6384 	ubfx	r3, r3, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80027fa:	4299      	cmp	r1, r3
  MODIFY_REG(*preg,
 80027fc:	bf02      	ittt	eq
 80027fe:	6e23      	ldreq	r3, [r4, #96]	; 0x60
 8002800:	f023 4300 	biceq.w	r3, r3, #2147483648	; 0x80000000
 8002804:	6623      	streq	r3, [r4, #96]	; 0x60
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002806:	6853      	ldr	r3, [r2, #4]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002808:	6833      	ldr	r3, [r6, #0]
 800280a:	6851      	ldr	r1, [r2, #4]
 800280c:	f3c3 0012 	ubfx	r0, r3, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002810:	f3c1 6184 	ubfx	r1, r1, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002814:	bb68      	cbnz	r0, 8002872 <HAL_ADC_ConfigChannel+0x1c6>
 8002816:	f3c3 6384 	ubfx	r3, r3, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800281a:	4299      	cmp	r1, r3
  MODIFY_REG(*preg,
 800281c:	bf02      	ittt	eq
 800281e:	6853      	ldreq	r3, [r2, #4]
 8002820:	f023 4300 	biceq.w	r3, r3, #2147483648	; 0x80000000
 8002824:	6053      	streq	r3, [r2, #4]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002826:	6893      	ldr	r3, [r2, #8]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002828:	6833      	ldr	r3, [r6, #0]
 800282a:	6891      	ldr	r1, [r2, #8]
 800282c:	f3c3 0012 	ubfx	r0, r3, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002830:	f3c1 6184 	ubfx	r1, r1, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002834:	bb10      	cbnz	r0, 800287c <HAL_ADC_ConfigChannel+0x1d0>
 8002836:	f3c3 6384 	ubfx	r3, r3, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800283a:	4299      	cmp	r1, r3
  MODIFY_REG(*preg,
 800283c:	bf02      	ittt	eq
 800283e:	6893      	ldreq	r3, [r2, #8]
 8002840:	f023 4300 	biceq.w	r3, r3, #2147483648	; 0x80000000
 8002844:	6093      	streq	r3, [r2, #8]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002846:	68d3      	ldr	r3, [r2, #12]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002848:	6833      	ldr	r3, [r6, #0]
 800284a:	68d1      	ldr	r1, [r2, #12]
 800284c:	f3c3 0012 	ubfx	r0, r3, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002850:	f3c1 6184 	ubfx	r1, r1, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002854:	b9b8      	cbnz	r0, 8002886 <HAL_ADC_ConfigChannel+0x1da>
 8002856:	f3c3 6384 	ubfx	r3, r3, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800285a:	4299      	cmp	r1, r3
  MODIFY_REG(*preg,
 800285c:	bf02      	ittt	eq
 800285e:	68d3      	ldreq	r3, [r2, #12]
 8002860:	f023 4300 	biceq.w	r3, r3, #2147483648	; 0x80000000
 8002864:	60d3      	streq	r3, [r2, #12]
}
 8002866:	e77c      	b.n	8002762 <HAL_ADC_ConfigChannel+0xb6>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002868:	fa93 f3a3 	rbit	r3, r3
   */
  if (value == 0U)
  {
    return 32U;
  }
  return __builtin_clz(value);
 800286c:	fab3 f383 	clz	r3, r3
 8002870:	e7c3      	b.n	80027fa <HAL_ADC_ConfigChannel+0x14e>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002872:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
 8002876:	fab3 f383 	clz	r3, r3
 800287a:	e7ce      	b.n	800281a <HAL_ADC_ConfigChannel+0x16e>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800287c:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
 8002880:	fab3 f383 	clz	r3, r3
 8002884:	e7d9      	b.n	800283a <HAL_ADC_ConfigChannel+0x18e>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002886:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
 800288a:	fab3 f383 	clz	r3, r3
 800288e:	e7e4      	b.n	800285a <HAL_ADC_ConfigChannel+0x1ae>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002890:	fa93 f2a3 	rbit	r2, r3
  if (value == 0U)
 8002894:	b132      	cbz	r2, 80028a4 <HAL_ADC_ConfigChannel+0x1f8>
  return __builtin_clz(value);
 8002896:	fab2 f282 	clz	r2, r2
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800289a:	3201      	adds	r2, #1
 800289c:	f002 021f 	and.w	r2, r2, #31
 80028a0:	2a09      	cmp	r2, #9
 80028a2:	d816      	bhi.n	80028d2 <HAL_ADC_ConfigChannel+0x226>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028a4:	fa93 f2a3 	rbit	r2, r3
  return __builtin_clz(value);
 80028a8:	fab2 f282 	clz	r2, r2
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80028ac:	3201      	adds	r2, #1
 80028ae:	0692      	lsls	r2, r2, #26
 80028b0:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028b4:	fa93 f7a3 	rbit	r7, r3
  return __builtin_clz(value);
 80028b8:	fab7 f787 	clz	r7, r7
 80028bc:	3701      	adds	r7, #1
 80028be:	f007 071f 	and.w	r7, r7, #31
 80028c2:	2101      	movs	r1, #1
 80028c4:	40b9      	lsls	r1, r7
 80028c6:	e773      	b.n	80027b0 <HAL_ADC_ConfigChannel+0x104>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028c8:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
 80028cc:	fab3 f383 	clz	r3, r3
 80028d0:	e773      	b.n	80027ba <HAL_ADC_ConfigChannel+0x10e>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028d2:	fa93 f2a3 	rbit	r2, r3
  return __builtin_clz(value);
 80028d6:	fab2 f282 	clz	r2, r2
 80028da:	3201      	adds	r2, #1
 80028dc:	0692      	lsls	r2, r2, #26
 80028de:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028e2:	fa93 f7a3 	rbit	r7, r3
  return __builtin_clz(value);
 80028e6:	fab7 f787 	clz	r7, r7
 80028ea:	3701      	adds	r7, #1
 80028ec:	f007 071f 	and.w	r7, r7, #31
 80028f0:	2101      	movs	r1, #1
 80028f2:	40b9      	lsls	r1, r7
 80028f4:	4311      	orrs	r1, r2
 80028f6:	b950      	cbnz	r0, 800290e <HAL_ADC_ConfigChannel+0x262>
 80028f8:	0e9b      	lsrs	r3, r3, #26
 80028fa:	3301      	adds	r3, #1
 80028fc:	f003 031f 	and.w	r3, r3, #31
 8002900:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8002904:	3b1e      	subs	r3, #30
 8002906:	051b      	lsls	r3, r3, #20
 8002908:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800290c:	e75b      	b.n	80027c6 <HAL_ADC_ConfigChannel+0x11a>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800290e:	fa93 f2a3 	rbit	r2, r3
  return __builtin_clz(value);
 8002912:	fab2 f282 	clz	r2, r2
 8002916:	3201      	adds	r2, #1
 8002918:	f002 021f 	and.w	r2, r2, #31
 800291c:	2303      	movs	r3, #3
 800291e:	f06f 001d 	mvn.w	r0, #29
 8002922:	fb13 0302 	smlabb	r3, r3, r2, r0
 8002926:	e7ee      	b.n	8002906 <HAL_ADC_ConfigChannel+0x25a>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002928:	4b23      	ldr	r3, [pc, #140]	; (80029b8 <HAL_ADC_ConfigChannel+0x30c>)
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800292a:	4e24      	ldr	r6, [pc, #144]	; (80029bc <HAL_ADC_ConfigChannel+0x310>)
 800292c:	6898      	ldr	r0, [r3, #8]
 800292e:	42b2      	cmp	r2, r6
 8002930:	f000 71e0 	and.w	r1, r0, #29360128	; 0x1c00000
 8002934:	d121      	bne.n	800297a <HAL_ADC_ConfigChannel+0x2ce>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002936:	0200      	lsls	r0, r0, #8
 8002938:	f53f af4f 	bmi.w	80027da <HAL_ADC_ConfigChannel+0x12e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800293c:	4a20      	ldr	r2, [pc, #128]	; (80029c0 <HAL_ADC_ConfigChannel+0x314>)
 800293e:	4294      	cmp	r4, r2
 8002940:	d004      	beq.n	800294c <HAL_ADC_ConfigChannel+0x2a0>
 8002942:	f502 7200 	add.w	r2, r2, #512	; 0x200
 8002946:	4294      	cmp	r4, r2
 8002948:	f47f af47 	bne.w	80027da <HAL_ADC_ConfigChannel+0x12e>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800294c:	689a      	ldr	r2, [r3, #8]
 800294e:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8002952:	430a      	orrs	r2, r1
 8002954:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002958:	609a      	str	r2, [r3, #8]
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800295a:	4b1a      	ldr	r3, [pc, #104]	; (80029c4 <HAL_ADC_ConfigChannel+0x318>)
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	4b1a      	ldr	r3, [pc, #104]	; (80029c8 <HAL_ADC_ConfigChannel+0x31c>)
 8002960:	fbb2 f2f3 	udiv	r2, r2, r3
 8002964:	230c      	movs	r3, #12
 8002966:	fb02 3303 	mla	r3, r2, r3, r3
            wait_loop_index--;
 800296a:	9301      	str	r3, [sp, #4]
          while (wait_loop_index != 0UL)
 800296c:	9b01      	ldr	r3, [sp, #4]
 800296e:	2b00      	cmp	r3, #0
 8002970:	f43f af33 	beq.w	80027da <HAL_ADC_ConfigChannel+0x12e>
            wait_loop_index--;
 8002974:	9b01      	ldr	r3, [sp, #4]
 8002976:	3b01      	subs	r3, #1
 8002978:	e7f7      	b.n	800296a <HAL_ADC_ConfigChannel+0x2be>
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800297a:	4e14      	ldr	r6, [pc, #80]	; (80029cc <HAL_ADC_ConfigChannel+0x320>)
 800297c:	42b2      	cmp	r2, r6
 800297e:	d129      	bne.n	80029d4 <HAL_ADC_ConfigChannel+0x328>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002980:	01c2      	lsls	r2, r0, #7
 8002982:	f53f af2a 	bmi.w	80027da <HAL_ADC_ConfigChannel+0x12e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002986:	4a0e      	ldr	r2, [pc, #56]	; (80029c0 <HAL_ADC_ConfigChannel+0x314>)
 8002988:	4294      	cmp	r4, r2
 800298a:	d004      	beq.n	8002996 <HAL_ADC_ConfigChannel+0x2ea>
 800298c:	f502 7200 	add.w	r2, r2, #512	; 0x200
 8002990:	4294      	cmp	r4, r2
 8002992:	f47f af22 	bne.w	80027da <HAL_ADC_ConfigChannel+0x12e>
 8002996:	689a      	ldr	r2, [r3, #8]
 8002998:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 800299c:	430a      	orrs	r2, r1
 800299e:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80029a2:	609a      	str	r2, [r3, #8]
 80029a4:	e719      	b.n	80027da <HAL_ADC_ConfigChannel+0x12e>
 80029a6:	bf00      	nop
 80029a8:	080094bc 	.word	0x080094bc
 80029ac:	0007ffff 	.word	0x0007ffff
 80029b0:	407f0000 	.word	0x407f0000
 80029b4:	80080000 	.word	0x80080000
 80029b8:	50040300 	.word	0x50040300
 80029bc:	c7520000 	.word	0xc7520000
 80029c0:	50040000 	.word	0x50040000
 80029c4:	20000000 	.word	0x20000000
 80029c8:	00030d40 	.word	0x00030d40
 80029cc:	cb840000 	.word	0xcb840000
 80029d0:	03fff000 	.word	0x03fff000
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80029d4:	4e0d      	ldr	r6, [pc, #52]	; (8002a0c <HAL_ADC_ConfigChannel+0x360>)
 80029d6:	42b2      	cmp	r2, r6
 80029d8:	f47f aeff 	bne.w	80027da <HAL_ADC_ConfigChannel+0x12e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80029dc:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
 80029e0:	f47f aefb 	bne.w	80027da <HAL_ADC_ConfigChannel+0x12e>
        if (ADC_VREFINT_INSTANCE(hadc))
 80029e4:	4a0a      	ldr	r2, [pc, #40]	; (8002a10 <HAL_ADC_ConfigChannel+0x364>)
 80029e6:	4294      	cmp	r4, r2
 80029e8:	f47f aef7 	bne.w	80027da <HAL_ADC_ConfigChannel+0x12e>
 80029ec:	689a      	ldr	r2, [r3, #8]
 80029ee:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 80029f2:	430a      	orrs	r2, r1
 80029f4:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80029f8:	609a      	str	r2, [r3, #8]
}
 80029fa:	e6ef      	b.n	80027dc <HAL_ADC_ConfigChannel+0x130>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029fc:	6d6a      	ldr	r2, [r5, #84]	; 0x54
 80029fe:	f042 0220 	orr.w	r2, r2, #32
 8002a02:	656a      	str	r2, [r5, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 8002a04:	4618      	mov	r0, r3
 8002a06:	e6e9      	b.n	80027dc <HAL_ADC_ConfigChannel+0x130>
  __HAL_LOCK(hadc);
 8002a08:	2002      	movs	r0, #2
 8002a0a:	e6ea      	b.n	80027e2 <HAL_ADC_ConfigChannel+0x136>
 8002a0c:	80000001 	.word	0x80000001
 8002a10:	50040000 	.word	0x50040000

08002a14 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002a14:	b573      	push	{r0, r1, r4, r5, r6, lr}

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a16:	6802      	ldr	r2, [r0, #0]
{
 8002a18:	4604      	mov	r4, r0
  __IO uint32_t wait_loop_index = 0UL;
 8002a1a:	2300      	movs	r3, #0
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a1c:	4610      	mov	r0, r2
  __IO uint32_t wait_loop_index = 0UL;
 8002a1e:	9301      	str	r3, [sp, #4]
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a20:	f7ff fc38 	bl	8002294 <LL_ADC_IsEnabled>
 8002a24:	b110      	cbz	r0, 8002a2c <ADC_Enable+0x18>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002a26:	2000      	movs	r0, #0
}
 8002a28:	b002      	add	sp, #8
 8002a2a:	bd70      	pop	{r4, r5, r6, pc}
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002a2c:	6891      	ldr	r1, [r2, #8]
 8002a2e:	4b21      	ldr	r3, [pc, #132]	; (8002ab4 <ADC_Enable+0xa0>)
 8002a30:	4219      	tst	r1, r3
 8002a32:	d009      	beq.n	8002a48 <ADC_Enable+0x34>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a34:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002a36:	f043 0310 	orr.w	r3, r3, #16
 8002a3a:	6563      	str	r3, [r4, #84]	; 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a3c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002a3e:	f043 0301 	orr.w	r3, r3, #1
 8002a42:	65a3      	str	r3, [r4, #88]	; 0x58
          return HAL_ERROR;
 8002a44:	2001      	movs	r0, #1
 8002a46:	e7ef      	b.n	8002a28 <ADC_Enable+0x14>
  MODIFY_REG(ADCx->CR,
 8002a48:	6893      	ldr	r3, [r2, #8]
 8002a4a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002a4e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002a52:	f043 0301 	orr.w	r3, r3, #1
 8002a56:	6093      	str	r3, [r2, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002a58:	4b17      	ldr	r3, [pc, #92]	; (8002ab8 <ADC_Enable+0xa4>)
 8002a5a:	689b      	ldr	r3, [r3, #8]
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002a5c:	0219      	lsls	r1, r3, #8
 8002a5e:	d41a      	bmi.n	8002a96 <ADC_Enable+0x82>
    tickstart = HAL_GetTick();
 8002a60:	f7ff fbee 	bl	8002240 <HAL_GetTick>
  MODIFY_REG(ADCx->CR,
 8002a64:	4e15      	ldr	r6, [pc, #84]	; (8002abc <ADC_Enable+0xa8>)
 8002a66:	4605      	mov	r5, r0
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002a68:	6822      	ldr	r2, [r4, #0]
 8002a6a:	6813      	ldr	r3, [r2, #0]
 8002a6c:	07db      	lsls	r3, r3, #31
 8002a6e:	d4da      	bmi.n	8002a26 <ADC_Enable+0x12>
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a70:	4610      	mov	r0, r2
 8002a72:	f7ff fc0f 	bl	8002294 <LL_ADC_IsEnabled>
 8002a76:	b920      	cbnz	r0, 8002a82 <ADC_Enable+0x6e>
 8002a78:	6893      	ldr	r3, [r2, #8]
 8002a7a:	4033      	ands	r3, r6
 8002a7c:	f043 0301 	orr.w	r3, r3, #1
 8002a80:	6093      	str	r3, [r2, #8]
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002a82:	f7ff fbdd 	bl	8002240 <HAL_GetTick>
 8002a86:	1b40      	subs	r0, r0, r5
 8002a88:	2802      	cmp	r0, #2
 8002a8a:	d9ed      	bls.n	8002a68 <ADC_Enable+0x54>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002a8c:	6823      	ldr	r3, [r4, #0]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	07da      	lsls	r2, r3, #31
 8002a92:	d4e9      	bmi.n	8002a68 <ADC_Enable+0x54>
 8002a94:	e7ce      	b.n	8002a34 <ADC_Enable+0x20>
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002a96:	4b0a      	ldr	r3, [pc, #40]	; (8002ac0 <ADC_Enable+0xac>)
 8002a98:	681a      	ldr	r2, [r3, #0]
 8002a9a:	4b0a      	ldr	r3, [pc, #40]	; (8002ac4 <ADC_Enable+0xb0>)
 8002a9c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002aa0:	230c      	movs	r3, #12
 8002aa2:	fb02 3303 	mla	r3, r2, r3, r3
        wait_loop_index--;
 8002aa6:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 8002aa8:	9b01      	ldr	r3, [sp, #4]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d0d8      	beq.n	8002a60 <ADC_Enable+0x4c>
        wait_loop_index--;
 8002aae:	9b01      	ldr	r3, [sp, #4]
 8002ab0:	3b01      	subs	r3, #1
 8002ab2:	e7f8      	b.n	8002aa6 <ADC_Enable+0x92>
 8002ab4:	8000003f 	.word	0x8000003f
 8002ab8:	50040300 	.word	0x50040300
 8002abc:	7fffffc0 	.word	0x7fffffc0
 8002ac0:	20000000 	.word	0x20000000
 8002ac4:	00030d40 	.word	0x00030d40

08002ac8 <HAL_ADC_Start_IT>:
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002ac8:	4b4e      	ldr	r3, [pc, #312]	; (8002c04 <HAL_ADC_Start_IT+0x13c>)
{
 8002aca:	b570      	push	{r4, r5, r6, lr}
 8002acc:	4604      	mov	r4, r0
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002ace:	6800      	ldr	r0, [r0, #0]
 8002ad0:	689e      	ldr	r6, [r3, #8]
 8002ad2:	f7ff fbe3 	bl	800229c <LL_ADC_REG_IsConversionOngoing>
 8002ad6:	4605      	mov	r5, r0
 8002ad8:	2800      	cmp	r0, #0
 8002ada:	f040 808d 	bne.w	8002bf8 <HAL_ADC_Start_IT+0x130>
    __HAL_LOCK(hadc);
 8002ade:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8002ae2:	2b01      	cmp	r3, #1
 8002ae4:	f000 8088 	beq.w	8002bf8 <HAL_ADC_Start_IT+0x130>
 8002ae8:	2301      	movs	r3, #1
 8002aea:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    tmp_hal_status = ADC_Enable(hadc);
 8002aee:	4620      	mov	r0, r4
 8002af0:	f7ff ff90 	bl	8002a14 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8002af4:	2800      	cmp	r0, #0
 8002af6:	d17c      	bne.n	8002bf2 <HAL_ADC_Start_IT+0x12a>
      ADC_STATE_CLR_SET(hadc->State,
 8002af8:	6d63      	ldr	r3, [r4, #84]	; 0x54
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002afa:	4a43      	ldr	r2, [pc, #268]	; (8002c08 <HAL_ADC_Start_IT+0x140>)
      ADC_STATE_CLR_SET(hadc->State,
 8002afc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002b00:	f023 0301 	bic.w	r3, r3, #1
 8002b04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b08:	6563      	str	r3, [r4, #84]	; 0x54
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002b0a:	6823      	ldr	r3, [r4, #0]
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	f006 011f 	and.w	r1, r6, #31
 8002b12:	d073      	beq.n	8002bfc <HAL_ADC_Start_IT+0x134>
 8002b14:	461a      	mov	r2, r3
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002b16:	6d65      	ldr	r5, [r4, #84]	; 0x54
 8002b18:	f425 1580 	bic.w	r5, r5, #1048576	; 0x100000
 8002b1c:	6565      	str	r5, [r4, #84]	; 0x54
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002b1e:	6d65      	ldr	r5, [r4, #84]	; 0x54
 8002b20:	f415 5580 	ands.w	r5, r5, #4096	; 0x1000
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002b24:	bf1c      	itt	ne
 8002b26:	6da5      	ldrne	r5, [r4, #88]	; 0x58
 8002b28:	f025 0506 	bicne.w	r5, r5, #6
        ADC_CLEAR_ERRORCODE(hadc);
 8002b2c:	65a5      	str	r5, [r4, #88]	; 0x58
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002b2e:	251c      	movs	r5, #28
 8002b30:	601d      	str	r5, [r3, #0]
      __HAL_UNLOCK(hadc);
 8002b32:	2500      	movs	r5, #0
 8002b34:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8002b38:	685d      	ldr	r5, [r3, #4]
 8002b3a:	f025 051c 	bic.w	r5, r5, #28
 8002b3e:	605d      	str	r5, [r3, #4]
      switch (hadc->Init.EOCSelection)
 8002b40:	6965      	ldr	r5, [r4, #20]
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8002b42:	685e      	ldr	r6, [r3, #4]
      switch (hadc->Init.EOCSelection)
 8002b44:	2d08      	cmp	r5, #8
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8002b46:	bf0c      	ite	eq
 8002b48:	f046 0608 	orreq.w	r6, r6, #8
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8002b4c:	f046 0604 	orrne.w	r6, r6, #4
 8002b50:	605e      	str	r6, [r3, #4]
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002b52:	6b66      	ldr	r6, [r4, #52]	; 0x34
 8002b54:	b91e      	cbnz	r6, 8002b5e <HAL_ADC_Start_IT+0x96>
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002b56:	685e      	ldr	r6, [r3, #4]
 8002b58:	f046 0610 	orr.w	r6, r6, #16
 8002b5c:	605e      	str	r6, [r3, #4]
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d005      	beq.n	8002b6e <HAL_ADC_Start_IT+0xa6>
 8002b62:	f240 2621 	movw	r6, #545	; 0x221
 8002b66:	fa26 f101 	lsr.w	r1, r6, r1
 8002b6a:	07ce      	lsls	r6, r1, #31
 8002b6c:	d522      	bpl.n	8002bb4 <HAL_ADC_Start_IT+0xec>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002b6e:	68da      	ldr	r2, [r3, #12]
 8002b70:	0191      	lsls	r1, r2, #6
 8002b72:	d516      	bpl.n	8002ba2 <HAL_ADC_Start_IT+0xda>
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002b74:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8002b76:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8002b7a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002b7e:	6562      	str	r2, [r4, #84]	; 0x54
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8002b80:	685a      	ldr	r2, [r3, #4]
          switch (hadc->Init.EOCSelection)
 8002b82:	2d08      	cmp	r5, #8
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002b84:	bf0b      	itete	eq
 8002b86:	f022 0220 	biceq.w	r2, r2, #32
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8002b8a:	f022 0240 	bicne.w	r2, r2, #64	; 0x40
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002b8e:	605a      	streq	r2, [r3, #4]
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8002b90:	605a      	strne	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8002b92:	bf0b      	itete	eq
 8002b94:	685a      	ldreq	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8002b96:	685a      	ldrne	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8002b98:	f042 0240 	orreq.w	r2, r2, #64	; 0x40
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8002b9c:	f042 0220 	orrne.w	r2, r2, #32
 8002ba0:	605a      	str	r2, [r3, #4]
  MODIFY_REG(ADCx->CR,
 8002ba2:	689a      	ldr	r2, [r3, #8]
 8002ba4:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002ba8:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8002bac:	f042 0204 	orr.w	r2, r2, #4
 8002bb0:	609a      	str	r2, [r3, #8]
}
 8002bb2:	bd70      	pop	{r4, r5, r6, pc}
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002bb4:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8002bb6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8002bba:	6561      	str	r1, [r4, #84]	; 0x54
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002bbc:	68d2      	ldr	r2, [r2, #12]
 8002bbe:	0192      	lsls	r2, r2, #6
 8002bc0:	d5f7      	bpl.n	8002bb2 <HAL_ADC_Start_IT+0xea>
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002bc2:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8002bc4:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8002bc8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002bcc:	6562      	str	r2, [r4, #84]	; 0x54
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8002bce:	685a      	ldr	r2, [r3, #4]
          switch (hadc->Init.EOCSelection)
 8002bd0:	2d08      	cmp	r5, #8
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002bd2:	bf0b      	itete	eq
 8002bd4:	f022 0220 	biceq.w	r2, r2, #32
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8002bd8:	f022 0240 	bicne.w	r2, r2, #64	; 0x40
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002bdc:	605a      	streq	r2, [r3, #4]
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8002bde:	605a      	strne	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8002be0:	bf0b      	itete	eq
 8002be2:	685a      	ldreq	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8002be4:	685a      	ldrne	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8002be6:	f042 0240 	orreq.w	r2, r2, #64	; 0x40
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8002bea:	f042 0220 	orrne.w	r2, r2, #32
 8002bee:	605a      	str	r2, [r3, #4]
              break;
 8002bf0:	e7df      	b.n	8002bb2 <HAL_ADC_Start_IT+0xea>
      __HAL_UNLOCK(hadc);
 8002bf2:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
 8002bf6:	e7dc      	b.n	8002bb2 <HAL_ADC_Start_IT+0xea>
    tmp_hal_status = HAL_BUSY;
 8002bf8:	2002      	movs	r0, #2
 8002bfa:	e7da      	b.n	8002bb2 <HAL_ADC_Start_IT+0xea>
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002bfc:	4a03      	ldr	r2, [pc, #12]	; (8002c0c <HAL_ADC_Start_IT+0x144>)
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002bfe:	2900      	cmp	r1, #0
 8002c00:	d089      	beq.n	8002b16 <HAL_ADC_Start_IT+0x4e>
 8002c02:	e78c      	b.n	8002b1e <HAL_ADC_Start_IT+0x56>
 8002c04:	50040300 	.word	0x50040300
 8002c08:	50040100 	.word	0x50040100
 8002c0c:	50040000 	.word	0x50040000

08002c10 <LL_ADC_IsEnabled>:
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002c10:	6880      	ldr	r0, [r0, #8]
}
 8002c12:	f000 0001 	and.w	r0, r0, #1
 8002c16:	4770      	bx	lr

08002c18 <LL_ADC_REG_IsConversionOngoing>:
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002c18:	6880      	ldr	r0, [r0, #8]
}
 8002c1a:	f3c0 0080 	ubfx	r0, r0, #2, #1
 8002c1e:	4770      	bx	lr

08002c20 <HAL_ADCEx_InjectedConvCpltCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8002c20:	4770      	bx	lr

08002c22 <HAL_ADCEx_InjectedQueueOverflowCallback>:
 8002c22:	4770      	bx	lr

08002c24 <HAL_ADCEx_LevelOutOfWindow2Callback>:
 8002c24:	4770      	bx	lr

08002c26 <HAL_ADCEx_LevelOutOfWindow3Callback>:
 8002c26:	4770      	bx	lr

08002c28 <HAL_ADCEx_EndOfSamplingCallback>:
 8002c28:	4770      	bx	lr
	...

08002c2c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002c2c:	b570      	push	{r4, r5, r6, lr}
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002c2e:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
  if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002c32:	680d      	ldr	r5, [r1, #0]
  __HAL_LOCK(hadc);
 8002c34:	2b01      	cmp	r3, #1
{
 8002c36:	b09a      	sub	sp, #104	; 0x68
 8002c38:	4602      	mov	r2, r0
  __HAL_LOCK(hadc);
 8002c3a:	d05e      	beq.n	8002cfa <HAL_ADCEx_MultiModeConfigChannel+0xce>
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002c42:	6816      	ldr	r6, [r2, #0]
 8002c44:	4c2e      	ldr	r4, [pc, #184]	; (8002d00 <HAL_ADCEx_MultiModeConfigChannel+0xd4>)
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002c46:	2000      	movs	r0, #0
  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002c48:	42a6      	cmp	r6, r4
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002c4a:	9016      	str	r0, [sp, #88]	; 0x58
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002c4c:	9017      	str	r0, [sp, #92]	; 0x5c
  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002c4e:	d10d      	bne.n	8002c6c <HAL_ADCEx_MultiModeConfigChannel+0x40>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002c50:	482c      	ldr	r0, [pc, #176]	; (8002d04 <HAL_ADCEx_MultiModeConfigChannel+0xd8>)
 8002c52:	f7ff ffe1 	bl	8002c18 <LL_ADC_REG_IsConversionOngoing>
 8002c56:	4604      	mov	r4, r0
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002c58:	4630      	mov	r0, r6
 8002c5a:	f7ff ffdd 	bl	8002c18 <LL_ADC_REG_IsConversionOngoing>
 8002c5e:	4320      	orrs	r0, r4
 8002c60:	d00d      	beq.n	8002c7e <HAL_ADCEx_MultiModeConfigChannel+0x52>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c62:	6d51      	ldr	r1, [r2, #84]	; 0x54
 8002c64:	f041 0120 	orr.w	r1, r1, #32
 8002c68:	6551      	str	r1, [r2, #84]	; 0x54
 8002c6a:	e02f      	b.n	8002ccc <HAL_ADCEx_MultiModeConfigChannel+0xa0>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c6c:	6d51      	ldr	r1, [r2, #84]	; 0x54
    __HAL_UNLOCK(hadc);
 8002c6e:	f882 0050 	strb.w	r0, [r2, #80]	; 0x50
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c72:	f041 0120 	orr.w	r1, r1, #32
 8002c76:	6551      	str	r1, [r2, #84]	; 0x54
    return HAL_ERROR;
 8002c78:	4618      	mov	r0, r3
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 8002c7a:	b01a      	add	sp, #104	; 0x68
 8002c7c:	bd70      	pop	{r4, r5, r6, pc}
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002c7e:	4c22      	ldr	r4, [pc, #136]	; (8002d08 <HAL_ADCEx_MultiModeConfigChannel+0xdc>)
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002c80:	68a3      	ldr	r3, [r4, #8]
 8002c82:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002c86:	b31d      	cbz	r5, 8002cd0 <HAL_ADCEx_MultiModeConfigChannel+0xa4>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002c88:	6848      	ldr	r0, [r1, #4]
 8002c8a:	4303      	orrs	r3, r0
 8002c8c:	f892 0030 	ldrb.w	r0, [r2, #48]	; 0x30
 8002c90:	ea43 3340 	orr.w	r3, r3, r0, lsl #13
 8002c94:	60a3      	str	r3, [r4, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002c96:	4630      	mov	r0, r6
 8002c98:	f7ff ffba 	bl	8002c10 <LL_ADC_IsEnabled>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	4819      	ldr	r0, [pc, #100]	; (8002d04 <HAL_ADCEx_MultiModeConfigChannel+0xd8>)
 8002ca0:	f7ff ffb6 	bl	8002c10 <LL_ADC_IsEnabled>
 8002ca4:	4303      	orrs	r3, r0
 8002ca6:	4819      	ldr	r0, [pc, #100]	; (8002d0c <HAL_ADCEx_MultiModeConfigChannel+0xe0>)
 8002ca8:	f7ff ffb2 	bl	8002c10 <LL_ADC_IsEnabled>
 8002cac:	4303      	orrs	r3, r0
 8002cae:	d004      	beq.n	8002cba <HAL_ADCEx_MultiModeConfigChannel+0x8e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002cb0:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
  return tmp_hal_status;
 8002cb8:	e7df      	b.n	8002c7a <HAL_ADCEx_MultiModeConfigChannel+0x4e>
        MODIFY_REG(tmpADC_Common->CCR,
 8002cba:	6889      	ldr	r1, [r1, #8]
 8002cbc:	68a0      	ldr	r0, [r4, #8]
 8002cbe:	430d      	orrs	r5, r1
 8002cc0:	f420 6171 	bic.w	r1, r0, #3856	; 0xf10
 8002cc4:	f021 010f 	bic.w	r1, r1, #15
 8002cc8:	430d      	orrs	r5, r1
 8002cca:	60a5      	str	r5, [r4, #8]
    tmp_hal_status = HAL_ERROR;
 8002ccc:	4618      	mov	r0, r3
 8002cce:	e7f0      	b.n	8002cb2 <HAL_ADCEx_MultiModeConfigChannel+0x86>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002cd0:	60a3      	str	r3, [r4, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002cd2:	4630      	mov	r0, r6
 8002cd4:	f7ff ff9c 	bl	8002c10 <LL_ADC_IsEnabled>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	480a      	ldr	r0, [pc, #40]	; (8002d04 <HAL_ADCEx_MultiModeConfigChannel+0xd8>)
 8002cdc:	f7ff ff98 	bl	8002c10 <LL_ADC_IsEnabled>
 8002ce0:	4303      	orrs	r3, r0
 8002ce2:	480a      	ldr	r0, [pc, #40]	; (8002d0c <HAL_ADCEx_MultiModeConfigChannel+0xe0>)
 8002ce4:	f7ff ff94 	bl	8002c10 <LL_ADC_IsEnabled>
 8002ce8:	4303      	orrs	r3, r0
 8002cea:	d1e1      	bne.n	8002cb0 <HAL_ADCEx_MultiModeConfigChannel+0x84>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002cec:	68a1      	ldr	r1, [r4, #8]
 8002cee:	f421 6171 	bic.w	r1, r1, #3856	; 0xf10
 8002cf2:	f021 010f 	bic.w	r1, r1, #15
 8002cf6:	60a1      	str	r1, [r4, #8]
 8002cf8:	e7e8      	b.n	8002ccc <HAL_ADCEx_MultiModeConfigChannel+0xa0>
  __HAL_LOCK(hadc);
 8002cfa:	2002      	movs	r0, #2
 8002cfc:	e7bd      	b.n	8002c7a <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8002cfe:	bf00      	nop
 8002d00:	50040000 	.word	0x50040000
 8002d04:	50040100 	.word	0x50040100
 8002d08:	50040300 	.word	0x50040300
 8002d0c:	50040200 	.word	0x50040200

08002d10 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d10:	4907      	ldr	r1, [pc, #28]	; (8002d30 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8002d12:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d14:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d18:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d1a:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d1c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d20:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d24:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8002d2c:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8002d2e:	4770      	bx	lr
 8002d30:	e000ed00 	.word	0xe000ed00

08002d34 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d34:	4b16      	ldr	r3, [pc, #88]	; (8002d90 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d36:	b530      	push	{r4, r5, lr}
 8002d38:	68dc      	ldr	r4, [r3, #12]
 8002d3a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d3e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d42:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d44:	2b04      	cmp	r3, #4
 8002d46:	bf28      	it	cs
 8002d48:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d4a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d4c:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d50:	bf8c      	ite	hi
 8002d52:	3c03      	subhi	r4, #3
 8002d54:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d56:	fa05 f303 	lsl.w	r3, r5, r3
 8002d5a:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d5e:	40a5      	lsls	r5, r4
 8002d60:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d64:	40a3      	lsls	r3, r4
  if ((int32_t)(IRQn) >= 0)
 8002d66:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d68:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d6c:	bfac      	ite	ge
 8002d6e:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d72:	4a08      	ldrlt	r2, [pc, #32]	; (8002d94 <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d74:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d78:	bfb8      	it	lt
 8002d7a:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d7e:	b2db      	uxtb	r3, r3
 8002d80:	bfaa      	itet	ge
 8002d82:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d86:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d88:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002d8c:	bd30      	pop	{r4, r5, pc}
 8002d8e:	bf00      	nop
 8002d90:	e000ed00 	.word	0xe000ed00
 8002d94:	e000ed14 	.word	0xe000ed14

08002d98 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002d98:	2800      	cmp	r0, #0
 8002d9a:	db07      	blt.n	8002dac <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d9c:	4a04      	ldr	r2, [pc, #16]	; (8002db0 <HAL_NVIC_EnableIRQ+0x18>)
 8002d9e:	0941      	lsrs	r1, r0, #5
 8002da0:	2301      	movs	r3, #1
 8002da2:	f000 001f 	and.w	r0, r0, #31
 8002da6:	4083      	lsls	r3, r0
 8002da8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002dac:	4770      	bx	lr
 8002dae:	bf00      	nop
 8002db0:	e000e100 	.word	0xe000e100

08002db4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002db4:	3801      	subs	r0, #1
 8002db6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8002dba:	d20b      	bcs.n	8002dd4 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002dbc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dc0:	4a05      	ldr	r2, [pc, #20]	; (8002dd8 <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002dc2:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dc4:	21f0      	movs	r1, #240	; 0xf0
 8002dc6:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002dca:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002dcc:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002dce:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002dd0:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002dd2:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8002dd4:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8002dd6:	4770      	bx	lr
 8002dd8:	e000ed00 	.word	0xe000ed00

08002ddc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ddc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002de0:	f8df 91b0 	ldr.w	r9, [pc, #432]	; 8002f94 <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002de4:	4c69      	ldr	r4, [pc, #420]	; (8002f8c <HAL_GPIO_Init+0x1b0>)
  uint32_t position = 0x00u;
 8002de6:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002de8:	680a      	ldr	r2, [r1, #0]
 8002dea:	fa32 f503 	lsrs.w	r5, r2, r3
 8002dee:	d102      	bne.n	8002df6 <HAL_GPIO_Init+0x1a>
      }
    }

    position++;
  }
}
 8002df0:	b003      	add	sp, #12
 8002df2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002df6:	f04f 0e01 	mov.w	lr, #1
 8002dfa:	fa0e fe03 	lsl.w	lr, lr, r3
    if (iocurrent != 0x00u)
 8002dfe:	ea1e 0202 	ands.w	r2, lr, r2
 8002e02:	f000 8090 	beq.w	8002f26 <HAL_GPIO_Init+0x14a>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002e06:	684d      	ldr	r5, [r1, #4]
 8002e08:	f005 0603 	and.w	r6, r5, #3
 8002e0c:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002e10:	f04f 0c03 	mov.w	ip, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002e14:	1e77      	subs	r7, r6, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002e16:	fa0c fc08 	lsl.w	ip, ip, r8
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002e1a:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002e1c:	ea6f 0c0c 	mvn.w	ip, ip
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002e20:	f200 8083 	bhi.w	8002f2a <HAL_GPIO_Init+0x14e>
        temp = GPIOx->OSPEEDR;
 8002e24:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002e26:	ea07 0a0c 	and.w	sl, r7, ip
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002e2a:	68cf      	ldr	r7, [r1, #12]
 8002e2c:	fa07 f708 	lsl.w	r7, r7, r8
 8002e30:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 8002e34:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8002e36:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002e38:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e3c:	f3c5 1700 	ubfx	r7, r5, #4, #1
 8002e40:	409f      	lsls	r7, r3
 8002e42:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8002e46:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8002e48:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002e4a:	ea07 0e0c 	and.w	lr, r7, ip
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e4e:	688f      	ldr	r7, [r1, #8]
 8002e50:	fa07 f708 	lsl.w	r7, r7, r8
 8002e54:	ea47 070e 	orr.w	r7, r7, lr
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e58:	2e02      	cmp	r6, #2
        GPIOx->PUPDR = temp;
 8002e5a:	60c7      	str	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e5c:	d071      	beq.n	8002f42 <HAL_GPIO_Init+0x166>
      temp = GPIOx->MODER;
 8002e5e:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002e60:	fa06 f608 	lsl.w	r6, r6, r8
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002e64:	ea07 070c 	and.w	r7, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002e68:	433e      	orrs	r6, r7
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002e6a:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      GPIOx->MODER = temp;
 8002e6e:	6006      	str	r6, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002e70:	d059      	beq.n	8002f26 <HAL_GPIO_Init+0x14a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e72:	f8d9 6060 	ldr.w	r6, [r9, #96]	; 0x60
 8002e76:	f046 0601 	orr.w	r6, r6, #1
 8002e7a:	f8c9 6060 	str.w	r6, [r9, #96]	; 0x60
 8002e7e:	f8d9 6060 	ldr.w	r6, [r9, #96]	; 0x60
 8002e82:	f023 0703 	bic.w	r7, r3, #3
 8002e86:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8002e8a:	f006 0601 	and.w	r6, r6, #1
 8002e8e:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8002e92:	9601      	str	r6, [sp, #4]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002e94:	f003 0e03 	and.w	lr, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e98:	9e01      	ldr	r6, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 8002e9a:	68be      	ldr	r6, [r7, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002e9c:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8002ea0:	f04f 0c0f 	mov.w	ip, #15
 8002ea4:	fa0c fc0e 	lsl.w	ip, ip, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002ea8:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002eac:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002eb0:	d05f      	beq.n	8002f72 <HAL_GPIO_Init+0x196>
 8002eb2:	4e37      	ldr	r6, [pc, #220]	; (8002f90 <HAL_GPIO_Init+0x1b4>)
 8002eb4:	42b0      	cmp	r0, r6
 8002eb6:	d05e      	beq.n	8002f76 <HAL_GPIO_Init+0x19a>
 8002eb8:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8002ebc:	42b0      	cmp	r0, r6
 8002ebe:	d05c      	beq.n	8002f7a <HAL_GPIO_Init+0x19e>
 8002ec0:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8002ec4:	42b0      	cmp	r0, r6
 8002ec6:	d05a      	beq.n	8002f7e <HAL_GPIO_Init+0x1a2>
 8002ec8:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8002ecc:	42b0      	cmp	r0, r6
 8002ece:	d058      	beq.n	8002f82 <HAL_GPIO_Init+0x1a6>
 8002ed0:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8002ed4:	42b0      	cmp	r0, r6
 8002ed6:	d056      	beq.n	8002f86 <HAL_GPIO_Init+0x1aa>
 8002ed8:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8002edc:	42b0      	cmp	r0, r6
 8002ede:	bf0c      	ite	eq
 8002ee0:	2606      	moveq	r6, #6
 8002ee2:	2607      	movne	r6, #7
 8002ee4:	fa06 f60e 	lsl.w	r6, r6, lr
 8002ee8:	ea46 060c 	orr.w	r6, r6, ip
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002eec:	60be      	str	r6, [r7, #8]
        temp = EXTI->RTSR1;
 8002eee:	68a6      	ldr	r6, [r4, #8]
        temp &= ~(iocurrent);
 8002ef0:	43d7      	mvns	r7, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002ef2:	f415 1f80 	tst.w	r5, #1048576	; 0x100000
        temp &= ~(iocurrent);
 8002ef6:	bf0c      	ite	eq
 8002ef8:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8002efa:	4316      	orrne	r6, r2
        EXTI->RTSR1 = temp;
 8002efc:	60a6      	str	r6, [r4, #8]
        temp = EXTI->FTSR1;
 8002efe:	68e6      	ldr	r6, [r4, #12]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002f00:	f415 1f00 	tst.w	r5, #2097152	; 0x200000
        temp &= ~(iocurrent);
 8002f04:	bf0c      	ite	eq
 8002f06:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8002f08:	4316      	orrne	r6, r2
        EXTI->FTSR1 = temp;
 8002f0a:	60e6      	str	r6, [r4, #12]
        temp = EXTI->EMR1;
 8002f0c:	6866      	ldr	r6, [r4, #4]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002f0e:	f415 3f00 	tst.w	r5, #131072	; 0x20000
        temp &= ~(iocurrent);
 8002f12:	bf0c      	ite	eq
 8002f14:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8002f16:	4316      	orrne	r6, r2
        EXTI->EMR1 = temp;
 8002f18:	6066      	str	r6, [r4, #4]
        temp = EXTI->IMR1;
 8002f1a:	6826      	ldr	r6, [r4, #0]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002f1c:	03ed      	lsls	r5, r5, #15
        temp &= ~(iocurrent);
 8002f1e:	bf54      	ite	pl
 8002f20:	403e      	andpl	r6, r7
          temp |= iocurrent;
 8002f22:	4316      	orrmi	r6, r2
        EXTI->IMR1 = temp;
 8002f24:	6026      	str	r6, [r4, #0]
    position++;
 8002f26:	3301      	adds	r3, #1
 8002f28:	e75e      	b.n	8002de8 <HAL_GPIO_Init+0xc>
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002f2a:	2e03      	cmp	r6, #3
 8002f2c:	d18c      	bne.n	8002e48 <HAL_GPIO_Init+0x6c>
        temp = GPIOx->ASCR;
 8002f2e:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002f30:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002f34:	f3c5 07c0 	ubfx	r7, r5, #3, #1
 8002f38:	409f      	lsls	r7, r3
 8002f3a:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->ASCR = temp;
 8002f3e:	62c7      	str	r7, [r0, #44]	; 0x2c
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f40:	e78d      	b.n	8002e5e <HAL_GPIO_Init+0x82>
        temp = GPIOx->AFR[position >> 3u];
 8002f42:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8002f46:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002f4a:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 8002f4e:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002f52:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8002f56:	f04f 0e0f 	mov.w	lr, #15
 8002f5a:	fa0e fe0b 	lsl.w	lr, lr, fp
 8002f5e:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002f62:	690f      	ldr	r7, [r1, #16]
 8002f64:	fa07 f70b 	lsl.w	r7, r7, fp
 8002f68:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3u] = temp;
 8002f6c:	f8ca 7020 	str.w	r7, [sl, #32]
 8002f70:	e775      	b.n	8002e5e <HAL_GPIO_Init+0x82>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002f72:	2600      	movs	r6, #0
 8002f74:	e7b6      	b.n	8002ee4 <HAL_GPIO_Init+0x108>
 8002f76:	2601      	movs	r6, #1
 8002f78:	e7b4      	b.n	8002ee4 <HAL_GPIO_Init+0x108>
 8002f7a:	2602      	movs	r6, #2
 8002f7c:	e7b2      	b.n	8002ee4 <HAL_GPIO_Init+0x108>
 8002f7e:	2603      	movs	r6, #3
 8002f80:	e7b0      	b.n	8002ee4 <HAL_GPIO_Init+0x108>
 8002f82:	2604      	movs	r6, #4
 8002f84:	e7ae      	b.n	8002ee4 <HAL_GPIO_Init+0x108>
 8002f86:	2605      	movs	r6, #5
 8002f88:	e7ac      	b.n	8002ee4 <HAL_GPIO_Init+0x108>
 8002f8a:	bf00      	nop
 8002f8c:	40010400 	.word	0x40010400
 8002f90:	48000400 	.word	0x48000400
 8002f94:	40021000 	.word	0x40021000

08002f98 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f98:	b10a      	cbz	r2, 8002f9e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002f9a:	6181      	str	r1, [r0, #24]
 8002f9c:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002f9e:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8002fa0:	4770      	bx	lr
	...

08002fa4 <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002fa4:	4b02      	ldr	r3, [pc, #8]	; (8002fb0 <HAL_PWREx_GetVoltageRange+0xc>)
 8002fa6:	6818      	ldr	r0, [r3, #0]
#endif
}
 8002fa8:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8002fac:	4770      	bx	lr
 8002fae:	bf00      	nop
 8002fb0:	40007000 	.word	0x40007000

08002fb4 <HAL_PWREx_ControlVoltageScaling>:
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002fb4:	4a17      	ldr	r2, [pc, #92]	; (8003014 <HAL_PWREx_ControlVoltageScaling+0x60>)
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002fb6:	6813      	ldr	r3, [r2, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002fb8:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002fbc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002fc0:	d11d      	bne.n	8002ffe <HAL_PWREx_ControlVoltageScaling+0x4a>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002fc2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fc6:	d101      	bne.n	8002fcc <HAL_PWREx_ControlVoltageScaling+0x18>
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002fc8:	2000      	movs	r0, #0
 8002fca:	4770      	bx	lr
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002fcc:	6813      	ldr	r3, [r2, #0]
 8002fce:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002fd2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002fd6:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002fd8:	4b0f      	ldr	r3, [pc, #60]	; (8003018 <HAL_PWREx_ControlVoltageScaling+0x64>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	2132      	movs	r1, #50	; 0x32
 8002fde:	434b      	muls	r3, r1
 8002fe0:	490e      	ldr	r1, [pc, #56]	; (800301c <HAL_PWREx_ControlVoltageScaling+0x68>)
 8002fe2:	fbb3 f3f1 	udiv	r3, r3, r1
 8002fe6:	3301      	adds	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002fe8:	6951      	ldr	r1, [r2, #20]
 8002fea:	0549      	lsls	r1, r1, #21
 8002fec:	d500      	bpl.n	8002ff0 <HAL_PWREx_ControlVoltageScaling+0x3c>
 8002fee:	b923      	cbnz	r3, 8002ffa <HAL_PWREx_ControlVoltageScaling+0x46>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002ff0:	6953      	ldr	r3, [r2, #20]
 8002ff2:	055b      	lsls	r3, r3, #21
 8002ff4:	d5e8      	bpl.n	8002fc8 <HAL_PWREx_ControlVoltageScaling+0x14>
        return HAL_TIMEOUT;
 8002ff6:	2003      	movs	r0, #3
}
 8002ff8:	4770      	bx	lr
        wait_loop_index--;
 8002ffa:	3b01      	subs	r3, #1
 8002ffc:	e7f4      	b.n	8002fe8 <HAL_PWREx_ControlVoltageScaling+0x34>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002ffe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003002:	bf1f      	itttt	ne
 8003004:	6813      	ldrne	r3, [r2, #0]
 8003006:	f423 63c0 	bicne.w	r3, r3, #1536	; 0x600
 800300a:	f443 6380 	orrne.w	r3, r3, #1024	; 0x400
 800300e:	6013      	strne	r3, [r2, #0]
 8003010:	e7da      	b.n	8002fc8 <HAL_PWREx_ControlVoltageScaling+0x14>
 8003012:	bf00      	nop
 8003014:	40007000 	.word	0x40007000
 8003018:	20000000 	.word	0x20000000
 800301c:	000f4240 	.word	0x000f4240

08003020 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003020:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003022:	4d1e      	ldr	r5, [pc, #120]	; (800309c <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 8003024:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8003026:	00da      	lsls	r2, r3, #3
{
 8003028:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800302a:	d518      	bpl.n	800305e <RCC_SetFlashLatencyFromMSIRange+0x3e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800302c:	f7ff ffba 	bl	8002fa4 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003030:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8003034:	d123      	bne.n	800307e <RCC_SetFlashLatencyFromMSIRange+0x5e>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003036:	2c80      	cmp	r4, #128	; 0x80
 8003038:	d929      	bls.n	800308e <RCC_SetFlashLatencyFromMSIRange+0x6e>
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800303a:	2ca0      	cmp	r4, #160	; 0xa0
 800303c:	bf8c      	ite	hi
 800303e:	2402      	movhi	r4, #2
 8003040:	2401      	movls	r4, #1
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003042:	4917      	ldr	r1, [pc, #92]	; (80030a0 <RCC_SetFlashLatencyFromMSIRange+0x80>)
 8003044:	680a      	ldr	r2, [r1, #0]
 8003046:	f022 0207 	bic.w	r2, r2, #7
 800304a:	4322      	orrs	r2, r4
 800304c:	600a      	str	r2, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800304e:	6808      	ldr	r0, [r1, #0]
 8003050:	f000 0007 	and.w	r0, r0, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 8003054:	1b00      	subs	r0, r0, r4
 8003056:	bf18      	it	ne
 8003058:	2001      	movne	r0, #1
 800305a:	b003      	add	sp, #12
 800305c:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 800305e:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8003060:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003064:	65ab      	str	r3, [r5, #88]	; 0x58
 8003066:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8003068:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800306c:	9301      	str	r3, [sp, #4]
 800306e:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8003070:	f7ff ff98 	bl	8002fa4 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8003074:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8003076:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800307a:	65ab      	str	r3, [r5, #88]	; 0x58
 800307c:	e7d8      	b.n	8003030 <RCC_SetFlashLatencyFromMSIRange+0x10>
    if(msirange > RCC_MSIRANGE_8)
 800307e:	2c80      	cmp	r4, #128	; 0x80
 8003080:	d807      	bhi.n	8003092 <RCC_SetFlashLatencyFromMSIRange+0x72>
      if(msirange == RCC_MSIRANGE_8)
 8003082:	d008      	beq.n	8003096 <RCC_SetFlashLatencyFromMSIRange+0x76>
      else if(msirange == RCC_MSIRANGE_7)
 8003084:	f1a4 0370 	sub.w	r3, r4, #112	; 0x70
 8003088:	425c      	negs	r4, r3
 800308a:	415c      	adcs	r4, r3
 800308c:	e7d9      	b.n	8003042 <RCC_SetFlashLatencyFromMSIRange+0x22>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800308e:	2400      	movs	r4, #0
 8003090:	e7d7      	b.n	8003042 <RCC_SetFlashLatencyFromMSIRange+0x22>
      latency = FLASH_LATENCY_3; /* 3WS */
 8003092:	2403      	movs	r4, #3
 8003094:	e7d5      	b.n	8003042 <RCC_SetFlashLatencyFromMSIRange+0x22>
        latency = FLASH_LATENCY_2; /* 2WS */
 8003096:	2402      	movs	r4, #2
 8003098:	e7d3      	b.n	8003042 <RCC_SetFlashLatencyFromMSIRange+0x22>
 800309a:	bf00      	nop
 800309c:	40021000 	.word	0x40021000
 80030a0:	40022000 	.word	0x40022000

080030a4 <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80030a4:	4b22      	ldr	r3, [pc, #136]	; (8003130 <HAL_RCC_GetSysClockFreq+0x8c>)
 80030a6:	689a      	ldr	r2, [r3, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80030a8:	68d9      	ldr	r1, [r3, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80030aa:	f012 020c 	ands.w	r2, r2, #12
 80030ae:	d005      	beq.n	80030bc <HAL_RCC_GetSysClockFreq+0x18>
 80030b0:	2a0c      	cmp	r2, #12
 80030b2:	d115      	bne.n	80030e0 <HAL_RCC_GetSysClockFreq+0x3c>
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80030b4:	f001 0103 	and.w	r1, r1, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80030b8:	2901      	cmp	r1, #1
 80030ba:	d118      	bne.n	80030ee <HAL_RCC_GetSysClockFreq+0x4a>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80030bc:	6819      	ldr	r1, [r3, #0]
    msirange = MSIRangeTable[msirange];
 80030be:	481d      	ldr	r0, [pc, #116]	; (8003134 <HAL_RCC_GetSysClockFreq+0x90>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80030c0:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80030c2:	bf55      	itete	pl
 80030c4:	f8d3 1094 	ldrpl.w	r1, [r3, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80030c8:	6819      	ldrmi	r1, [r3, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80030ca:	f3c1 2103 	ubfxpl	r1, r1, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80030ce:	f3c1 1103 	ubfxmi	r1, r1, #4, #4
    msirange = MSIRangeTable[msirange];
 80030d2:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80030d6:	b34a      	cbz	r2, 800312c <HAL_RCC_GetSysClockFreq+0x88>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80030d8:	2a0c      	cmp	r2, #12
 80030da:	d009      	beq.n	80030f0 <HAL_RCC_GetSysClockFreq+0x4c>
 80030dc:	2000      	movs	r0, #0
  return sysclockfreq;
 80030de:	4770      	bx	lr
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80030e0:	2a04      	cmp	r2, #4
 80030e2:	d022      	beq.n	800312a <HAL_RCC_GetSysClockFreq+0x86>
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80030e4:	2a08      	cmp	r2, #8
 80030e6:	4814      	ldr	r0, [pc, #80]	; (8003138 <HAL_RCC_GetSysClockFreq+0x94>)
 80030e8:	bf18      	it	ne
 80030ea:	2000      	movne	r0, #0
 80030ec:	4770      	bx	lr
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80030ee:	2000      	movs	r0, #0
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80030f0:	68da      	ldr	r2, [r3, #12]
 80030f2:	f002 0203 	and.w	r2, r2, #3
    switch (pllsource)
 80030f6:	2a02      	cmp	r2, #2
 80030f8:	d015      	beq.n	8003126 <HAL_RCC_GetSysClockFreq+0x82>
 80030fa:	490f      	ldr	r1, [pc, #60]	; (8003138 <HAL_RCC_GetSysClockFreq+0x94>)
 80030fc:	2a03      	cmp	r2, #3
 80030fe:	bf08      	it	eq
 8003100:	4608      	moveq	r0, r1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003102:	68d9      	ldr	r1, [r3, #12]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003104:	68da      	ldr	r2, [r3, #12]
 8003106:	f3c2 2206 	ubfx	r2, r2, #8, #7
 800310a:	4342      	muls	r2, r0
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800310c:	68d8      	ldr	r0, [r3, #12]
 800310e:	f3c0 6041 	ubfx	r0, r0, #25, #2
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003112:	f3c1 1102 	ubfx	r1, r1, #4, #3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003116:	3001      	adds	r0, #1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003118:	3101      	adds	r1, #1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800311a:	0040      	lsls	r0, r0, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800311c:	fbb2 f2f1 	udiv	r2, r2, r1
    sysclockfreq = pllvco / pllr;
 8003120:	fbb2 f0f0 	udiv	r0, r2, r0
 8003124:	4770      	bx	lr
      pllvco = HSI_VALUE;
 8003126:	4805      	ldr	r0, [pc, #20]	; (800313c <HAL_RCC_GetSysClockFreq+0x98>)
 8003128:	e7eb      	b.n	8003102 <HAL_RCC_GetSysClockFreq+0x5e>
    sysclockfreq = HSI_VALUE;
 800312a:	4804      	ldr	r0, [pc, #16]	; (800313c <HAL_RCC_GetSysClockFreq+0x98>)
}
 800312c:	4770      	bx	lr
 800312e:	bf00      	nop
 8003130:	40021000 	.word	0x40021000
 8003134:	0800948c 	.word	0x0800948c
 8003138:	007a1200 	.word	0x007a1200
 800313c:	00f42400 	.word	0x00f42400

08003140 <HAL_RCC_OscConfig>:
{
 8003140:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(RCC_OscInitStruct == NULL)
 8003144:	4605      	mov	r5, r0
 8003146:	b918      	cbnz	r0, 8003150 <HAL_RCC_OscConfig+0x10>
    return HAL_ERROR;
 8003148:	2001      	movs	r0, #1
}
 800314a:	b003      	add	sp, #12
 800314c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003150:	4c92      	ldr	r4, [pc, #584]	; (800339c <HAL_RCC_OscConfig+0x25c>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003152:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003154:	68a6      	ldr	r6, [r4, #8]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003156:	68e7      	ldr	r7, [r4, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003158:	06db      	lsls	r3, r3, #27
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800315a:	f006 060c 	and.w	r6, r6, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800315e:	f007 0703 	and.w	r7, r7, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003162:	d53d      	bpl.n	80031e0 <HAL_RCC_OscConfig+0xa0>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003164:	b11e      	cbz	r6, 800316e <HAL_RCC_OscConfig+0x2e>
 8003166:	2e0c      	cmp	r6, #12
 8003168:	d166      	bne.n	8003238 <HAL_RCC_OscConfig+0xf8>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800316a:	2f01      	cmp	r7, #1
 800316c:	d164      	bne.n	8003238 <HAL_RCC_OscConfig+0xf8>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800316e:	6823      	ldr	r3, [r4, #0]
 8003170:	0798      	lsls	r0, r3, #30
 8003172:	d502      	bpl.n	800317a <HAL_RCC_OscConfig+0x3a>
 8003174:	69ab      	ldr	r3, [r5, #24]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d0e6      	beq.n	8003148 <HAL_RCC_OscConfig+0x8>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800317a:	6823      	ldr	r3, [r4, #0]
 800317c:	6a28      	ldr	r0, [r5, #32]
 800317e:	0719      	lsls	r1, r3, #28
 8003180:	bf56      	itet	pl
 8003182:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
 8003186:	6823      	ldrmi	r3, [r4, #0]
 8003188:	091b      	lsrpl	r3, r3, #4
 800318a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800318e:	4298      	cmp	r0, r3
 8003190:	d93b      	bls.n	800320a <HAL_RCC_OscConfig+0xca>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003192:	f7ff ff45 	bl	8003020 <RCC_SetFlashLatencyFromMSIRange>
 8003196:	2800      	cmp	r0, #0
 8003198:	d1d6      	bne.n	8003148 <HAL_RCC_OscConfig+0x8>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800319a:	6823      	ldr	r3, [r4, #0]
 800319c:	f043 0308 	orr.w	r3, r3, #8
 80031a0:	6023      	str	r3, [r4, #0]
 80031a2:	6823      	ldr	r3, [r4, #0]
 80031a4:	6a2a      	ldr	r2, [r5, #32]
 80031a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80031aa:	4313      	orrs	r3, r2
 80031ac:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80031ae:	6863      	ldr	r3, [r4, #4]
 80031b0:	69ea      	ldr	r2, [r5, #28]
 80031b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80031b6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80031ba:	6063      	str	r3, [r4, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80031bc:	f7ff ff72 	bl	80030a4 <HAL_RCC_GetSysClockFreq>
 80031c0:	68a3      	ldr	r3, [r4, #8]
 80031c2:	4a77      	ldr	r2, [pc, #476]	; (80033a0 <HAL_RCC_OscConfig+0x260>)
 80031c4:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80031c8:	5cd3      	ldrb	r3, [r2, r3]
 80031ca:	f003 031f 	and.w	r3, r3, #31
 80031ce:	40d8      	lsrs	r0, r3
 80031d0:	4b74      	ldr	r3, [pc, #464]	; (80033a4 <HAL_RCC_OscConfig+0x264>)
 80031d2:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 80031d4:	4b74      	ldr	r3, [pc, #464]	; (80033a8 <HAL_RCC_OscConfig+0x268>)
 80031d6:	6818      	ldr	r0, [r3, #0]
 80031d8:	f7fe ffea 	bl	80021b0 <HAL_InitTick>
        if(status != HAL_OK)
 80031dc:	2800      	cmp	r0, #0
 80031de:	d1b4      	bne.n	800314a <HAL_RCC_OscConfig+0xa>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031e0:	682b      	ldr	r3, [r5, #0]
 80031e2:	07d8      	lsls	r0, r3, #31
 80031e4:	d45f      	bmi.n	80032a6 <HAL_RCC_OscConfig+0x166>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031e6:	682b      	ldr	r3, [r5, #0]
 80031e8:	0799      	lsls	r1, r3, #30
 80031ea:	f100 809e 	bmi.w	800332a <HAL_RCC_OscConfig+0x1ea>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031ee:	682b      	ldr	r3, [r5, #0]
 80031f0:	0718      	lsls	r0, r3, #28
 80031f2:	f100 80db 	bmi.w	80033ac <HAL_RCC_OscConfig+0x26c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031f6:	682b      	ldr	r3, [r5, #0]
 80031f8:	0759      	lsls	r1, r3, #29
 80031fa:	f100 8101 	bmi.w	8003400 <HAL_RCC_OscConfig+0x2c0>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80031fe:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8003200:	2b00      	cmp	r3, #0
 8003202:	f040 816a 	bne.w	80034da <HAL_RCC_OscConfig+0x39a>
  return HAL_OK;
 8003206:	2000      	movs	r0, #0
 8003208:	e79f      	b.n	800314a <HAL_RCC_OscConfig+0xa>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800320a:	6823      	ldr	r3, [r4, #0]
 800320c:	f043 0308 	orr.w	r3, r3, #8
 8003210:	6023      	str	r3, [r4, #0]
 8003212:	6823      	ldr	r3, [r4, #0]
 8003214:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003218:	4303      	orrs	r3, r0
 800321a:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800321c:	6863      	ldr	r3, [r4, #4]
 800321e:	69ea      	ldr	r2, [r5, #28]
 8003220:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003224:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003228:	6063      	str	r3, [r4, #4]
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800322a:	2e00      	cmp	r6, #0
 800322c:	d1c6      	bne.n	80031bc <HAL_RCC_OscConfig+0x7c>
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800322e:	f7ff fef7 	bl	8003020 <RCC_SetFlashLatencyFromMSIRange>
 8003232:	2800      	cmp	r0, #0
 8003234:	d0c2      	beq.n	80031bc <HAL_RCC_OscConfig+0x7c>
 8003236:	e787      	b.n	8003148 <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003238:	69ab      	ldr	r3, [r5, #24]
 800323a:	b31b      	cbz	r3, 8003284 <HAL_RCC_OscConfig+0x144>
        __HAL_RCC_MSI_ENABLE();
 800323c:	6823      	ldr	r3, [r4, #0]
 800323e:	f043 0301 	orr.w	r3, r3, #1
 8003242:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003244:	f7fe fffc 	bl	8002240 <HAL_GetTick>
 8003248:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800324a:	6823      	ldr	r3, [r4, #0]
 800324c:	079a      	lsls	r2, r3, #30
 800324e:	d511      	bpl.n	8003274 <HAL_RCC_OscConfig+0x134>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003250:	6823      	ldr	r3, [r4, #0]
 8003252:	f043 0308 	orr.w	r3, r3, #8
 8003256:	6023      	str	r3, [r4, #0]
 8003258:	6823      	ldr	r3, [r4, #0]
 800325a:	6a2a      	ldr	r2, [r5, #32]
 800325c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003260:	4313      	orrs	r3, r2
 8003262:	6023      	str	r3, [r4, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003264:	6863      	ldr	r3, [r4, #4]
 8003266:	69ea      	ldr	r2, [r5, #28]
 8003268:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800326c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003270:	6063      	str	r3, [r4, #4]
 8003272:	e7b5      	b.n	80031e0 <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003274:	f7fe ffe4 	bl	8002240 <HAL_GetTick>
 8003278:	eba0 0008 	sub.w	r0, r0, r8
 800327c:	2802      	cmp	r0, #2
 800327e:	d9e4      	bls.n	800324a <HAL_RCC_OscConfig+0x10a>
            return HAL_TIMEOUT;
 8003280:	2003      	movs	r0, #3
 8003282:	e762      	b.n	800314a <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_MSI_DISABLE();
 8003284:	6823      	ldr	r3, [r4, #0]
 8003286:	f023 0301 	bic.w	r3, r3, #1
 800328a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800328c:	f7fe ffd8 	bl	8002240 <HAL_GetTick>
 8003290:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003292:	6823      	ldr	r3, [r4, #0]
 8003294:	079b      	lsls	r3, r3, #30
 8003296:	d5a3      	bpl.n	80031e0 <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003298:	f7fe ffd2 	bl	8002240 <HAL_GetTick>
 800329c:	eba0 0008 	sub.w	r0, r0, r8
 80032a0:	2802      	cmp	r0, #2
 80032a2:	d9f6      	bls.n	8003292 <HAL_RCC_OscConfig+0x152>
 80032a4:	e7ec      	b.n	8003280 <HAL_RCC_OscConfig+0x140>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80032a6:	2e08      	cmp	r6, #8
 80032a8:	d003      	beq.n	80032b2 <HAL_RCC_OscConfig+0x172>
 80032aa:	2e0c      	cmp	r6, #12
 80032ac:	d108      	bne.n	80032c0 <HAL_RCC_OscConfig+0x180>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80032ae:	2f03      	cmp	r7, #3
 80032b0:	d106      	bne.n	80032c0 <HAL_RCC_OscConfig+0x180>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032b2:	6823      	ldr	r3, [r4, #0]
 80032b4:	039a      	lsls	r2, r3, #14
 80032b6:	d596      	bpl.n	80031e6 <HAL_RCC_OscConfig+0xa6>
 80032b8:	686b      	ldr	r3, [r5, #4]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d193      	bne.n	80031e6 <HAL_RCC_OscConfig+0xa6>
 80032be:	e743      	b.n	8003148 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032c0:	686b      	ldr	r3, [r5, #4]
 80032c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032c6:	d110      	bne.n	80032ea <HAL_RCC_OscConfig+0x1aa>
 80032c8:	6823      	ldr	r3, [r4, #0]
 80032ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032ce:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80032d0:	f7fe ffb6 	bl	8002240 <HAL_GetTick>
 80032d4:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80032d6:	6823      	ldr	r3, [r4, #0]
 80032d8:	039b      	lsls	r3, r3, #14
 80032da:	d484      	bmi.n	80031e6 <HAL_RCC_OscConfig+0xa6>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032dc:	f7fe ffb0 	bl	8002240 <HAL_GetTick>
 80032e0:	eba0 0008 	sub.w	r0, r0, r8
 80032e4:	2864      	cmp	r0, #100	; 0x64
 80032e6:	d9f6      	bls.n	80032d6 <HAL_RCC_OscConfig+0x196>
 80032e8:	e7ca      	b.n	8003280 <HAL_RCC_OscConfig+0x140>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032ea:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80032ee:	d104      	bne.n	80032fa <HAL_RCC_OscConfig+0x1ba>
 80032f0:	6823      	ldr	r3, [r4, #0]
 80032f2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80032f6:	6023      	str	r3, [r4, #0]
 80032f8:	e7e6      	b.n	80032c8 <HAL_RCC_OscConfig+0x188>
 80032fa:	6822      	ldr	r2, [r4, #0]
 80032fc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003300:	6022      	str	r2, [r4, #0]
 8003302:	6822      	ldr	r2, [r4, #0]
 8003304:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003308:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800330a:	2b00      	cmp	r3, #0
 800330c:	d1e0      	bne.n	80032d0 <HAL_RCC_OscConfig+0x190>
        tickstart = HAL_GetTick();
 800330e:	f7fe ff97 	bl	8002240 <HAL_GetTick>
 8003312:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003314:	6823      	ldr	r3, [r4, #0]
 8003316:	0398      	lsls	r0, r3, #14
 8003318:	f57f af65 	bpl.w	80031e6 <HAL_RCC_OscConfig+0xa6>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800331c:	f7fe ff90 	bl	8002240 <HAL_GetTick>
 8003320:	eba0 0008 	sub.w	r0, r0, r8
 8003324:	2864      	cmp	r0, #100	; 0x64
 8003326:	d9f5      	bls.n	8003314 <HAL_RCC_OscConfig+0x1d4>
 8003328:	e7aa      	b.n	8003280 <HAL_RCC_OscConfig+0x140>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800332a:	2e04      	cmp	r6, #4
 800332c:	d003      	beq.n	8003336 <HAL_RCC_OscConfig+0x1f6>
 800332e:	2e0c      	cmp	r6, #12
 8003330:	d110      	bne.n	8003354 <HAL_RCC_OscConfig+0x214>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003332:	2f02      	cmp	r7, #2
 8003334:	d10e      	bne.n	8003354 <HAL_RCC_OscConfig+0x214>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003336:	6823      	ldr	r3, [r4, #0]
 8003338:	0559      	lsls	r1, r3, #21
 800333a:	d503      	bpl.n	8003344 <HAL_RCC_OscConfig+0x204>
 800333c:	68eb      	ldr	r3, [r5, #12]
 800333e:	2b00      	cmp	r3, #0
 8003340:	f43f af02 	beq.w	8003148 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003344:	6863      	ldr	r3, [r4, #4]
 8003346:	692a      	ldr	r2, [r5, #16]
 8003348:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 800334c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8003350:	6063      	str	r3, [r4, #4]
 8003352:	e74c      	b.n	80031ee <HAL_RCC_OscConfig+0xae>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003354:	68eb      	ldr	r3, [r5, #12]
 8003356:	b17b      	cbz	r3, 8003378 <HAL_RCC_OscConfig+0x238>
        __HAL_RCC_HSI_ENABLE();
 8003358:	6823      	ldr	r3, [r4, #0]
 800335a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800335e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003360:	f7fe ff6e 	bl	8002240 <HAL_GetTick>
 8003364:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003366:	6823      	ldr	r3, [r4, #0]
 8003368:	055a      	lsls	r2, r3, #21
 800336a:	d4eb      	bmi.n	8003344 <HAL_RCC_OscConfig+0x204>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800336c:	f7fe ff68 	bl	8002240 <HAL_GetTick>
 8003370:	1bc0      	subs	r0, r0, r7
 8003372:	2802      	cmp	r0, #2
 8003374:	d9f7      	bls.n	8003366 <HAL_RCC_OscConfig+0x226>
 8003376:	e783      	b.n	8003280 <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_DISABLE();
 8003378:	6823      	ldr	r3, [r4, #0]
 800337a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800337e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003380:	f7fe ff5e 	bl	8002240 <HAL_GetTick>
 8003384:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003386:	6823      	ldr	r3, [r4, #0]
 8003388:	055b      	lsls	r3, r3, #21
 800338a:	f57f af30 	bpl.w	80031ee <HAL_RCC_OscConfig+0xae>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800338e:	f7fe ff57 	bl	8002240 <HAL_GetTick>
 8003392:	1bc0      	subs	r0, r0, r7
 8003394:	2802      	cmp	r0, #2
 8003396:	d9f6      	bls.n	8003386 <HAL_RCC_OscConfig+0x246>
 8003398:	e772      	b.n	8003280 <HAL_RCC_OscConfig+0x140>
 800339a:	bf00      	nop
 800339c:	40021000 	.word	0x40021000
 80033a0:	08009472 	.word	0x08009472
 80033a4:	20000000 	.word	0x20000000
 80033a8:	20000008 	.word	0x20000008
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80033ac:	696b      	ldr	r3, [r5, #20]
 80033ae:	b19b      	cbz	r3, 80033d8 <HAL_RCC_OscConfig+0x298>
      __HAL_RCC_LSI_ENABLE();
 80033b0:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 80033b4:	f043 0301 	orr.w	r3, r3, #1
 80033b8:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 80033bc:	f7fe ff40 	bl	8002240 <HAL_GetTick>
 80033c0:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80033c2:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 80033c6:	079a      	lsls	r2, r3, #30
 80033c8:	f53f af15 	bmi.w	80031f6 <HAL_RCC_OscConfig+0xb6>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033cc:	f7fe ff38 	bl	8002240 <HAL_GetTick>
 80033d0:	1bc0      	subs	r0, r0, r7
 80033d2:	2802      	cmp	r0, #2
 80033d4:	d9f5      	bls.n	80033c2 <HAL_RCC_OscConfig+0x282>
 80033d6:	e753      	b.n	8003280 <HAL_RCC_OscConfig+0x140>
      __HAL_RCC_LSI_DISABLE();
 80033d8:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 80033dc:	f023 0301 	bic.w	r3, r3, #1
 80033e0:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 80033e4:	f7fe ff2c 	bl	8002240 <HAL_GetTick>
 80033e8:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80033ea:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 80033ee:	079b      	lsls	r3, r3, #30
 80033f0:	f57f af01 	bpl.w	80031f6 <HAL_RCC_OscConfig+0xb6>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033f4:	f7fe ff24 	bl	8002240 <HAL_GetTick>
 80033f8:	1bc0      	subs	r0, r0, r7
 80033fa:	2802      	cmp	r0, #2
 80033fc:	d9f5      	bls.n	80033ea <HAL_RCC_OscConfig+0x2aa>
 80033fe:	e73f      	b.n	8003280 <HAL_RCC_OscConfig+0x140>
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003400:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003402:	00df      	lsls	r7, r3, #3
 8003404:	d429      	bmi.n	800345a <HAL_RCC_OscConfig+0x31a>
      __HAL_RCC_PWR_CLK_ENABLE();
 8003406:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003408:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800340c:	65a3      	str	r3, [r4, #88]	; 0x58
 800340e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003410:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003414:	9301      	str	r3, [sp, #4]
 8003416:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8003418:	f04f 0801 	mov.w	r8, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800341c:	4f85      	ldr	r7, [pc, #532]	; (8003634 <HAL_RCC_OscConfig+0x4f4>)
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	05d8      	lsls	r0, r3, #23
 8003422:	d51d      	bpl.n	8003460 <HAL_RCC_OscConfig+0x320>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003424:	68ab      	ldr	r3, [r5, #8]
 8003426:	2b01      	cmp	r3, #1
 8003428:	d12b      	bne.n	8003482 <HAL_RCC_OscConfig+0x342>
 800342a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800342e:	f043 0301 	orr.w	r3, r3, #1
 8003432:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      tickstart = HAL_GetTick();
 8003436:	f7fe ff03 	bl	8002240 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800343a:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800343e:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003440:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8003444:	079a      	lsls	r2, r3, #30
 8003446:	d542      	bpl.n	80034ce <HAL_RCC_OscConfig+0x38e>
    if(pwrclkchanged == SET)
 8003448:	f1b8 0f00 	cmp.w	r8, #0
 800344c:	f43f aed7 	beq.w	80031fe <HAL_RCC_OscConfig+0xbe>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003450:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003452:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003456:	65a3      	str	r3, [r4, #88]	; 0x58
 8003458:	e6d1      	b.n	80031fe <HAL_RCC_OscConfig+0xbe>
    FlagStatus       pwrclkchanged = RESET;
 800345a:	f04f 0800 	mov.w	r8, #0
 800345e:	e7dd      	b.n	800341c <HAL_RCC_OscConfig+0x2dc>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003466:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8003468:	f7fe feea 	bl	8002240 <HAL_GetTick>
 800346c:	4681      	mov	r9, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	05d9      	lsls	r1, r3, #23
 8003472:	d4d7      	bmi.n	8003424 <HAL_RCC_OscConfig+0x2e4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003474:	f7fe fee4 	bl	8002240 <HAL_GetTick>
 8003478:	eba0 0009 	sub.w	r0, r0, r9
 800347c:	2802      	cmp	r0, #2
 800347e:	d9f6      	bls.n	800346e <HAL_RCC_OscConfig+0x32e>
 8003480:	e6fe      	b.n	8003280 <HAL_RCC_OscConfig+0x140>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003482:	2b05      	cmp	r3, #5
 8003484:	d106      	bne.n	8003494 <HAL_RCC_OscConfig+0x354>
 8003486:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800348a:	f043 0304 	orr.w	r3, r3, #4
 800348e:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 8003492:	e7ca      	b.n	800342a <HAL_RCC_OscConfig+0x2ea>
 8003494:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8003498:	f022 0201 	bic.w	r2, r2, #1
 800349c:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 80034a0:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 80034a4:	f022 0204 	bic.w	r2, r2, #4
 80034a8:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d1c2      	bne.n	8003436 <HAL_RCC_OscConfig+0x2f6>
      tickstart = HAL_GetTick();
 80034b0:	f7fe fec6 	bl	8002240 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034b4:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80034b8:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80034ba:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80034be:	079b      	lsls	r3, r3, #30
 80034c0:	d5c2      	bpl.n	8003448 <HAL_RCC_OscConfig+0x308>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034c2:	f7fe febd 	bl	8002240 <HAL_GetTick>
 80034c6:	1bc0      	subs	r0, r0, r7
 80034c8:	4548      	cmp	r0, r9
 80034ca:	d9f6      	bls.n	80034ba <HAL_RCC_OscConfig+0x37a>
 80034cc:	e6d8      	b.n	8003280 <HAL_RCC_OscConfig+0x140>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034ce:	f7fe feb7 	bl	8002240 <HAL_GetTick>
 80034d2:	1bc0      	subs	r0, r0, r7
 80034d4:	4548      	cmp	r0, r9
 80034d6:	d9b3      	bls.n	8003440 <HAL_RCC_OscConfig+0x300>
 80034d8:	e6d2      	b.n	8003280 <HAL_RCC_OscConfig+0x140>
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80034da:	2b02      	cmp	r3, #2
 80034dc:	f040 808f 	bne.w	80035fe <HAL_RCC_OscConfig+0x4be>
      pll_config = RCC->PLLCFGR;
 80034e0:	68e3      	ldr	r3, [r4, #12]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80034e2:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 80034e4:	f003 0103 	and.w	r1, r3, #3
 80034e8:	4291      	cmp	r1, r2
 80034ea:	d124      	bne.n	8003536 <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80034ec:	6b29      	ldr	r1, [r5, #48]	; 0x30
 80034ee:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80034f2:	3901      	subs	r1, #1
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80034f4:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 80034f8:	d11d      	bne.n	8003536 <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80034fa:	6b69      	ldr	r1, [r5, #52]	; 0x34
 80034fc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003500:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8003504:	d117      	bne.n	8003536 <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003506:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8003508:	3a07      	subs	r2, #7
 800350a:	f403 3100 	and.w	r1, r3, #131072	; 0x20000
 800350e:	bf18      	it	ne
 8003510:	2201      	movne	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003512:	4291      	cmp	r1, r2
 8003514:	d10f      	bne.n	8003536 <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003516:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8003518:	0852      	lsrs	r2, r2, #1
 800351a:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 800351e:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003520:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8003524:	d107      	bne.n	8003536 <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003526:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8003528:	0852      	lsrs	r2, r2, #1
 800352a:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 800352e:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003530:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 8003534:	d04a      	beq.n	80035cc <HAL_RCC_OscConfig+0x48c>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003536:	2e0c      	cmp	r6, #12
 8003538:	f43f ae06 	beq.w	8003148 <HAL_RCC_OscConfig+0x8>
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800353c:	6823      	ldr	r3, [r4, #0]
 800353e:	015f      	lsls	r7, r3, #5
 8003540:	f53f ae02 	bmi.w	8003148 <HAL_RCC_OscConfig+0x8>
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003544:	6823      	ldr	r3, [r4, #0]
 8003546:	00de      	lsls	r6, r3, #3
 8003548:	f53f adfe 	bmi.w	8003148 <HAL_RCC_OscConfig+0x8>
            __HAL_RCC_PLL_DISABLE();
 800354c:	6823      	ldr	r3, [r4, #0]
 800354e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003552:	6023      	str	r3, [r4, #0]
            tickstart = HAL_GetTick();
 8003554:	f7fe fe74 	bl	8002240 <HAL_GetTick>
 8003558:	4606      	mov	r6, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800355a:	6823      	ldr	r3, [r4, #0]
 800355c:	0198      	lsls	r0, r3, #6
 800355e:	d42f      	bmi.n	80035c0 <HAL_RCC_OscConfig+0x480>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003560:	68e2      	ldr	r2, [r4, #12]
 8003562:	4b35      	ldr	r3, [pc, #212]	; (8003638 <HAL_RCC_OscConfig+0x4f8>)
 8003564:	4013      	ands	r3, r2
 8003566:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8003568:	4313      	orrs	r3, r2
 800356a:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 800356c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003570:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8003572:	3a01      	subs	r2, #1
 8003574:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8003578:	6baa      	ldr	r2, [r5, #56]	; 0x38
 800357a:	0912      	lsrs	r2, r2, #4
 800357c:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 8003580:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8003582:	0852      	lsrs	r2, r2, #1
 8003584:	3a01      	subs	r2, #1
 8003586:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 800358a:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 800358c:	0852      	lsrs	r2, r2, #1
 800358e:	3a01      	subs	r2, #1
 8003590:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8003594:	60e3      	str	r3, [r4, #12]
            __HAL_RCC_PLL_ENABLE();
 8003596:	6823      	ldr	r3, [r4, #0]
 8003598:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800359c:	6023      	str	r3, [r4, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800359e:	68e3      	ldr	r3, [r4, #12]
 80035a0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80035a4:	60e3      	str	r3, [r4, #12]
            tickstart = HAL_GetTick();
 80035a6:	f7fe fe4b 	bl	8002240 <HAL_GetTick>
 80035aa:	4605      	mov	r5, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035ac:	6823      	ldr	r3, [r4, #0]
 80035ae:	0199      	lsls	r1, r3, #6
 80035b0:	f53f ae29 	bmi.w	8003206 <HAL_RCC_OscConfig+0xc6>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035b4:	f7fe fe44 	bl	8002240 <HAL_GetTick>
 80035b8:	1b40      	subs	r0, r0, r5
 80035ba:	2802      	cmp	r0, #2
 80035bc:	d9f6      	bls.n	80035ac <HAL_RCC_OscConfig+0x46c>
 80035be:	e65f      	b.n	8003280 <HAL_RCC_OscConfig+0x140>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035c0:	f7fe fe3e 	bl	8002240 <HAL_GetTick>
 80035c4:	1b80      	subs	r0, r0, r6
 80035c6:	2802      	cmp	r0, #2
 80035c8:	d9c7      	bls.n	800355a <HAL_RCC_OscConfig+0x41a>
 80035ca:	e659      	b.n	8003280 <HAL_RCC_OscConfig+0x140>
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035cc:	6823      	ldr	r3, [r4, #0]
 80035ce:	019a      	lsls	r2, r3, #6
 80035d0:	f53f ae19 	bmi.w	8003206 <HAL_RCC_OscConfig+0xc6>
          __HAL_RCC_PLL_ENABLE();
 80035d4:	6823      	ldr	r3, [r4, #0]
 80035d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80035da:	6023      	str	r3, [r4, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80035dc:	68e3      	ldr	r3, [r4, #12]
 80035de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80035e2:	60e3      	str	r3, [r4, #12]
          tickstart = HAL_GetTick();
 80035e4:	f7fe fe2c 	bl	8002240 <HAL_GetTick>
 80035e8:	4605      	mov	r5, r0
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035ea:	6823      	ldr	r3, [r4, #0]
 80035ec:	019b      	lsls	r3, r3, #6
 80035ee:	f53f ae0a 	bmi.w	8003206 <HAL_RCC_OscConfig+0xc6>
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035f2:	f7fe fe25 	bl	8002240 <HAL_GetTick>
 80035f6:	1b40      	subs	r0, r0, r5
 80035f8:	2802      	cmp	r0, #2
 80035fa:	d9f6      	bls.n	80035ea <HAL_RCC_OscConfig+0x4aa>
 80035fc:	e640      	b.n	8003280 <HAL_RCC_OscConfig+0x140>
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80035fe:	2e0c      	cmp	r6, #12
 8003600:	f43f ada2 	beq.w	8003148 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_PLL_DISABLE();
 8003604:	6823      	ldr	r3, [r4, #0]
 8003606:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800360a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800360c:	f7fe fe18 	bl	8002240 <HAL_GetTick>
 8003610:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003612:	6823      	ldr	r3, [r4, #0]
 8003614:	f013 7300 	ands.w	r3, r3, #33554432	; 0x2000000
 8003618:	d105      	bne.n	8003626 <HAL_RCC_OscConfig+0x4e6>
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800361a:	68e1      	ldr	r1, [r4, #12]
 800361c:	4a07      	ldr	r2, [pc, #28]	; (800363c <HAL_RCC_OscConfig+0x4fc>)
 800361e:	400a      	ands	r2, r1
 8003620:	60e2      	str	r2, [r4, #12]
  return HAL_OK;
 8003622:	4618      	mov	r0, r3
 8003624:	e591      	b.n	800314a <HAL_RCC_OscConfig+0xa>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003626:	f7fe fe0b 	bl	8002240 <HAL_GetTick>
 800362a:	1b40      	subs	r0, r0, r5
 800362c:	2802      	cmp	r0, #2
 800362e:	d9f0      	bls.n	8003612 <HAL_RCC_OscConfig+0x4d2>
 8003630:	e626      	b.n	8003280 <HAL_RCC_OscConfig+0x140>
 8003632:	bf00      	nop
 8003634:	40007000 	.word	0x40007000
 8003638:	f99d808c 	.word	0xf99d808c
 800363c:	feeefffc 	.word	0xfeeefffc

08003640 <HAL_RCC_ClockConfig>:
{
 8003640:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003644:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8003646:	4604      	mov	r4, r0
 8003648:	b910      	cbnz	r0, 8003650 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800364a:	2001      	movs	r0, #1
}
 800364c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003650:	4a4b      	ldr	r2, [pc, #300]	; (8003780 <HAL_RCC_ClockConfig+0x140>)
 8003652:	6813      	ldr	r3, [r2, #0]
 8003654:	f003 0307 	and.w	r3, r3, #7
 8003658:	428b      	cmp	r3, r1
 800365a:	d32c      	bcc.n	80036b6 <HAL_RCC_ClockConfig+0x76>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800365c:	6821      	ldr	r1, [r4, #0]
 800365e:	0788      	lsls	r0, r1, #30
 8003660:	d434      	bmi.n	80036cc <HAL_RCC_ClockConfig+0x8c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003662:	07c9      	lsls	r1, r1, #31
 8003664:	d43f      	bmi.n	80036e6 <HAL_RCC_ClockConfig+0xa6>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003666:	6821      	ldr	r1, [r4, #0]
 8003668:	078a      	lsls	r2, r1, #30
 800366a:	d468      	bmi.n	800373e <HAL_RCC_ClockConfig+0xfe>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800366c:	4a44      	ldr	r2, [pc, #272]	; (8003780 <HAL_RCC_ClockConfig+0x140>)
 800366e:	6813      	ldr	r3, [r2, #0]
 8003670:	f003 0307 	and.w	r3, r3, #7
 8003674:	42ab      	cmp	r3, r5
 8003676:	d86f      	bhi.n	8003758 <HAL_RCC_ClockConfig+0x118>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003678:	f011 0f04 	tst.w	r1, #4
 800367c:	4d41      	ldr	r5, [pc, #260]	; (8003784 <HAL_RCC_ClockConfig+0x144>)
 800367e:	d177      	bne.n	8003770 <HAL_RCC_ClockConfig+0x130>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003680:	070b      	lsls	r3, r1, #28
 8003682:	d506      	bpl.n	8003692 <HAL_RCC_ClockConfig+0x52>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003684:	68ab      	ldr	r3, [r5, #8]
 8003686:	6922      	ldr	r2, [r4, #16]
 8003688:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800368c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8003690:	60ab      	str	r3, [r5, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003692:	f7ff fd07 	bl	80030a4 <HAL_RCC_GetSysClockFreq>
 8003696:	68ab      	ldr	r3, [r5, #8]
 8003698:	4a3b      	ldr	r2, [pc, #236]	; (8003788 <HAL_RCC_ClockConfig+0x148>)
 800369a:	f3c3 1303 	ubfx	r3, r3, #4, #4
}
 800369e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80036a2:	5cd3      	ldrb	r3, [r2, r3]
 80036a4:	f003 031f 	and.w	r3, r3, #31
 80036a8:	40d8      	lsrs	r0, r3
 80036aa:	4b38      	ldr	r3, [pc, #224]	; (800378c <HAL_RCC_ClockConfig+0x14c>)
 80036ac:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 80036ae:	4b38      	ldr	r3, [pc, #224]	; (8003790 <HAL_RCC_ClockConfig+0x150>)
 80036b0:	6818      	ldr	r0, [r3, #0]
 80036b2:	f7fe bd7d 	b.w	80021b0 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036b6:	6813      	ldr	r3, [r2, #0]
 80036b8:	f023 0307 	bic.w	r3, r3, #7
 80036bc:	430b      	orrs	r3, r1
 80036be:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036c0:	6813      	ldr	r3, [r2, #0]
 80036c2:	f003 0307 	and.w	r3, r3, #7
 80036c6:	428b      	cmp	r3, r1
 80036c8:	d1bf      	bne.n	800364a <HAL_RCC_ClockConfig+0xa>
 80036ca:	e7c7      	b.n	800365c <HAL_RCC_ClockConfig+0x1c>
    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80036cc:	4a2d      	ldr	r2, [pc, #180]	; (8003784 <HAL_RCC_ClockConfig+0x144>)
 80036ce:	68a0      	ldr	r0, [r4, #8]
 80036d0:	6893      	ldr	r3, [r2, #8]
 80036d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80036d6:	4298      	cmp	r0, r3
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036d8:	bf81      	itttt	hi
 80036da:	6893      	ldrhi	r3, [r2, #8]
 80036dc:	f023 03f0 	bichi.w	r3, r3, #240	; 0xf0
 80036e0:	4303      	orrhi	r3, r0
 80036e2:	6093      	strhi	r3, [r2, #8]
 80036e4:	e7bd      	b.n	8003662 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80036e6:	6862      	ldr	r2, [r4, #4]
 80036e8:	4e26      	ldr	r6, [pc, #152]	; (8003784 <HAL_RCC_ClockConfig+0x144>)
 80036ea:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036ec:	6833      	ldr	r3, [r6, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80036ee:	d11a      	bne.n	8003726 <HAL_RCC_ClockConfig+0xe6>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036f0:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80036f4:	d0a9      	beq.n	800364a <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80036f6:	68b3      	ldr	r3, [r6, #8]
 80036f8:	f023 0303 	bic.w	r3, r3, #3
 80036fc:	4313      	orrs	r3, r2
 80036fe:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8003700:	f7fe fd9e 	bl	8002240 <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003704:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8003708:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800370a:	68b3      	ldr	r3, [r6, #8]
 800370c:	6862      	ldr	r2, [r4, #4]
 800370e:	f003 030c 	and.w	r3, r3, #12
 8003712:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8003716:	d0a6      	beq.n	8003666 <HAL_RCC_ClockConfig+0x26>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003718:	f7fe fd92 	bl	8002240 <HAL_GetTick>
 800371c:	1bc0      	subs	r0, r0, r7
 800371e:	4540      	cmp	r0, r8
 8003720:	d9f3      	bls.n	800370a <HAL_RCC_ClockConfig+0xca>
        return HAL_TIMEOUT;
 8003722:	2003      	movs	r0, #3
 8003724:	e792      	b.n	800364c <HAL_RCC_ClockConfig+0xc>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003726:	2a02      	cmp	r2, #2
 8003728:	d102      	bne.n	8003730 <HAL_RCC_ClockConfig+0xf0>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800372a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800372e:	e7e1      	b.n	80036f4 <HAL_RCC_ClockConfig+0xb4>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003730:	b912      	cbnz	r2, 8003738 <HAL_RCC_ClockConfig+0xf8>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003732:	f013 0f02 	tst.w	r3, #2
 8003736:	e7dd      	b.n	80036f4 <HAL_RCC_ClockConfig+0xb4>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003738:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800373c:	e7da      	b.n	80036f4 <HAL_RCC_ClockConfig+0xb4>
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800373e:	4a11      	ldr	r2, [pc, #68]	; (8003784 <HAL_RCC_ClockConfig+0x144>)
 8003740:	68a0      	ldr	r0, [r4, #8]
 8003742:	6893      	ldr	r3, [r2, #8]
 8003744:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003748:	4298      	cmp	r0, r3
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800374a:	bf3f      	itttt	cc
 800374c:	6893      	ldrcc	r3, [r2, #8]
 800374e:	f023 03f0 	biccc.w	r3, r3, #240	; 0xf0
 8003752:	4303      	orrcc	r3, r0
 8003754:	6093      	strcc	r3, [r2, #8]
 8003756:	e789      	b.n	800366c <HAL_RCC_ClockConfig+0x2c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003758:	6813      	ldr	r3, [r2, #0]
 800375a:	f023 0307 	bic.w	r3, r3, #7
 800375e:	432b      	orrs	r3, r5
 8003760:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003762:	6813      	ldr	r3, [r2, #0]
 8003764:	f003 0307 	and.w	r3, r3, #7
 8003768:	42ab      	cmp	r3, r5
 800376a:	f47f af6e 	bne.w	800364a <HAL_RCC_ClockConfig+0xa>
 800376e:	e783      	b.n	8003678 <HAL_RCC_ClockConfig+0x38>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003770:	68ab      	ldr	r3, [r5, #8]
 8003772:	68e2      	ldr	r2, [r4, #12]
 8003774:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003778:	4313      	orrs	r3, r2
 800377a:	60ab      	str	r3, [r5, #8]
 800377c:	e780      	b.n	8003680 <HAL_RCC_ClockConfig+0x40>
 800377e:	bf00      	nop
 8003780:	40022000 	.word	0x40022000
 8003784:	40021000 	.word	0x40021000
 8003788:	08009472 	.word	0x08009472
 800378c:	20000000 	.word	0x20000000
 8003790:	20000008 	.word	0x20000008

08003794 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003794:	4b05      	ldr	r3, [pc, #20]	; (80037ac <HAL_RCC_GetPCLK1Freq+0x18>)
 8003796:	4a06      	ldr	r2, [pc, #24]	; (80037b0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8003798:	689b      	ldr	r3, [r3, #8]
 800379a:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800379e:	5cd3      	ldrb	r3, [r2, r3]
 80037a0:	4a04      	ldr	r2, [pc, #16]	; (80037b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80037a2:	6810      	ldr	r0, [r2, #0]
 80037a4:	f003 031f 	and.w	r3, r3, #31
}
 80037a8:	40d8      	lsrs	r0, r3
 80037aa:	4770      	bx	lr
 80037ac:	40021000 	.word	0x40021000
 80037b0:	08009482 	.word	0x08009482
 80037b4:	20000000 	.word	0x20000000

080037b8 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80037b8:	4b05      	ldr	r3, [pc, #20]	; (80037d0 <HAL_RCC_GetPCLK2Freq+0x18>)
 80037ba:	4a06      	ldr	r2, [pc, #24]	; (80037d4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80037bc:	689b      	ldr	r3, [r3, #8]
 80037be:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80037c2:	5cd3      	ldrb	r3, [r2, r3]
 80037c4:	4a04      	ldr	r2, [pc, #16]	; (80037d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80037c6:	6810      	ldr	r0, [r2, #0]
 80037c8:	f003 031f 	and.w	r3, r3, #31
}
 80037cc:	40d8      	lsrs	r0, r3
 80037ce:	4770      	bx	lr
 80037d0:	40021000 	.word	0x40021000
 80037d4:	08009482 	.word	0x08009482
 80037d8:	20000000 	.word	0x20000000

080037dc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80037dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80037de:	4c42      	ldr	r4, [pc, #264]	; (80038e8 <RCCEx_PLLSAI1_Config+0x10c>)
 80037e0:	68e2      	ldr	r2, [r4, #12]
 80037e2:	0793      	lsls	r3, r2, #30
{
 80037e4:	4605      	mov	r5, r0
 80037e6:	460e      	mov	r6, r1
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80037e8:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80037ea:	d029      	beq.n	8003840 <RCCEx_PLLSAI1_Config+0x64>
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80037ec:	68e2      	ldr	r2, [r4, #12]
 80037ee:	f002 0203 	and.w	r2, r2, #3
 80037f2:	4282      	cmp	r2, r0
 80037f4:	d13c      	bne.n	8003870 <RCCEx_PLLSAI1_Config+0x94>
       ||
 80037f6:	2a00      	cmp	r2, #0
 80037f8:	d03a      	beq.n	8003870 <RCCEx_PLLSAI1_Config+0x94>
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80037fa:	68e3      	ldr	r3, [r4, #12]
       ||
 80037fc:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80037fe:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8003802:	3301      	adds	r3, #1
       ||
 8003804:	4293      	cmp	r3, r2
 8003806:	d133      	bne.n	8003870 <RCCEx_PLLSAI1_Config+0x94>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003808:	6823      	ldr	r3, [r4, #0]
 800380a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800380e:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003810:	f7fe fd16 	bl	8002240 <HAL_GetTick>
 8003814:	4607      	mov	r7, r0

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003816:	6823      	ldr	r3, [r4, #0]
 8003818:	011a      	lsls	r2, r3, #4
 800381a:	d432      	bmi.n	8003882 <RCCEx_PLLSAI1_Config+0xa6>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800381c:	68aa      	ldr	r2, [r5, #8]
 800381e:	0212      	lsls	r2, r2, #8
      if(Divider == DIVIDER_P_UPDATE)
 8003820:	2e00      	cmp	r6, #0
 8003822:	d035      	beq.n	8003890 <RCCEx_PLLSAI1_Config+0xb4>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003824:	2e01      	cmp	r6, #1
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003826:	6923      	ldr	r3, [r4, #16]
      else if(Divider == DIVIDER_Q_UPDATE)
 8003828:	d14d      	bne.n	80038c6 <RCCEx_PLLSAI1_Config+0xea>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800382a:	6929      	ldr	r1, [r5, #16]
 800382c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003830:	0849      	lsrs	r1, r1, #1
 8003832:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003836:	3901      	subs	r1, #1
 8003838:	4313      	orrs	r3, r2
 800383a:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
 800383e:	e031      	b.n	80038a4 <RCCEx_PLLSAI1_Config+0xc8>
    switch(PllSai1->PLLSAI1Source)
 8003840:	2802      	cmp	r0, #2
 8003842:	d011      	beq.n	8003868 <RCCEx_PLLSAI1_Config+0x8c>
 8003844:	2803      	cmp	r0, #3
 8003846:	d015      	beq.n	8003874 <RCCEx_PLLSAI1_Config+0x98>
 8003848:	2801      	cmp	r0, #1
 800384a:	d111      	bne.n	8003870 <RCCEx_PLLSAI1_Config+0x94>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800384c:	6822      	ldr	r2, [r4, #0]
 800384e:	0797      	lsls	r7, r2, #30
 8003850:	d51d      	bpl.n	800388e <RCCEx_PLLSAI1_Config+0xb2>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003852:	68e2      	ldr	r2, [r4, #12]
 8003854:	6869      	ldr	r1, [r5, #4]
 8003856:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 800385a:	3901      	subs	r1, #1
 800385c:	ea42 0300 	orr.w	r3, r2, r0
 8003860:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 8003864:	60e3      	str	r3, [r4, #12]
  if(status == HAL_OK)
 8003866:	e7cf      	b.n	8003808 <RCCEx_PLLSAI1_Config+0x2c>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003868:	6822      	ldr	r2, [r4, #0]
 800386a:	f412 6f80 	tst.w	r2, #1024	; 0x400
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800386e:	d1f0      	bne.n	8003852 <RCCEx_PLLSAI1_Config+0x76>
      status = HAL_ERROR;
 8003870:	2001      	movs	r0, #1
 8003872:	e00c      	b.n	800388e <RCCEx_PLLSAI1_Config+0xb2>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003874:	6822      	ldr	r2, [r4, #0]
 8003876:	0391      	lsls	r1, r2, #14
 8003878:	d4eb      	bmi.n	8003852 <RCCEx_PLLSAI1_Config+0x76>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800387a:	6822      	ldr	r2, [r4, #0]
 800387c:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8003880:	e7f5      	b.n	800386e <RCCEx_PLLSAI1_Config+0x92>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003882:	f7fe fcdd 	bl	8002240 <HAL_GetTick>
 8003886:	1bc0      	subs	r0, r0, r7
 8003888:	2802      	cmp	r0, #2
 800388a:	d9c4      	bls.n	8003816 <RCCEx_PLLSAI1_Config+0x3a>
    switch(PllSai1->PLLSAI1Source)
 800388c:	2003      	movs	r0, #3
      }
    }
  }

  return status;
}
 800388e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003890:	6923      	ldr	r3, [r4, #16]
 8003892:	68e9      	ldr	r1, [r5, #12]
 8003894:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003898:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800389c:	0909      	lsrs	r1, r1, #4
 800389e:	4313      	orrs	r3, r2
 80038a0:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80038a4:	6123      	str	r3, [r4, #16]
      __HAL_RCC_PLLSAI1_ENABLE();
 80038a6:	6823      	ldr	r3, [r4, #0]
 80038a8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80038ac:	6023      	str	r3, [r4, #0]
      tickstart = HAL_GetTick();
 80038ae:	f7fe fcc7 	bl	8002240 <HAL_GetTick>
 80038b2:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80038b4:	6823      	ldr	r3, [r4, #0]
 80038b6:	011b      	lsls	r3, r3, #4
 80038b8:	d510      	bpl.n	80038dc <RCCEx_PLLSAI1_Config+0x100>
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80038ba:	6923      	ldr	r3, [r4, #16]
 80038bc:	69aa      	ldr	r2, [r5, #24]
 80038be:	4313      	orrs	r3, r2
 80038c0:	6123      	str	r3, [r4, #16]
 80038c2:	2000      	movs	r0, #0
  return status;
 80038c4:	e7e3      	b.n	800388e <RCCEx_PLLSAI1_Config+0xb2>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80038c6:	6969      	ldr	r1, [r5, #20]
 80038c8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80038cc:	0849      	lsrs	r1, r1, #1
 80038ce:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80038d2:	3901      	subs	r1, #1
 80038d4:	4313      	orrs	r3, r2
 80038d6:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
 80038da:	e7e3      	b.n	80038a4 <RCCEx_PLLSAI1_Config+0xc8>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80038dc:	f7fe fcb0 	bl	8002240 <HAL_GetTick>
 80038e0:	1b80      	subs	r0, r0, r6
 80038e2:	2802      	cmp	r0, #2
 80038e4:	d9e6      	bls.n	80038b4 <RCCEx_PLLSAI1_Config+0xd8>
 80038e6:	e7d1      	b.n	800388c <RCCEx_PLLSAI1_Config+0xb0>
 80038e8:	40021000 	.word	0x40021000

080038ec <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80038ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80038ee:	4c3b      	ldr	r4, [pc, #236]	; (80039dc <RCCEx_PLLSAI2_Config+0xf0>)
 80038f0:	68e2      	ldr	r2, [r4, #12]
 80038f2:	0793      	lsls	r3, r2, #30
{
 80038f4:	4605      	mov	r5, r0
 80038f6:	460e      	mov	r6, r1
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80038f8:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80038fa:	d026      	beq.n	800394a <RCCEx_PLLSAI2_Config+0x5e>
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80038fc:	68e2      	ldr	r2, [r4, #12]
 80038fe:	f002 0203 	and.w	r2, r2, #3
 8003902:	4282      	cmp	r2, r0
 8003904:	d139      	bne.n	800397a <RCCEx_PLLSAI2_Config+0x8e>
       ||
 8003906:	2a00      	cmp	r2, #0
 8003908:	d037      	beq.n	800397a <RCCEx_PLLSAI2_Config+0x8e>
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800390a:	68e3      	ldr	r3, [r4, #12]
       ||
 800390c:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800390e:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8003912:	3301      	adds	r3, #1
       ||
 8003914:	4293      	cmp	r3, r2
 8003916:	d130      	bne.n	800397a <RCCEx_PLLSAI2_Config+0x8e>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003918:	6823      	ldr	r3, [r4, #0]
 800391a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800391e:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003920:	f7fe fc8e 	bl	8002240 <HAL_GetTick>
 8003924:	4607      	mov	r7, r0

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003926:	6823      	ldr	r3, [r4, #0]
 8003928:	009a      	lsls	r2, r3, #2
 800392a:	d42f      	bmi.n	800398c <RCCEx_PLLSAI2_Config+0xa0>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800392c:	68a9      	ldr	r1, [r5, #8]
 800392e:	0209      	lsls	r1, r1, #8
      if(Divider == DIVIDER_P_UPDATE)
 8003930:	b39e      	cbz	r6, 800399a <RCCEx_PLLSAI2_Config+0xae>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003932:	6963      	ldr	r3, [r4, #20]
 8003934:	692a      	ldr	r2, [r5, #16]
 8003936:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800393a:	0852      	lsrs	r2, r2, #1
 800393c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003940:	3a01      	subs	r2, #1
 8003942:	430b      	orrs	r3, r1
 8003944:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8003948:	e031      	b.n	80039ae <RCCEx_PLLSAI2_Config+0xc2>
    switch(PllSai2->PLLSAI2Source)
 800394a:	2802      	cmp	r0, #2
 800394c:	d011      	beq.n	8003972 <RCCEx_PLLSAI2_Config+0x86>
 800394e:	2803      	cmp	r0, #3
 8003950:	d015      	beq.n	800397e <RCCEx_PLLSAI2_Config+0x92>
 8003952:	2801      	cmp	r0, #1
 8003954:	d111      	bne.n	800397a <RCCEx_PLLSAI2_Config+0x8e>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003956:	6822      	ldr	r2, [r4, #0]
 8003958:	0797      	lsls	r7, r2, #30
 800395a:	d51d      	bpl.n	8003998 <RCCEx_PLLSAI2_Config+0xac>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800395c:	68e2      	ldr	r2, [r4, #12]
 800395e:	6869      	ldr	r1, [r5, #4]
 8003960:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 8003964:	3901      	subs	r1, #1
 8003966:	ea42 0300 	orr.w	r3, r2, r0
 800396a:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 800396e:	60e3      	str	r3, [r4, #12]
  if(status == HAL_OK)
 8003970:	e7d2      	b.n	8003918 <RCCEx_PLLSAI2_Config+0x2c>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003972:	6822      	ldr	r2, [r4, #0]
 8003974:	f412 6f80 	tst.w	r2, #1024	; 0x400
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003978:	d1f0      	bne.n	800395c <RCCEx_PLLSAI2_Config+0x70>
      status = HAL_ERROR;
 800397a:	2001      	movs	r0, #1
 800397c:	e00c      	b.n	8003998 <RCCEx_PLLSAI2_Config+0xac>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800397e:	6822      	ldr	r2, [r4, #0]
 8003980:	0391      	lsls	r1, r2, #14
 8003982:	d4eb      	bmi.n	800395c <RCCEx_PLLSAI2_Config+0x70>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003984:	6822      	ldr	r2, [r4, #0]
 8003986:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 800398a:	e7f5      	b.n	8003978 <RCCEx_PLLSAI2_Config+0x8c>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800398c:	f7fe fc58 	bl	8002240 <HAL_GetTick>
 8003990:	1bc0      	subs	r0, r0, r7
 8003992:	2802      	cmp	r0, #2
 8003994:	d9c7      	bls.n	8003926 <RCCEx_PLLSAI2_Config+0x3a>
    switch(PllSai2->PLLSAI2Source)
 8003996:	2003      	movs	r0, #3
      }
    }
  }

  return status;
}
 8003998:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800399a:	6963      	ldr	r3, [r4, #20]
 800399c:	68ea      	ldr	r2, [r5, #12]
 800399e:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80039a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039a6:	0912      	lsrs	r2, r2, #4
 80039a8:	430b      	orrs	r3, r1
 80039aa:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80039ae:	6163      	str	r3, [r4, #20]
      __HAL_RCC_PLLSAI2_ENABLE();
 80039b0:	6823      	ldr	r3, [r4, #0]
 80039b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039b6:	6023      	str	r3, [r4, #0]
      tickstart = HAL_GetTick();
 80039b8:	f7fe fc42 	bl	8002240 <HAL_GetTick>
 80039bc:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80039be:	6823      	ldr	r3, [r4, #0]
 80039c0:	009b      	lsls	r3, r3, #2
 80039c2:	d505      	bpl.n	80039d0 <RCCEx_PLLSAI2_Config+0xe4>
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80039c4:	6963      	ldr	r3, [r4, #20]
 80039c6:	696a      	ldr	r2, [r5, #20]
 80039c8:	4313      	orrs	r3, r2
 80039ca:	6163      	str	r3, [r4, #20]
 80039cc:	2000      	movs	r0, #0
  return status;
 80039ce:	e7e3      	b.n	8003998 <RCCEx_PLLSAI2_Config+0xac>
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80039d0:	f7fe fc36 	bl	8002240 <HAL_GetTick>
 80039d4:	1b80      	subs	r0, r0, r6
 80039d6:	2802      	cmp	r0, #2
 80039d8:	d9f1      	bls.n	80039be <RCCEx_PLLSAI2_Config+0xd2>
 80039da:	e7dc      	b.n	8003996 <RCCEx_PLLSAI2_Config+0xaa>
 80039dc:	40021000 	.word	0x40021000

080039e0 <HAL_RCCEx_PeriphCLKConfig>:
{
 80039e0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80039e4:	6806      	ldr	r6, [r0, #0]
 80039e6:	f416 6600 	ands.w	r6, r6, #2048	; 0x800
{
 80039ea:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80039ec:	d009      	beq.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x22>
    switch(PeriphClkInit->Sai1ClockSelection)
 80039ee:	6e41      	ldr	r1, [r0, #100]	; 0x64
 80039f0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80039f4:	d022      	beq.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80039f6:	d813      	bhi.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x40>
 80039f8:	b331      	cbz	r1, 8003a48 <HAL_RCCEx_PeriphCLKConfig+0x68>
 80039fa:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 80039fe:	d02a      	beq.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003a00:	2601      	movs	r6, #1
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003a02:	6823      	ldr	r3, [r4, #0]
 8003a04:	04d8      	lsls	r0, r3, #19
 8003a06:	d509      	bpl.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x3c>
    switch(PeriphClkInit->Sai2ClockSelection)
 8003a08:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8003a0a:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
 8003a0e:	d02c      	beq.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0x8a>
 8003a10:	d826      	bhi.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x80>
 8003a12:	b381      	cbz	r1, 8003a76 <HAL_RCCEx_PeriphCLKConfig+0x96>
 8003a14:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
 8003a18:	d072      	beq.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x120>
 8003a1a:	2601      	movs	r6, #1
 8003a1c:	4635      	mov	r5, r6
 8003a1e:	e039      	b.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0xb4>
    switch(PeriphClkInit->Sai1ClockSelection)
 8003a20:	f5b1 0f40 	cmp.w	r1, #12582912	; 0xc00000
 8003a24:	d1ec      	bne.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x20>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003a26:	4a3c      	ldr	r2, [pc, #240]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x138>)
 8003a28:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8003a2a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003a2e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8003a32:	430b      	orrs	r3, r1
 8003a34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8003a38:	2600      	movs	r6, #0
 8003a3a:	e7e2      	b.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x22>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003a3c:	4a36      	ldr	r2, [pc, #216]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x138>)
 8003a3e:	68d3      	ldr	r3, [r2, #12]
 8003a40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a44:	60d3      	str	r3, [r2, #12]
    if(ret == HAL_OK)
 8003a46:	e7ee      	b.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x46>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003a48:	3004      	adds	r0, #4
 8003a4a:	f7ff fec7 	bl	80037dc <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003a4e:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8003a50:	2800      	cmp	r0, #0
 8003a52:	d1d6      	bne.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x22>
 8003a54:	e7e7      	b.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x46>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003a56:	2100      	movs	r1, #0
 8003a58:	3020      	adds	r0, #32
 8003a5a:	f7ff ff47 	bl	80038ec <RCCEx_PLLSAI2_Config>
 8003a5e:	e7f6      	b.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x6e>
    switch(PeriphClkInit->Sai2ClockSelection)
 8003a60:	f1b1 7f40 	cmp.w	r1, #50331648	; 0x3000000
 8003a64:	d1d9      	bne.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x3a>
 8003a66:	4635      	mov	r5, r6
 8003a68:	e009      	b.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x9e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003a6a:	4a2b      	ldr	r2, [pc, #172]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x138>)
 8003a6c:	68d3      	ldr	r3, [r2, #12]
 8003a6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a72:	60d3      	str	r3, [r2, #12]
      break;
 8003a74:	e7f7      	b.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x86>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003a76:	1d20      	adds	r0, r4, #4
 8003a78:	f7ff feb0 	bl	80037dc <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003a7c:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003a7e:	2d00      	cmp	r5, #0
 8003a80:	d144      	bne.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x12c>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003a82:	4a25      	ldr	r2, [pc, #148]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x138>)
 8003a84:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8003a86:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003a8a:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8003a8e:	430b      	orrs	r3, r1
 8003a90:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003a94:	6823      	ldr	r3, [r4, #0]
 8003a96:	0399      	lsls	r1, r3, #14
 8003a98:	f140 815d 	bpl.w	8003d56 <HAL_RCCEx_PeriphCLKConfig+0x376>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003a9c:	4f1e      	ldr	r7, [pc, #120]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x138>)
 8003a9e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003aa0:	00da      	lsls	r2, r3, #3
 8003aa2:	d435      	bmi.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x130>
      __HAL_RCC_PWR_CLK_ENABLE();
 8003aa4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003aa6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003aaa:	65bb      	str	r3, [r7, #88]	; 0x58
 8003aac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003aae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ab2:	9301      	str	r3, [sp, #4]
 8003ab4:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8003ab6:	f04f 0801 	mov.w	r8, #1
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003aba:	f8df 9060 	ldr.w	r9, [pc, #96]	; 8003b1c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003abe:	f8d9 3000 	ldr.w	r3, [r9]
 8003ac2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ac6:	f8c9 3000 	str.w	r3, [r9]
    tickstart = HAL_GetTick();
 8003aca:	f7fe fbb9 	bl	8002240 <HAL_GetTick>
 8003ace:	4682      	mov	sl, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003ad0:	f8d9 3000 	ldr.w	r3, [r9]
 8003ad4:	05db      	lsls	r3, r3, #23
 8003ad6:	d523      	bpl.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x140>
    if(ret == HAL_OK)
 8003ad8:	bb4d      	cbnz	r5, 8003b2e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003ada:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003ade:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8003ae2:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8003ae6:	f040 810e 	bne.w	8003d06 <HAL_RCCEx_PeriphCLKConfig+0x326>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003aea:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003aee:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8003af2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003af6:	4313      	orrs	r3, r2
 8003af8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003afc:	4635      	mov	r5, r6
 8003afe:	e016      	b.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003b00:	2100      	movs	r1, #0
 8003b02:	f104 0020 	add.w	r0, r4, #32
 8003b06:	f7ff fef1 	bl	80038ec <RCCEx_PLLSAI2_Config>
 8003b0a:	e7b7      	b.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x9c>
 8003b0c:	462e      	mov	r6, r5
 8003b0e:	e7c1      	b.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0xb4>
    FlagStatus       pwrclkchanged = RESET;
 8003b10:	f04f 0800 	mov.w	r8, #0
 8003b14:	e7d1      	b.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0xda>
 8003b16:	bf00      	nop
 8003b18:	40021000 	.word	0x40021000
 8003b1c:	40007000 	.word	0x40007000
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b20:	f7fe fb8e 	bl	8002240 <HAL_GetTick>
 8003b24:	eba0 000a 	sub.w	r0, r0, sl
 8003b28:	2802      	cmp	r0, #2
 8003b2a:	d9d1      	bls.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0xf0>
        ret = HAL_TIMEOUT;
 8003b2c:	2503      	movs	r5, #3
    if(pwrclkchanged == SET)
 8003b2e:	f1b8 0f00 	cmp.w	r8, #0
 8003b32:	d003      	beq.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x15c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b34:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003b36:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b3a:	65bb      	str	r3, [r7, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003b3c:	6823      	ldr	r3, [r4, #0]
 8003b3e:	07da      	lsls	r2, r3, #31
 8003b40:	d508      	bpl.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0x174>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003b42:	499b      	ldr	r1, [pc, #620]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 8003b44:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8003b46:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8003b4a:	f022 0203 	bic.w	r2, r2, #3
 8003b4e:	4302      	orrs	r2, r0
 8003b50:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003b54:	079f      	lsls	r7, r3, #30
 8003b56:	d508      	bpl.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x18a>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003b58:	4995      	ldr	r1, [pc, #596]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 8003b5a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8003b5c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8003b60:	f022 020c 	bic.w	r2, r2, #12
 8003b64:	4302      	orrs	r2, r0
 8003b66:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003b6a:	075e      	lsls	r6, r3, #29
 8003b6c:	d508      	bpl.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003b6e:	4990      	ldr	r1, [pc, #576]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 8003b70:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8003b72:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8003b76:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8003b7a:	4302      	orrs	r2, r0
 8003b7c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003b80:	0718      	lsls	r0, r3, #28
 8003b82:	d508      	bpl.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003b84:	498a      	ldr	r1, [pc, #552]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 8003b86:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8003b88:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8003b8c:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8003b90:	4302      	orrs	r2, r0
 8003b92:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003b96:	06d9      	lsls	r1, r3, #27
 8003b98:	d508      	bpl.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003b9a:	4985      	ldr	r1, [pc, #532]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 8003b9c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8003b9e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8003ba2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003ba6:	4302      	orrs	r2, r0
 8003ba8:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003bac:	069a      	lsls	r2, r3, #26
 8003bae:	d508      	bpl.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003bb0:	497f      	ldr	r1, [pc, #508]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 8003bb2:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8003bb4:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8003bb8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003bbc:	4302      	orrs	r2, r0
 8003bbe:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003bc2:	059f      	lsls	r7, r3, #22
 8003bc4:	d508      	bpl.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003bc6:	497a      	ldr	r1, [pc, #488]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 8003bc8:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8003bca:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8003bce:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8003bd2:	4302      	orrs	r2, r0
 8003bd4:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003bd8:	055e      	lsls	r6, r3, #21
 8003bda:	d508      	bpl.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0x20e>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003bdc:	4974      	ldr	r1, [pc, #464]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 8003bde:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8003be0:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8003be4:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8003be8:	4302      	orrs	r2, r0
 8003bea:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003bee:	0658      	lsls	r0, r3, #25
 8003bf0:	d508      	bpl.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0x224>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003bf2:	496f      	ldr	r1, [pc, #444]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 8003bf4:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8003bf6:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8003bfa:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8003bfe:	4302      	orrs	r2, r0
 8003c00:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003c04:	0619      	lsls	r1, r3, #24
 8003c06:	d508      	bpl.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x23a>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003c08:	4969      	ldr	r1, [pc, #420]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 8003c0a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003c0c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8003c10:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8003c14:	4302      	orrs	r2, r0
 8003c16:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003c1a:	05da      	lsls	r2, r3, #23
 8003c1c:	d508      	bpl.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x250>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003c1e:	4964      	ldr	r1, [pc, #400]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 8003c20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003c22:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8003c26:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8003c2a:	4302      	orrs	r2, r0
 8003c2c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003c30:	049b      	lsls	r3, r3, #18
 8003c32:	d510      	bpl.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x276>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003c34:	4a5e      	ldr	r2, [pc, #376]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 8003c36:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8003c38:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003c3c:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8003c40:	430b      	orrs	r3, r1
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003c42:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003c46:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003c4a:	f040 8086 	bne.w	8003d5a <HAL_RCCEx_PeriphCLKConfig+0x37a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c4e:	68d3      	ldr	r3, [r2, #12]
 8003c50:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c54:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003c56:	6823      	ldr	r3, [r4, #0]
 8003c58:	031f      	lsls	r7, r3, #12
 8003c5a:	d50f      	bpl.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x29c>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003c5c:	4a54      	ldr	r2, [pc, #336]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 8003c5e:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8003c60:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003c64:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8003c68:	430b      	orrs	r3, r1
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003c6a:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003c6e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003c72:	d17e      	bne.n	8003d72 <HAL_RCCEx_PeriphCLKConfig+0x392>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c74:	68d3      	ldr	r3, [r2, #12]
 8003c76:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c7a:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003c7c:	6823      	ldr	r3, [r4, #0]
 8003c7e:	035e      	lsls	r6, r3, #13
 8003c80:	d50f      	bpl.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003c82:	4a4b      	ldr	r2, [pc, #300]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 8003c84:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8003c86:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003c8a:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8003c8e:	430b      	orrs	r3, r1
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003c90:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003c94:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003c98:	d176      	bne.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c9a:	68d3      	ldr	r3, [r2, #12]
 8003c9c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ca0:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003ca2:	6823      	ldr	r3, [r4, #0]
 8003ca4:	0458      	lsls	r0, r3, #17
 8003ca6:	d512      	bpl.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x2ee>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003ca8:	4941      	ldr	r1, [pc, #260]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 8003caa:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 8003cac:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8003cb0:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8003cb4:	4313      	orrs	r3, r2
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003cb6:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003cba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003cbe:	d16e      	bne.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x3be>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003cc0:	2102      	movs	r1, #2
 8003cc2:	1d20      	adds	r0, r4, #4
 8003cc4:	f7ff fd8a 	bl	80037dc <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8003cc8:	2800      	cmp	r0, #0
 8003cca:	bf18      	it	ne
 8003ccc:	4605      	movne	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003cce:	6822      	ldr	r2, [r4, #0]
 8003cd0:	0411      	lsls	r1, r2, #16
 8003cd2:	d508      	bpl.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0x306>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003cd4:	4936      	ldr	r1, [pc, #216]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 8003cd6:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8003cd8:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8003cdc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003ce0:	4303      	orrs	r3, r0
 8003ce2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003ce6:	03d3      	lsls	r3, r2, #15
 8003ce8:	d509      	bpl.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0x31e>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003cea:	4a31      	ldr	r2, [pc, #196]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 8003cec:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8003cf0:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003cf4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003cf8:	430b      	orrs	r3, r1
 8003cfa:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 8003cfe:	4628      	mov	r0, r5
 8003d00:	b002      	add	sp, #8
 8003d02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003d06:	429a      	cmp	r2, r3
 8003d08:	f43f aeef 	beq.w	8003aea <HAL_RCCEx_PeriphCLKConfig+0x10a>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003d0c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 8003d10:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003d14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d18:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003d1c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003d20:	f422 7140 	bic.w	r1, r2, #768	; 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003d24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003d28:	07d0      	lsls	r0, r2, #31
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003d2a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
        RCC->BDCR = tmpregister;
 8003d2e:	f8c7 1090 	str.w	r1, [r7, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003d32:	f57f aeda 	bpl.w	8003aea <HAL_RCCEx_PeriphCLKConfig+0x10a>
        tickstart = HAL_GetTick();
 8003d36:	f7fe fa83 	bl	8002240 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d3a:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8003d3e:	4605      	mov	r5, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d40:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003d44:	0799      	lsls	r1, r3, #30
 8003d46:	f53f aed0 	bmi.w	8003aea <HAL_RCCEx_PeriphCLKConfig+0x10a>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d4a:	f7fe fa79 	bl	8002240 <HAL_GetTick>
 8003d4e:	1b40      	subs	r0, r0, r5
 8003d50:	4548      	cmp	r0, r9
 8003d52:	d9f5      	bls.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8003d54:	e6ea      	b.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8003d56:	4635      	mov	r5, r6
 8003d58:	e6f0      	b.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x15c>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003d5a:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8003d5e:	f47f af7a 	bne.w	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x276>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003d62:	2101      	movs	r1, #1
 8003d64:	1d20      	adds	r0, r4, #4
 8003d66:	f7ff fd39 	bl	80037dc <RCCEx_PLLSAI1_Config>
        if(ret != HAL_OK)
 8003d6a:	2800      	cmp	r0, #0
 8003d6c:	bf18      	it	ne
 8003d6e:	4605      	movne	r5, r0
 8003d70:	e771      	b.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x276>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003d72:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8003d76:	d181      	bne.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x29c>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003d78:	2101      	movs	r1, #1
 8003d7a:	1d20      	adds	r0, r4, #4
 8003d7c:	f7ff fd2e 	bl	80037dc <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8003d80:	2800      	cmp	r0, #0
 8003d82:	bf18      	it	ne
 8003d84:	4605      	movne	r5, r0
 8003d86:	e779      	b.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x29c>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003d88:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8003d8c:	d189      	bne.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003d8e:	2101      	movs	r1, #1
 8003d90:	1d20      	adds	r0, r4, #4
 8003d92:	f7ff fd23 	bl	80037dc <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8003d96:	2800      	cmp	r0, #0
 8003d98:	bf18      	it	ne
 8003d9a:	4605      	movne	r5, r0
 8003d9c:	e781      	b.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003d9e:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 8003da2:	d194      	bne.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x2ee>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003da4:	2102      	movs	r1, #2
 8003da6:	f104 0020 	add.w	r0, r4, #32
 8003daa:	f7ff fd9f 	bl	80038ec <RCCEx_PLLSAI2_Config>
 8003dae:	e78b      	b.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 8003db0:	40021000 	.word	0x40021000

08003db4 <SPI_WaitFifoStateUntilTimeout.constprop.0>:
  * @param  State Fifo state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8003db4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003db8:	461c      	mov	r4, r3
{
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003dba:	2300      	movs	r3, #0
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8003dbc:	4617      	mov	r7, r2
  __IO uint8_t  tmpreg8 = 0;
 8003dbe:	f88d 3003 	strb.w	r3, [sp, #3]
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8003dc2:	4605      	mov	r5, r0
 8003dc4:	460e      	mov	r6, r1

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003dc6:	f7fe fa3b 	bl	8002240 <HAL_GetTick>
 8003dca:	443c      	add	r4, r7
 8003dcc:	1a24      	subs	r4, r4, r0
  tmp_tickstart = HAL_GetTick();
 8003dce:	f7fe fa37 	bl	8002240 <HAL_GetTick>

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003dd2:	4b29      	ldr	r3, [pc, #164]	; (8003e78 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xc4>)
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003dd4:	f8d5 9000 	ldr.w	r9, [r5]
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	2223      	movs	r2, #35	; 0x23
 8003ddc:	4353      	muls	r3, r2
 8003dde:	0d1b      	lsrs	r3, r3, #20
  tmp_tickstart = HAL_GetTick();
 8003de0:	4680      	mov	r8, r0
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003de2:	4363      	muls	r3, r4

  while ((hspi->Instance->SR & Fifo) != State)
 8003de4:	682a      	ldr	r2, [r5, #0]
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
      {
        tmp_timeout = 0U;
      }
      count--;
 8003de6:	9301      	str	r3, [sp, #4]
  while ((hspi->Instance->SR & Fifo) != State)
 8003de8:	6893      	ldr	r3, [r2, #8]
 8003dea:	4033      	ands	r3, r6
 8003dec:	d101      	bne.n	8003df2 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x3e>
    }
  }

  return HAL_OK;
 8003dee:	4618      	mov	r0, r3
 8003df0:	e038      	b.n	8003e64 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xb0>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003df2:	f5b6 6fc0 	cmp.w	r6, #1536	; 0x600
      tmpreg8 = *ptmpreg8;
 8003df6:	bf01      	itttt	eq
 8003df8:	f899 300c 	ldrbeq.w	r3, [r9, #12]
 8003dfc:	b2db      	uxtbeq	r3, r3
 8003dfe:	f88d 3003 	strbeq.w	r3, [sp, #3]
      UNUSED(tmpreg8);
 8003e02:	f89d 3003 	ldrbeq.w	r3, [sp, #3]
    if (Timeout != HAL_MAX_DELAY)
 8003e06:	1c7b      	adds	r3, r7, #1
 8003e08:	d0ee      	beq.n	8003de8 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x34>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003e0a:	f7fe fa19 	bl	8002240 <HAL_GetTick>
 8003e0e:	eba0 0008 	sub.w	r0, r0, r8
 8003e12:	42a0      	cmp	r0, r4
 8003e14:	d329      	bcc.n	8003e6a <SPI_WaitFifoStateUntilTimeout.constprop.0+0xb6>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003e16:	682b      	ldr	r3, [r5, #0]
 8003e18:	685a      	ldr	r2, [r3, #4]
 8003e1a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003e1e:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e20:	686a      	ldr	r2, [r5, #4]
 8003e22:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8003e26:	d10a      	bne.n	8003e3e <SPI_WaitFifoStateUntilTimeout.constprop.0+0x8a>
 8003e28:	68aa      	ldr	r2, [r5, #8]
 8003e2a:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8003e2e:	d002      	beq.n	8003e36 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x82>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003e30:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8003e34:	d103      	bne.n	8003e3e <SPI_WaitFifoStateUntilTimeout.constprop.0+0x8a>
          __HAL_SPI_DISABLE(hspi);
 8003e36:	681a      	ldr	r2, [r3, #0]
 8003e38:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e3c:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003e3e:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8003e40:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8003e44:	d107      	bne.n	8003e56 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xa2>
          SPI_RESET_CRC(hspi);
 8003e46:	681a      	ldr	r2, [r3, #0]
 8003e48:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003e4c:	601a      	str	r2, [r3, #0]
 8003e4e:	681a      	ldr	r2, [r3, #0]
 8003e50:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003e54:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8003e56:	2301      	movs	r3, #1
 8003e58:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	f885 305c 	strb.w	r3, [r5, #92]	; 0x5c
        return HAL_TIMEOUT;
 8003e62:	2003      	movs	r0, #3
}
 8003e64:	b003      	add	sp, #12
 8003e66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (count == 0U)
 8003e6a:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 8003e6c:	2b00      	cmp	r3, #0
      count--;
 8003e6e:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 8003e70:	bf08      	it	eq
 8003e72:	2400      	moveq	r4, #0
      count--;
 8003e74:	3b01      	subs	r3, #1
 8003e76:	e7b5      	b.n	8003de4 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x30>
 8003e78:	20000000 	.word	0x20000000

08003e7c <SPI_WaitFlagStateUntilTimeout.constprop.0>:
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8003e7c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003e7e:	460e      	mov	r6, r1
 8003e80:	4614      	mov	r4, r2
 8003e82:	4605      	mov	r5, r0
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003e84:	f7fe f9dc 	bl	8002240 <HAL_GetTick>
 8003e88:	4434      	add	r4, r6
 8003e8a:	1a24      	subs	r4, r4, r0
  tmp_tickstart = HAL_GetTick();
 8003e8c:	f7fe f9d8 	bl	8002240 <HAL_GetTick>
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003e90:	4b22      	ldr	r3, [pc, #136]	; (8003f1c <SPI_WaitFlagStateUntilTimeout.constprop.0+0xa0>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f3c3 33cb 	ubfx	r3, r3, #15, #12
  tmp_tickstart = HAL_GetTick();
 8003e98:	4607      	mov	r7, r0
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003e9a:	4363      	muls	r3, r4
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003e9c:	682a      	ldr	r2, [r5, #0]
      count--;
 8003e9e:	9301      	str	r3, [sp, #4]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003ea0:	6893      	ldr	r3, [r2, #8]
 8003ea2:	f013 0380 	ands.w	r3, r3, #128	; 0x80
 8003ea6:	d101      	bne.n	8003eac <SPI_WaitFlagStateUntilTimeout.constprop.0+0x30>
  return HAL_OK;
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	e02d      	b.n	8003f08 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x8c>
    if (Timeout != HAL_MAX_DELAY)
 8003eac:	1c73      	adds	r3, r6, #1
 8003eae:	d0f7      	beq.n	8003ea0 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x24>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003eb0:	f7fe f9c6 	bl	8002240 <HAL_GetTick>
 8003eb4:	1bc0      	subs	r0, r0, r7
 8003eb6:	42a0      	cmp	r0, r4
 8003eb8:	d328      	bcc.n	8003f0c <SPI_WaitFlagStateUntilTimeout.constprop.0+0x90>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003eba:	682b      	ldr	r3, [r5, #0]
 8003ebc:	685a      	ldr	r2, [r3, #4]
 8003ebe:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003ec2:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ec4:	686a      	ldr	r2, [r5, #4]
 8003ec6:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8003eca:	d10a      	bne.n	8003ee2 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x66>
 8003ecc:	68aa      	ldr	r2, [r5, #8]
 8003ece:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8003ed2:	d002      	beq.n	8003eda <SPI_WaitFlagStateUntilTimeout.constprop.0+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003ed4:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8003ed8:	d103      	bne.n	8003ee2 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x66>
          __HAL_SPI_DISABLE(hspi);
 8003eda:	681a      	ldr	r2, [r3, #0]
 8003edc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ee0:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003ee2:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8003ee4:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8003ee8:	d107      	bne.n	8003efa <SPI_WaitFlagStateUntilTimeout.constprop.0+0x7e>
          SPI_RESET_CRC(hspi);
 8003eea:	681a      	ldr	r2, [r3, #0]
 8003eec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003ef0:	601a      	str	r2, [r3, #0]
 8003ef2:	681a      	ldr	r2, [r3, #0]
 8003ef4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003ef8:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8003efa:	2301      	movs	r3, #1
 8003efc:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 8003f00:	2300      	movs	r3, #0
 8003f02:	f885 305c 	strb.w	r3, [r5, #92]	; 0x5c
        return HAL_TIMEOUT;
 8003f06:	2003      	movs	r0, #3
}
 8003f08:	b003      	add	sp, #12
 8003f0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (count == 0U)
 8003f0c:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 8003f0e:	2b00      	cmp	r3, #0
      count--;
 8003f10:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 8003f12:	bf08      	it	eq
 8003f14:	2400      	moveq	r4, #0
      count--;
 8003f16:	3b01      	subs	r3, #1
 8003f18:	e7c0      	b.n	8003e9c <SPI_WaitFlagStateUntilTimeout.constprop.0+0x20>
 8003f1a:	bf00      	nop
 8003f1c:	20000000 	.word	0x20000000

08003f20 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003f20:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003f22:	4613      	mov	r3, r2
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003f24:	9201      	str	r2, [sp, #4]
{
 8003f26:	460d      	mov	r5, r1
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003f28:	460a      	mov	r2, r1
 8003f2a:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
{
 8003f2e:	4604      	mov	r4, r0
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003f30:	f7ff ff40 	bl	8003db4 <SPI_WaitFifoStateUntilTimeout.constprop.0>
 8003f34:	9b01      	ldr	r3, [sp, #4]
 8003f36:	b128      	cbz	r0, 8003f44 <SPI_EndRxTxTransaction+0x24>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f38:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003f3a:	f043 0320 	orr.w	r3, r3, #32
 8003f3e:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8003f40:	2003      	movs	r0, #3
 8003f42:	e010      	b.n	8003f66 <SPI_EndRxTxTransaction+0x46>
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003f44:	461a      	mov	r2, r3
 8003f46:	4629      	mov	r1, r5
 8003f48:	4620      	mov	r0, r4
 8003f4a:	9301      	str	r3, [sp, #4]
 8003f4c:	f7ff ff96 	bl	8003e7c <SPI_WaitFlagStateUntilTimeout.constprop.0>
 8003f50:	9b01      	ldr	r3, [sp, #4]
 8003f52:	2800      	cmp	r0, #0
 8003f54:	d1f0      	bne.n	8003f38 <SPI_EndRxTxTransaction+0x18>
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003f56:	462a      	mov	r2, r5
 8003f58:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003f5c:	4620      	mov	r0, r4
 8003f5e:	f7ff ff29 	bl	8003db4 <SPI_WaitFifoStateUntilTimeout.constprop.0>
 8003f62:	2800      	cmp	r0, #0
 8003f64:	d1e8      	bne.n	8003f38 <SPI_EndRxTxTransaction+0x18>
  }

  return HAL_OK;
}
 8003f66:	b003      	add	sp, #12
 8003f68:	bd30      	pop	{r4, r5, pc}

08003f6a <HAL_SPI_Init>:
{
 8003f6a:	b570      	push	{r4, r5, r6, lr}
  if (hspi == NULL)
 8003f6c:	4604      	mov	r4, r0
 8003f6e:	2800      	cmp	r0, #0
 8003f70:	d05f      	beq.n	8004032 <HAL_SPI_Init+0xc8>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003f72:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d158      	bne.n	800402a <HAL_SPI_Init+0xc0>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003f78:	6842      	ldr	r2, [r0, #4]
 8003f7a:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8003f7e:	d000      	beq.n	8003f82 <HAL_SPI_Init+0x18>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003f80:	61c3      	str	r3, [r0, #28]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f82:	2300      	movs	r3, #0
 8003f84:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8003f86:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8003f8a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003f8e:	b923      	cbnz	r3, 8003f9a <HAL_SPI_Init+0x30>
    hspi->Lock = HAL_UNLOCKED;
 8003f90:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 8003f94:	4620      	mov	r0, r4
 8003f96:	f7fd fdb3 	bl	8001b00 <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 8003f9a:	6825      	ldr	r5, [r4, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003f9c:	68e1      	ldr	r1, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 8003f9e:	2302      	movs	r3, #2
 8003fa0:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 8003fa4:	682b      	ldr	r3, [r5, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003fa6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 8003faa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003fae:	602b      	str	r3, [r5, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003fb0:	f04f 0300 	mov.w	r3, #0
 8003fb4:	d83f      	bhi.n	8004036 <HAL_SPI_Init+0xcc>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003fb6:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003fba:	d000      	beq.n	8003fbe <HAL_SPI_Init+0x54>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003fbc:	62a3      	str	r3, [r4, #40]	; 0x28
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003fbe:	6863      	ldr	r3, [r4, #4]
 8003fc0:	68a6      	ldr	r6, [r4, #8]
 8003fc2:	69a2      	ldr	r2, [r4, #24]
 8003fc4:	f406 4604 	and.w	r6, r6, #33792	; 0x8400
 8003fc8:	f403 7382 	and.w	r3, r3, #260	; 0x104
 8003fcc:	4333      	orrs	r3, r6
 8003fce:	6926      	ldr	r6, [r4, #16]
 8003fd0:	f006 0602 	and.w	r6, r6, #2
 8003fd4:	4333      	orrs	r3, r6
 8003fd6:	6966      	ldr	r6, [r4, #20]
 8003fd8:	f006 0601 	and.w	r6, r6, #1
 8003fdc:	4333      	orrs	r3, r6
 8003fde:	f402 7600 	and.w	r6, r2, #512	; 0x200
 8003fe2:	4333      	orrs	r3, r6
 8003fe4:	69e6      	ldr	r6, [r4, #28]
 8003fe6:	f006 0638 	and.w	r6, r6, #56	; 0x38
 8003fea:	4333      	orrs	r3, r6
 8003fec:	6a26      	ldr	r6, [r4, #32]
 8003fee:	f006 0680 	and.w	r6, r6, #128	; 0x80
 8003ff2:	4333      	orrs	r3, r6
 8003ff4:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003ff6:	f406 5600 	and.w	r6, r6, #8192	; 0x2000
 8003ffa:	4333      	orrs	r3, r6
 8003ffc:	602b      	str	r3, [r5, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003ffe:	6b66      	ldr	r6, [r4, #52]	; 0x34
 8004000:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004002:	f006 0608 	and.w	r6, r6, #8
 8004006:	f003 0310 	and.w	r3, r3, #16
 800400a:	4333      	orrs	r3, r6
 800400c:	f401 6170 	and.w	r1, r1, #3840	; 0xf00
 8004010:	0c12      	lsrs	r2, r2, #16
 8004012:	430b      	orrs	r3, r1
 8004014:	f002 0204 	and.w	r2, r2, #4
 8004018:	4313      	orrs	r3, r2
 800401a:	4303      	orrs	r3, r0
 800401c:	606b      	str	r3, [r5, #4]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800401e:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8004020:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004022:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004024:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
}
 8004028:	bd70      	pop	{r4, r5, r6, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800402a:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800402c:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004030:	e7a7      	b.n	8003f82 <HAL_SPI_Init+0x18>
    return HAL_ERROR;
 8004032:	2001      	movs	r0, #1
 8004034:	e7f8      	b.n	8004028 <HAL_SPI_Init+0xbe>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004036:	4618      	mov	r0, r3
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004038:	f5b1 6f70 	cmp.w	r1, #3840	; 0xf00
 800403c:	e7bd      	b.n	8003fba <HAL_SPI_Init+0x50>

0800403e <HAL_SPI_Transmit>:
{
 800403e:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8004042:	461f      	mov	r7, r3
  __HAL_LOCK(hspi);
 8004044:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 8004048:	2b01      	cmp	r3, #1
{
 800404a:	4604      	mov	r4, r0
 800404c:	460d      	mov	r5, r1
 800404e:	4690      	mov	r8, r2
  __HAL_LOCK(hspi);
 8004050:	f000 80bc 	beq.w	80041cc <HAL_SPI_Transmit+0x18e>
 8004054:	2301      	movs	r3, #1
 8004056:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 800405a:	f7fe f8f1 	bl	8002240 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 800405e:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8004062:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 8004064:	4682      	mov	sl, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8004066:	fa5f f983 	uxtb.w	r9, r3
 800406a:	f040 80ac 	bne.w	80041c6 <HAL_SPI_Transmit+0x188>
  if ((pData == NULL) || (Size == 0U))
 800406e:	2d00      	cmp	r5, #0
 8004070:	d069      	beq.n	8004146 <HAL_SPI_Transmit+0x108>
 8004072:	f1b8 0f00 	cmp.w	r8, #0
 8004076:	d066      	beq.n	8004146 <HAL_SPI_Transmit+0x108>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004078:	2303      	movs	r3, #3
 800407a:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800407e:	2300      	movs	r3, #0
 8004080:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->RxISR       = NULL;
 8004082:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
  hspi->TxXferCount = Size;
 8004086:	f8a4 803e 	strh.w	r8, [r4, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800408a:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800408c:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004090:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004094:	68a3      	ldr	r3, [r4, #8]
    __HAL_SPI_DISABLE(hspi);
 8004096:	6826      	ldr	r6, [r4, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004098:	63a5      	str	r5, [r4, #56]	; 0x38
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800409a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
  hspi->TxXferSize  = Size;
 800409e:	f8a4 803c 	strh.w	r8, [r4, #60]	; 0x3c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80040a2:	d107      	bne.n	80040b4 <HAL_SPI_Transmit+0x76>
    __HAL_SPI_DISABLE(hspi);
 80040a4:	6833      	ldr	r3, [r6, #0]
 80040a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80040aa:	6033      	str	r3, [r6, #0]
    SPI_1LINE_TX(hspi);
 80040ac:	6833      	ldr	r3, [r6, #0]
 80040ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80040b2:	6033      	str	r3, [r6, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80040b4:	6833      	ldr	r3, [r6, #0]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80040b6:	6862      	ldr	r2, [r4, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80040b8:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 80040ba:	bf5e      	ittt	pl
 80040bc:	6833      	ldrpl	r3, [r6, #0]
 80040be:	f043 0340 	orrpl.w	r3, r3, #64	; 0x40
 80040c2:	6033      	strpl	r3, [r6, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80040c4:	68e3      	ldr	r3, [r4, #12]
 80040c6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80040ca:	d943      	bls.n	8004154 <HAL_SPI_Transmit+0x116>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80040cc:	b112      	cbz	r2, 80040d4 <HAL_SPI_Transmit+0x96>
 80040ce:	f1b8 0f01 	cmp.w	r8, #1
 80040d2:	d107      	bne.n	80040e4 <HAL_SPI_Transmit+0xa6>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80040d4:	f835 3b02 	ldrh.w	r3, [r5], #2
 80040d8:	60f3      	str	r3, [r6, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80040da:	63a5      	str	r5, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 80040dc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80040de:	3b01      	subs	r3, #1
 80040e0:	b29b      	uxth	r3, r3
 80040e2:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 80040e4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80040e6:	b29b      	uxth	r3, r3
 80040e8:	b9b3      	cbnz	r3, 8004118 <HAL_SPI_Transmit+0xda>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80040ea:	4652      	mov	r2, sl
 80040ec:	4639      	mov	r1, r7
 80040ee:	4620      	mov	r0, r4
 80040f0:	f7ff ff16 	bl	8003f20 <SPI_EndRxTxTransaction>
 80040f4:	2800      	cmp	r0, #0
 80040f6:	d163      	bne.n	80041c0 <HAL_SPI_Transmit+0x182>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80040f8:	68a3      	ldr	r3, [r4, #8]
 80040fa:	b933      	cbnz	r3, 800410a <HAL_SPI_Transmit+0xcc>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80040fc:	9301      	str	r3, [sp, #4]
 80040fe:	6823      	ldr	r3, [r4, #0]
 8004100:	68da      	ldr	r2, [r3, #12]
 8004102:	9201      	str	r2, [sp, #4]
 8004104:	689b      	ldr	r3, [r3, #8]
 8004106:	9301      	str	r3, [sp, #4]
 8004108:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800410a:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800410c:	b9db      	cbnz	r3, 8004146 <HAL_SPI_Transmit+0x108>
    hspi->State = HAL_SPI_STATE_READY;
 800410e:	2201      	movs	r2, #1
 8004110:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004114:	4699      	mov	r9, r3
 8004116:	e016      	b.n	8004146 <HAL_SPI_Transmit+0x108>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004118:	6822      	ldr	r2, [r4, #0]
 800411a:	6893      	ldr	r3, [r2, #8]
 800411c:	079d      	lsls	r5, r3, #30
 800411e:	d505      	bpl.n	800412c <HAL_SPI_Transmit+0xee>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004120:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004122:	f833 1b02 	ldrh.w	r1, [r3], #2
 8004126:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004128:	63a3      	str	r3, [r4, #56]	; 0x38
 800412a:	e7d7      	b.n	80040dc <HAL_SPI_Transmit+0x9e>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800412c:	f7fe f888 	bl	8002240 <HAL_GetTick>
 8004130:	eba0 000a 	sub.w	r0, r0, sl
 8004134:	42b8      	cmp	r0, r7
 8004136:	d3d5      	bcc.n	80040e4 <HAL_SPI_Transmit+0xa6>
 8004138:	1c78      	adds	r0, r7, #1
 800413a:	d0d3      	beq.n	80040e4 <HAL_SPI_Transmit+0xa6>
          hspi->State = HAL_SPI_STATE_READY;
 800413c:	2301      	movs	r3, #1
 800413e:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
          errorcode = HAL_TIMEOUT;
 8004142:	f04f 0903 	mov.w	r9, #3
  __HAL_UNLOCK(hspi);
 8004146:	2300      	movs	r3, #0
 8004148:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 800414c:	4648      	mov	r0, r9
 800414e:	b002      	add	sp, #8
 8004150:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004154:	b112      	cbz	r2, 800415c <HAL_SPI_Transmit+0x11e>
 8004156:	f1b8 0f01 	cmp.w	r8, #1
 800415a:	d113      	bne.n	8004184 <HAL_SPI_Transmit+0x146>
      if (hspi->TxXferCount > 1U)
 800415c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800415e:	b29b      	uxth	r3, r3
 8004160:	2b01      	cmp	r3, #1
 8004162:	d906      	bls.n	8004172 <HAL_SPI_Transmit+0x134>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004164:	f835 3b02 	ldrh.w	r3, [r5], #2
 8004168:	60f3      	str	r3, [r6, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800416a:	63a5      	str	r5, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800416c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800416e:	3b02      	subs	r3, #2
 8004170:	e006      	b.n	8004180 <HAL_SPI_Transmit+0x142>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004172:	782b      	ldrb	r3, [r5, #0]
 8004174:	7333      	strb	r3, [r6, #12]
        hspi->pTxBuffPtr ++;
 8004176:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004178:	3301      	adds	r3, #1
 800417a:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800417c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800417e:	3b01      	subs	r3, #1
 8004180:	b29b      	uxth	r3, r3
 8004182:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 8004184:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004186:	b29b      	uxth	r3, r3
 8004188:	2b00      	cmp	r3, #0
 800418a:	d0ae      	beq.n	80040ea <HAL_SPI_Transmit+0xac>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800418c:	6822      	ldr	r2, [r4, #0]
 800418e:	6893      	ldr	r3, [r2, #8]
 8004190:	0799      	lsls	r1, r3, #30
 8004192:	d50c      	bpl.n	80041ae <HAL_SPI_Transmit+0x170>
        if (hspi->TxXferCount > 1U)
 8004194:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004196:	6ba3      	ldr	r3, [r4, #56]	; 0x38
        if (hspi->TxXferCount > 1U)
 8004198:	b289      	uxth	r1, r1
 800419a:	2901      	cmp	r1, #1
 800419c:	d904      	bls.n	80041a8 <HAL_SPI_Transmit+0x16a>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800419e:	f833 1b02 	ldrh.w	r1, [r3], #2
 80041a2:	60d1      	str	r1, [r2, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80041a4:	63a3      	str	r3, [r4, #56]	; 0x38
 80041a6:	e7e1      	b.n	800416c <HAL_SPI_Transmit+0x12e>
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80041a8:	781b      	ldrb	r3, [r3, #0]
 80041aa:	7313      	strb	r3, [r2, #12]
          hspi->pTxBuffPtr++;
 80041ac:	e7e3      	b.n	8004176 <HAL_SPI_Transmit+0x138>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80041ae:	f7fe f847 	bl	8002240 <HAL_GetTick>
 80041b2:	eba0 000a 	sub.w	r0, r0, sl
 80041b6:	42b8      	cmp	r0, r7
 80041b8:	d3e4      	bcc.n	8004184 <HAL_SPI_Transmit+0x146>
 80041ba:	1c7b      	adds	r3, r7, #1
 80041bc:	d0e2      	beq.n	8004184 <HAL_SPI_Transmit+0x146>
 80041be:	e7bd      	b.n	800413c <HAL_SPI_Transmit+0xfe>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80041c0:	2320      	movs	r3, #32
 80041c2:	6623      	str	r3, [r4, #96]	; 0x60
 80041c4:	e798      	b.n	80040f8 <HAL_SPI_Transmit+0xba>
    errorcode = HAL_BUSY;
 80041c6:	f04f 0902 	mov.w	r9, #2
 80041ca:	e7bc      	b.n	8004146 <HAL_SPI_Transmit+0x108>
  __HAL_LOCK(hspi);
 80041cc:	f04f 0902 	mov.w	r9, #2
 80041d0:	e7bc      	b.n	800414c <HAL_SPI_Transmit+0x10e>
	...

080041d4 <HAL_TIM_Base_Start>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80041d4:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80041d8:	2b01      	cmp	r3, #1
 80041da:	d12b      	bne.n	8004234 <HAL_TIM_Base_Start+0x60>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041dc:	2302      	movs	r3, #2

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041de:	4a16      	ldr	r2, [pc, #88]	; (8004238 <HAL_TIM_Base_Start+0x64>)
  htim->State = HAL_TIM_STATE_BUSY;
 80041e0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041e4:	6803      	ldr	r3, [r0, #0]
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d016      	beq.n	8004218 <HAL_TIM_Base_Start+0x44>
 80041ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041ee:	d013      	beq.n	8004218 <HAL_TIM_Base_Start+0x44>
 80041f0:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d00f      	beq.n	8004218 <HAL_TIM_Base_Start+0x44>
 80041f8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d00b      	beq.n	8004218 <HAL_TIM_Base_Start+0x44>
 8004200:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004204:	4293      	cmp	r3, r2
 8004206:	d007      	beq.n	8004218 <HAL_TIM_Base_Start+0x44>
 8004208:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 800420c:	4293      	cmp	r3, r2
 800420e:	d003      	beq.n	8004218 <HAL_TIM_Base_Start+0x44>
 8004210:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8004214:	4293      	cmp	r3, r2
 8004216:	d107      	bne.n	8004228 <HAL_TIM_Base_Start+0x54>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004218:	6899      	ldr	r1, [r3, #8]
 800421a:	4a08      	ldr	r2, [pc, #32]	; (800423c <HAL_TIM_Base_Start+0x68>)
 800421c:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800421e:	2a06      	cmp	r2, #6
 8004220:	d006      	beq.n	8004230 <HAL_TIM_Base_Start+0x5c>
 8004222:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8004226:	d003      	beq.n	8004230 <HAL_TIM_Base_Start+0x5c>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004228:	681a      	ldr	r2, [r3, #0]
 800422a:	f042 0201 	orr.w	r2, r2, #1
 800422e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004230:	2000      	movs	r0, #0
}
 8004232:	4770      	bx	lr
    return HAL_ERROR;
 8004234:	2001      	movs	r0, #1
 8004236:	4770      	bx	lr
 8004238:	40012c00 	.word	0x40012c00
 800423c:	00010007 	.word	0x00010007

08004240 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004240:	4a30      	ldr	r2, [pc, #192]	; (8004304 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 8004242:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004244:	4290      	cmp	r0, r2
 8004246:	d012      	beq.n	800426e <TIM_Base_SetConfig+0x2e>
 8004248:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800424c:	d00f      	beq.n	800426e <TIM_Base_SetConfig+0x2e>
 800424e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8004252:	4290      	cmp	r0, r2
 8004254:	d00b      	beq.n	800426e <TIM_Base_SetConfig+0x2e>
 8004256:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800425a:	4290      	cmp	r0, r2
 800425c:	d007      	beq.n	800426e <TIM_Base_SetConfig+0x2e>
 800425e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004262:	4290      	cmp	r0, r2
 8004264:	d003      	beq.n	800426e <TIM_Base_SetConfig+0x2e>
 8004266:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 800426a:	4290      	cmp	r0, r2
 800426c:	d119      	bne.n	80042a2 <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 800426e:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004270:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8004274:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004276:	4a23      	ldr	r2, [pc, #140]	; (8004304 <TIM_Base_SetConfig+0xc4>)
 8004278:	4290      	cmp	r0, r2
 800427a:	d01d      	beq.n	80042b8 <TIM_Base_SetConfig+0x78>
 800427c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8004280:	d01a      	beq.n	80042b8 <TIM_Base_SetConfig+0x78>
 8004282:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8004286:	4290      	cmp	r0, r2
 8004288:	d016      	beq.n	80042b8 <TIM_Base_SetConfig+0x78>
 800428a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800428e:	4290      	cmp	r0, r2
 8004290:	d012      	beq.n	80042b8 <TIM_Base_SetConfig+0x78>
 8004292:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004296:	4290      	cmp	r0, r2
 8004298:	d00e      	beq.n	80042b8 <TIM_Base_SetConfig+0x78>
 800429a:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 800429e:	4290      	cmp	r0, r2
 80042a0:	d00a      	beq.n	80042b8 <TIM_Base_SetConfig+0x78>
 80042a2:	4a19      	ldr	r2, [pc, #100]	; (8004308 <TIM_Base_SetConfig+0xc8>)
 80042a4:	4290      	cmp	r0, r2
 80042a6:	d007      	beq.n	80042b8 <TIM_Base_SetConfig+0x78>
 80042a8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80042ac:	4290      	cmp	r0, r2
 80042ae:	d003      	beq.n	80042b8 <TIM_Base_SetConfig+0x78>
 80042b0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80042b4:	4290      	cmp	r0, r2
 80042b6:	d103      	bne.n	80042c0 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80042b8:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 80042ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80042be:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80042c0:	694a      	ldr	r2, [r1, #20]
 80042c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80042c6:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 80042c8:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80042ca:	688b      	ldr	r3, [r1, #8]
 80042cc:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80042ce:	680b      	ldr	r3, [r1, #0]
 80042d0:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80042d2:	4b0c      	ldr	r3, [pc, #48]	; (8004304 <TIM_Base_SetConfig+0xc4>)
 80042d4:	4298      	cmp	r0, r3
 80042d6:	d00f      	beq.n	80042f8 <TIM_Base_SetConfig+0xb8>
 80042d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042dc:	4298      	cmp	r0, r3
 80042de:	d00b      	beq.n	80042f8 <TIM_Base_SetConfig+0xb8>
 80042e0:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 80042e4:	4298      	cmp	r0, r3
 80042e6:	d007      	beq.n	80042f8 <TIM_Base_SetConfig+0xb8>
 80042e8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80042ec:	4298      	cmp	r0, r3
 80042ee:	d003      	beq.n	80042f8 <TIM_Base_SetConfig+0xb8>
 80042f0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80042f4:	4298      	cmp	r0, r3
 80042f6:	d101      	bne.n	80042fc <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80042f8:	690b      	ldr	r3, [r1, #16]
 80042fa:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80042fc:	2301      	movs	r3, #1
 80042fe:	6143      	str	r3, [r0, #20]
}
 8004300:	4770      	bx	lr
 8004302:	bf00      	nop
 8004304:	40012c00 	.word	0x40012c00
 8004308:	40014000 	.word	0x40014000

0800430c <HAL_TIM_Base_Init>:
{
 800430c:	b510      	push	{r4, lr}
  if (htim == NULL)
 800430e:	4604      	mov	r4, r0
 8004310:	b350      	cbz	r0, 8004368 <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 8004312:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004316:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800431a:	b91b      	cbnz	r3, 8004324 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800431c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8004320:	f7fd fea8 	bl	8002074 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8004324:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004326:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8004328:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800432c:	1d21      	adds	r1, r4, #4
 800432e:	f7ff ff87 	bl	8004240 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004332:	2301      	movs	r3, #1
 8004334:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  return HAL_OK;
 8004338:	2000      	movs	r0, #0
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800433a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800433e:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8004342:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8004346:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800434a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800434e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004352:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8004356:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800435a:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800435e:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8004362:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8004366:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8004368:	2001      	movs	r0, #1
 800436a:	e7fc      	b.n	8004366 <HAL_TIM_Base_Init+0x5a>

0800436c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800436c:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800436e:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004370:	4311      	orrs	r1, r2
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004372:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004376:	ea41 2303 	orr.w	r3, r1, r3, lsl #8
 800437a:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800437c:	6083      	str	r3, [r0, #8]
}
 800437e:	bd10      	pop	{r4, pc}

08004380 <HAL_TIM_ConfigClockSource>:
{
 8004380:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8004382:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004386:	2b01      	cmp	r3, #1
{
 8004388:	4604      	mov	r4, r0
 800438a:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 800438e:	f000 808c 	beq.w	80044aa <HAL_TIM_ConfigClockSource+0x12a>
 8004392:	2201      	movs	r2, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8004394:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_LOCK(htim);
 8004398:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 800439c:	6800      	ldr	r0, [r0, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800439e:	4b44      	ldr	r3, [pc, #272]	; (80044b0 <HAL_TIM_ConfigClockSource+0x130>)
  tmpsmcr = htim->Instance->SMCR;
 80043a0:	6885      	ldr	r5, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80043a2:	402b      	ands	r3, r5
  htim->Instance->SMCR = tmpsmcr;
 80043a4:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 80043a6:	680b      	ldr	r3, [r1, #0]
 80043a8:	2b60      	cmp	r3, #96	; 0x60
 80043aa:	d04f      	beq.n	800444c <HAL_TIM_ConfigClockSource+0xcc>
 80043ac:	d832      	bhi.n	8004414 <HAL_TIM_ConfigClockSource+0x94>
 80043ae:	2b40      	cmp	r3, #64	; 0x40
 80043b0:	d064      	beq.n	800447c <HAL_TIM_ConfigClockSource+0xfc>
 80043b2:	d816      	bhi.n	80043e2 <HAL_TIM_ConfigClockSource+0x62>
 80043b4:	2b20      	cmp	r3, #32
 80043b6:	d00d      	beq.n	80043d4 <HAL_TIM_ConfigClockSource+0x54>
 80043b8:	d80a      	bhi.n	80043d0 <HAL_TIM_ConfigClockSource+0x50>
 80043ba:	f033 0110 	bics.w	r1, r3, #16
 80043be:	d009      	beq.n	80043d4 <HAL_TIM_ConfigClockSource+0x54>
  htim->State = HAL_TIM_STATE_READY;
 80043c0:	2301      	movs	r3, #1
 80043c2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80043c6:	2300      	movs	r3, #0
 80043c8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 80043cc:	4610      	mov	r0, r2
 80043ce:	bd38      	pop	{r3, r4, r5, pc}
  switch (sClockSourceConfig->ClockSource)
 80043d0:	2b30      	cmp	r3, #48	; 0x30
 80043d2:	d1f5      	bne.n	80043c0 <HAL_TIM_ConfigClockSource+0x40>
  tmpsmcr = TIMx->SMCR;
 80043d4:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80043d6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80043da:	4313      	orrs	r3, r2
 80043dc:	f043 0307 	orr.w	r3, r3, #7
 80043e0:	e028      	b.n	8004434 <HAL_TIM_ConfigClockSource+0xb4>
  switch (sClockSourceConfig->ClockSource)
 80043e2:	2b50      	cmp	r3, #80	; 0x50
 80043e4:	d1ec      	bne.n	80043c0 <HAL_TIM_ConfigClockSource+0x40>
                               sClockSourceConfig->ClockPolarity,
 80043e6:	684a      	ldr	r2, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 80043e8:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 80043ea:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80043ec:	6a03      	ldr	r3, [r0, #32]
 80043ee:	f023 0301 	bic.w	r3, r3, #1
 80043f2:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043f4:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80043f6:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80043fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80043fe:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccer |= TIM_ICPolarity;
 8004402:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8004404:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8004406:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8004408:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800440a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800440e:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 8004412:	e00f      	b.n	8004434 <HAL_TIM_ConfigClockSource+0xb4>
  switch (sClockSourceConfig->ClockSource)
 8004414:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004418:	d00d      	beq.n	8004436 <HAL_TIM_ConfigClockSource+0xb6>
 800441a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800441e:	d00c      	beq.n	800443a <HAL_TIM_ConfigClockSource+0xba>
 8004420:	2b70      	cmp	r3, #112	; 0x70
 8004422:	d1cd      	bne.n	80043c0 <HAL_TIM_ConfigClockSource+0x40>
      TIM_ETR_SetConfig(htim->Instance,
 8004424:	68cb      	ldr	r3, [r1, #12]
 8004426:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 800442a:	f7ff ff9f 	bl	800436c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800442e:	6883      	ldr	r3, [r0, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004430:	f043 0377 	orr.w	r3, r3, #119	; 0x77
  TIMx->SMCR = tmpsmcr;
 8004434:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004436:	2200      	movs	r2, #0
 8004438:	e7c2      	b.n	80043c0 <HAL_TIM_ConfigClockSource+0x40>
      TIM_ETR_SetConfig(htim->Instance,
 800443a:	68cb      	ldr	r3, [r1, #12]
 800443c:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8004440:	f7ff ff94 	bl	800436c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004444:	6883      	ldr	r3, [r0, #8]
 8004446:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800444a:	e7f3      	b.n	8004434 <HAL_TIM_ConfigClockSource+0xb4>
  tmpccer = TIMx->CCER;
 800444c:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800444e:	6a02      	ldr	r2, [r0, #32]
                               sClockSourceConfig->ClockPolarity,
 8004450:	684d      	ldr	r5, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8004452:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004454:	f022 0210 	bic.w	r2, r2, #16
 8004458:	6202      	str	r2, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800445a:	6982      	ldr	r2, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800445c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004460:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer |= (TIM_ICPolarity << 4U);
 8004464:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004468:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 800446c:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800446e:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8004470:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004472:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004476:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 800447a:	e7db      	b.n	8004434 <HAL_TIM_ConfigClockSource+0xb4>
                               sClockSourceConfig->ClockPolarity,
 800447c:	684a      	ldr	r2, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 800447e:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8004480:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004482:	6a03      	ldr	r3, [r0, #32]
 8004484:	f023 0301 	bic.w	r3, r3, #1
 8004488:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800448a:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800448c:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004490:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004494:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccer |= TIM_ICPolarity;
 8004498:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 800449a:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 800449c:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 800449e:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80044a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80044a4:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 80044a8:	e7c4      	b.n	8004434 <HAL_TIM_ConfigClockSource+0xb4>
  __HAL_LOCK(htim);
 80044aa:	461a      	mov	r2, r3
 80044ac:	e78e      	b.n	80043cc <HAL_TIM_ConfigClockSource+0x4c>
 80044ae:	bf00      	nop
 80044b0:	fffe0088 	.word	0xfffe0088

080044b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80044b4:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80044b6:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80044ba:	2b01      	cmp	r3, #1
 80044bc:	f04f 0302 	mov.w	r3, #2
 80044c0:	d036      	beq.n	8004530 <HAL_TIMEx_MasterConfigSynchronization+0x7c>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044c2:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80044c6:	4d1b      	ldr	r5, [pc, #108]	; (8004534 <HAL_TIMEx_MasterConfigSynchronization+0x80>)
  tmpcr2 = htim->Instance->CR2;
 80044c8:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80044ca:	42ab      	cmp	r3, r5
  tmpcr2 = htim->Instance->CR2;
 80044cc:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 80044ce:	689c      	ldr	r4, [r3, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80044d0:	d002      	beq.n	80044d8 <HAL_TIMEx_MasterConfigSynchronization+0x24>
 80044d2:	4e19      	ldr	r6, [pc, #100]	; (8004538 <HAL_TIMEx_MasterConfigSynchronization+0x84>)
 80044d4:	42b3      	cmp	r3, r6
 80044d6:	d103      	bne.n	80044e0 <HAL_TIMEx_MasterConfigSynchronization+0x2c>
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80044d8:	684e      	ldr	r6, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 80044da:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80044de:	4332      	orrs	r2, r6
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80044e0:	680e      	ldr	r6, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 80044e2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80044e6:	4332      	orrs	r2, r6

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044e8:	42ab      	cmp	r3, r5
  htim->Instance->CR2 = tmpcr2;
 80044ea:	605a      	str	r2, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044ec:	d015      	beq.n	800451a <HAL_TIMEx_MasterConfigSynchronization+0x66>
 80044ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044f2:	d012      	beq.n	800451a <HAL_TIMEx_MasterConfigSynchronization+0x66>
 80044f4:	4a11      	ldr	r2, [pc, #68]	; (800453c <HAL_TIMEx_MasterConfigSynchronization+0x88>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d00f      	beq.n	800451a <HAL_TIMEx_MasterConfigSynchronization+0x66>
 80044fa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80044fe:	4293      	cmp	r3, r2
 8004500:	d00b      	beq.n	800451a <HAL_TIMEx_MasterConfigSynchronization+0x66>
 8004502:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004506:	4293      	cmp	r3, r2
 8004508:	d007      	beq.n	800451a <HAL_TIMEx_MasterConfigSynchronization+0x66>
 800450a:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 800450e:	4293      	cmp	r3, r2
 8004510:	d003      	beq.n	800451a <HAL_TIMEx_MasterConfigSynchronization+0x66>
 8004512:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8004516:	4293      	cmp	r3, r2
 8004518:	d104      	bne.n	8004524 <HAL_TIMEx_MasterConfigSynchronization+0x70>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800451a:	6889      	ldr	r1, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 800451c:	f024 0280 	bic.w	r2, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004520:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004522:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004524:	2301      	movs	r3, #1
 8004526:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800452a:	2300      	movs	r3, #0
 800452c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8004530:	4618      	mov	r0, r3

  return HAL_OK;
}
 8004532:	bd70      	pop	{r4, r5, r6, pc}
 8004534:	40012c00 	.word	0x40012c00
 8004538:	40013400 	.word	0x40013400
 800453c:	40000400 	.word	0x40000400

08004540 <UART_EndRxTransfer>:
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004540:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004542:	e852 3f00 	ldrex	r3, [r2]
 8004546:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800454a:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 800454e:	6802      	ldr	r2, [r0, #0]
 8004550:	2900      	cmp	r1, #0
 8004552:	d1f5      	bne.n	8004540 <UART_EndRxTransfer>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004554:	f102 0308 	add.w	r3, r2, #8
 8004558:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800455c:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004560:	f102 0c08 	add.w	ip, r2, #8
 8004564:	e84c 3100 	strex	r1, r3, [ip]
 8004568:	2900      	cmp	r1, #0
 800456a:	d1f3      	bne.n	8004554 <UART_EndRxTransfer+0x14>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800456c:	6e03      	ldr	r3, [r0, #96]	; 0x60
 800456e:	2b01      	cmp	r3, #1
 8004570:	d107      	bne.n	8004582 <UART_EndRxTransfer+0x42>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004572:	e852 3f00 	ldrex	r3, [r2]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004576:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800457a:	e842 3100 	strex	r1, r3, [r2]
 800457e:	2900      	cmp	r1, #0
 8004580:	d1f7      	bne.n	8004572 <UART_EndRxTransfer+0x32>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004582:	2320      	movs	r3, #32
 8004584:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004588:	2300      	movs	r3, #0
 800458a:	6603      	str	r3, [r0, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800458c:	6683      	str	r3, [r0, #104]	; 0x68
}
 800458e:	4770      	bx	lr

08004590 <UART_SetConfig>:
{
 8004590:	b570      	push	{r4, r5, r6, lr}
 8004592:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 8004594:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004596:	6921      	ldr	r1, [r4, #16]
 8004598:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800459a:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800459c:	69c0      	ldr	r0, [r0, #28]
 800459e:	430a      	orrs	r2, r1
 80045a0:	6961      	ldr	r1, [r4, #20]
 80045a2:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80045a4:	498f      	ldr	r1, [pc, #572]	; (80047e4 <UART_SetConfig+0x254>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80045a6:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80045a8:	4029      	ands	r1, r5
 80045aa:	430a      	orrs	r2, r1
 80045ac:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80045ae:	685a      	ldr	r2, [r3, #4]
 80045b0:	68e1      	ldr	r1, [r4, #12]
 80045b2:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80045b6:	430a      	orrs	r2, r1
 80045b8:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80045ba:	4a8b      	ldr	r2, [pc, #556]	; (80047e8 <UART_SetConfig+0x258>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80045bc:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80045be:	4293      	cmp	r3, r2
    tmpreg |= huart->Init.OneBitSampling;
 80045c0:	bf1c      	itt	ne
 80045c2:	6a22      	ldrne	r2, [r4, #32]
 80045c4:	4311      	orrne	r1, r2
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80045c6:	689a      	ldr	r2, [r3, #8]
 80045c8:	f422 6230 	bic.w	r2, r2, #2816	; 0xb00
 80045cc:	430a      	orrs	r2, r1
 80045ce:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 80045d0:	4a86      	ldr	r2, [pc, #536]	; (80047ec <UART_SetConfig+0x25c>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d117      	bne.n	8004606 <UART_SetConfig+0x76>
 80045d6:	4b86      	ldr	r3, [pc, #536]	; (80047f0 <UART_SetConfig+0x260>)
 80045d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045dc:	f003 0303 	and.w	r3, r3, #3
 80045e0:	3b01      	subs	r3, #1
 80045e2:	2b02      	cmp	r3, #2
 80045e4:	f200 80cf 	bhi.w	8004786 <UART_SetConfig+0x1f6>
 80045e8:	4a82      	ldr	r2, [pc, #520]	; (80047f4 <UART_SetConfig+0x264>)
 80045ea:	5cd3      	ldrb	r3, [r2, r3]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80045ec:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80045f0:	f040 8099 	bne.w	8004726 <UART_SetConfig+0x196>
    switch (clocksource)
 80045f4:	2b08      	cmp	r3, #8
 80045f6:	d822      	bhi.n	800463e <UART_SetConfig+0xae>
 80045f8:	e8df f003 	tbb	[pc, r3]
 80045fc:	2193c8d9 	.word	0x2193c8d9
 8004600:	212121ce 	.word	0x212121ce
 8004604:	dd          	.byte	0xdd
 8004605:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004606:	4a7c      	ldr	r2, [pc, #496]	; (80047f8 <UART_SetConfig+0x268>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d106      	bne.n	800461a <UART_SetConfig+0x8a>
 800460c:	4b78      	ldr	r3, [pc, #480]	; (80047f0 <UART_SetConfig+0x260>)
 800460e:	4a7b      	ldr	r2, [pc, #492]	; (80047fc <UART_SetConfig+0x26c>)
 8004610:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004614:	f003 030c 	and.w	r3, r3, #12
 8004618:	e7e7      	b.n	80045ea <UART_SetConfig+0x5a>
 800461a:	4a79      	ldr	r2, [pc, #484]	; (8004800 <UART_SetConfig+0x270>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d119      	bne.n	8004654 <UART_SetConfig+0xc4>
 8004620:	4b73      	ldr	r3, [pc, #460]	; (80047f0 <UART_SetConfig+0x260>)
 8004622:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004626:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800462a:	2b20      	cmp	r3, #32
 800462c:	f000 80b7 	beq.w	800479e <UART_SetConfig+0x20e>
 8004630:	d807      	bhi.n	8004642 <UART_SetConfig+0xb2>
 8004632:	2b00      	cmp	r3, #0
 8004634:	f000 80b8 	beq.w	80047a8 <UART_SetConfig+0x218>
 8004638:	2b10      	cmp	r3, #16
 800463a:	f000 80aa 	beq.w	8004792 <UART_SetConfig+0x202>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800463e:	2001      	movs	r0, #1
 8004640:	e04e      	b.n	80046e0 <UART_SetConfig+0x150>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004642:	2b30      	cmp	r3, #48	; 0x30
 8004644:	d1fb      	bne.n	800463e <UART_SetConfig+0xae>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004646:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800464a:	f000 80b4 	beq.w	80047b6 <UART_SetConfig+0x226>
 800464e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004652:	e083      	b.n	800475c <UART_SetConfig+0x1cc>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004654:	4a6b      	ldr	r2, [pc, #428]	; (8004804 <UART_SetConfig+0x274>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d10f      	bne.n	800467a <UART_SetConfig+0xea>
 800465a:	4b65      	ldr	r3, [pc, #404]	; (80047f0 <UART_SetConfig+0x260>)
 800465c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004660:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004664:	2b80      	cmp	r3, #128	; 0x80
 8004666:	f000 809a 	beq.w	800479e <UART_SetConfig+0x20e>
 800466a:	d804      	bhi.n	8004676 <UART_SetConfig+0xe6>
 800466c:	2b00      	cmp	r3, #0
 800466e:	f000 809b 	beq.w	80047a8 <UART_SetConfig+0x218>
 8004672:	2b40      	cmp	r3, #64	; 0x40
 8004674:	e7e1      	b.n	800463a <UART_SetConfig+0xaa>
 8004676:	2bc0      	cmp	r3, #192	; 0xc0
 8004678:	e7e4      	b.n	8004644 <UART_SetConfig+0xb4>
 800467a:	4a63      	ldr	r2, [pc, #396]	; (8004808 <UART_SetConfig+0x278>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d112      	bne.n	80046a6 <UART_SetConfig+0x116>
 8004680:	4b5b      	ldr	r3, [pc, #364]	; (80047f0 <UART_SetConfig+0x260>)
 8004682:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004686:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800468a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800468e:	f000 8086 	beq.w	800479e <UART_SetConfig+0x20e>
 8004692:	d805      	bhi.n	80046a0 <UART_SetConfig+0x110>
 8004694:	2b00      	cmp	r3, #0
 8004696:	f000 8087 	beq.w	80047a8 <UART_SetConfig+0x218>
 800469a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800469e:	e7cc      	b.n	800463a <UART_SetConfig+0xaa>
 80046a0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80046a4:	e7ce      	b.n	8004644 <UART_SetConfig+0xb4>
 80046a6:	4a50      	ldr	r2, [pc, #320]	; (80047e8 <UART_SetConfig+0x258>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d1c8      	bne.n	800463e <UART_SetConfig+0xae>
 80046ac:	4b50      	ldr	r3, [pc, #320]	; (80047f0 <UART_SetConfig+0x260>)
 80046ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046b2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80046b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046ba:	d015      	beq.n	80046e8 <UART_SetConfig+0x158>
 80046bc:	d806      	bhi.n	80046cc <UART_SetConfig+0x13c>
 80046be:	b15b      	cbz	r3, 80046d8 <UART_SetConfig+0x148>
 80046c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046c4:	d1bb      	bne.n	800463e <UART_SetConfig+0xae>
        pclk = HAL_RCC_GetSysClockFreq();
 80046c6:	f7fe fced 	bl	80030a4 <HAL_RCC_GetSysClockFreq>
        break;
 80046ca:	e007      	b.n	80046dc <UART_SetConfig+0x14c>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80046cc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80046d0:	d1b5      	bne.n	800463e <UART_SetConfig+0xae>
        pclk = (uint32_t) LSE_VALUE;
 80046d2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80046d6:	e008      	b.n	80046ea <UART_SetConfig+0x15a>
        pclk = HAL_RCC_GetPCLK1Freq();
 80046d8:	f7ff f85c 	bl	8003794 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80046dc:	b928      	cbnz	r0, 80046ea <UART_SetConfig+0x15a>
 80046de:	2000      	movs	r0, #0
  huart->RxISR = NULL;
 80046e0:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 80046e2:	e9c4 331a 	strd	r3, r3, [r4, #104]	; 0x68
}
 80046e6:	bd70      	pop	{r4, r5, r6, pc}
        pclk = (uint32_t) HSI_VALUE;
 80046e8:	4848      	ldr	r0, [pc, #288]	; (800480c <UART_SetConfig+0x27c>)
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80046ea:	6862      	ldr	r2, [r4, #4]
 80046ec:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 80046f0:	4283      	cmp	r3, r0
 80046f2:	d8a4      	bhi.n	800463e <UART_SetConfig+0xae>
 80046f4:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 80046f8:	d8a1      	bhi.n	800463e <UART_SetConfig+0xae>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80046fa:	0851      	lsrs	r1, r2, #1
 80046fc:	2500      	movs	r5, #0
 80046fe:	468c      	mov	ip, r1
 8004700:	f44f 7680 	mov.w	r6, #256	; 0x100
 8004704:	4629      	mov	r1, r5
 8004706:	fbe0 c106 	umlal	ip, r1, r0, r6
 800470a:	462b      	mov	r3, r5
 800470c:	4660      	mov	r0, ip
 800470e:	f7fc fabb 	bl	8000c88 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004712:	4b3f      	ldr	r3, [pc, #252]	; (8004810 <UART_SetConfig+0x280>)
 8004714:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 8004718:	429a      	cmp	r2, r3
 800471a:	d890      	bhi.n	800463e <UART_SetConfig+0xae>
          huart->Instance->BRR = usartdiv;
 800471c:	6823      	ldr	r3, [r4, #0]
 800471e:	60d8      	str	r0, [r3, #12]
 8004720:	e7dd      	b.n	80046de <UART_SetConfig+0x14e>
        pclk = (uint32_t) HSI_VALUE;
 8004722:	483a      	ldr	r0, [pc, #232]	; (800480c <UART_SetConfig+0x27c>)
 8004724:	e047      	b.n	80047b6 <UART_SetConfig+0x226>
    switch (clocksource)
 8004726:	2b08      	cmp	r3, #8
 8004728:	d889      	bhi.n	800463e <UART_SetConfig+0xae>
 800472a:	a201      	add	r2, pc, #4	; (adr r2, 8004730 <UART_SetConfig+0x1a0>)
 800472c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004730:	08004755 	.word	0x08004755
 8004734:	0800477b 	.word	0x0800477b
 8004738:	080047a5 	.word	0x080047a5
 800473c:	0800463f 	.word	0x0800463f
 8004740:	08004781 	.word	0x08004781
 8004744:	0800463f 	.word	0x0800463f
 8004748:	0800463f 	.word	0x0800463f
 800474c:	0800463f 	.word	0x0800463f
 8004750:	0800464f 	.word	0x0800464f
        pclk = HAL_RCC_GetPCLK1Freq();
 8004754:	f7ff f81e 	bl	8003794 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8004758:	2800      	cmp	r0, #0
 800475a:	d0c0      	beq.n	80046de <UART_SetConfig+0x14e>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800475c:	6862      	ldr	r2, [r4, #4]
 800475e:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8004762:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004766:	f64f 72ef 	movw	r2, #65519	; 0xffef
 800476a:	f1a3 0110 	sub.w	r1, r3, #16
 800476e:	4291      	cmp	r1, r2
 8004770:	f63f af65 	bhi.w	800463e <UART_SetConfig+0xae>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004774:	6822      	ldr	r2, [r4, #0]
 8004776:	60d3      	str	r3, [r2, #12]
 8004778:	e7b1      	b.n	80046de <UART_SetConfig+0x14e>
        pclk = HAL_RCC_GetPCLK2Freq();
 800477a:	f7ff f81d 	bl	80037b8 <HAL_RCC_GetPCLK2Freq>
        break;
 800477e:	e7eb      	b.n	8004758 <UART_SetConfig+0x1c8>
        pclk = HAL_RCC_GetSysClockFreq();
 8004780:	f7fe fc90 	bl	80030a4 <HAL_RCC_GetSysClockFreq>
        break;
 8004784:	e7e8      	b.n	8004758 <UART_SetConfig+0x1c8>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004786:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800478a:	d1f6      	bne.n	800477a <UART_SetConfig+0x1ea>
        pclk = HAL_RCC_GetPCLK2Freq();
 800478c:	f7ff f814 	bl	80037b8 <HAL_RCC_GetPCLK2Freq>
        break;
 8004790:	e00f      	b.n	80047b2 <UART_SetConfig+0x222>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004792:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8004796:	d1f3      	bne.n	8004780 <UART_SetConfig+0x1f0>
        pclk = HAL_RCC_GetSysClockFreq();
 8004798:	f7fe fc84 	bl	80030a4 <HAL_RCC_GetSysClockFreq>
        break;
 800479c:	e009      	b.n	80047b2 <UART_SetConfig+0x222>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800479e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80047a2:	d0be      	beq.n	8004722 <UART_SetConfig+0x192>
        pclk = (uint32_t) HSI_VALUE;
 80047a4:	4819      	ldr	r0, [pc, #100]	; (800480c <UART_SetConfig+0x27c>)
 80047a6:	e7d9      	b.n	800475c <UART_SetConfig+0x1cc>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80047a8:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80047ac:	d1d2      	bne.n	8004754 <UART_SetConfig+0x1c4>
        pclk = HAL_RCC_GetPCLK1Freq();
 80047ae:	f7fe fff1 	bl	8003794 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80047b2:	2800      	cmp	r0, #0
 80047b4:	d093      	beq.n	80046de <UART_SetConfig+0x14e>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80047b6:	6862      	ldr	r2, [r4, #4]
 80047b8:	0853      	lsrs	r3, r2, #1
 80047ba:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80047be:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80047c2:	f64f 72ef 	movw	r2, #65519	; 0xffef
 80047c6:	f1a3 0110 	sub.w	r1, r3, #16
 80047ca:	4291      	cmp	r1, r2
 80047cc:	f63f af37 	bhi.w	800463e <UART_SetConfig+0xae>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80047d0:	f023 020f 	bic.w	r2, r3, #15
        huart->Instance->BRR = brrtemp;
 80047d4:	6821      	ldr	r1, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80047d6:	b292      	uxth	r2, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80047d8:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 80047dc:	4313      	orrs	r3, r2
 80047de:	60cb      	str	r3, [r1, #12]
 80047e0:	e77d      	b.n	80046de <UART_SetConfig+0x14e>
 80047e2:	bf00      	nop
 80047e4:	efff69f3 	.word	0xefff69f3
 80047e8:	40008000 	.word	0x40008000
 80047ec:	40013800 	.word	0x40013800
 80047f0:	40021000 	.word	0x40021000
 80047f4:	080094c4 	.word	0x080094c4
 80047f8:	40004400 	.word	0x40004400
 80047fc:	080094c7 	.word	0x080094c7
 8004800:	40004800 	.word	0x40004800
 8004804:	40004c00 	.word	0x40004c00
 8004808:	40005000 	.word	0x40005000
 800480c:	00f42400 	.word	0x00f42400
 8004810:	000ffcff 	.word	0x000ffcff

08004814 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004814:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004816:	071a      	lsls	r2, r3, #28
{
 8004818:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800481a:	d506      	bpl.n	800482a <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800481c:	6801      	ldr	r1, [r0, #0]
 800481e:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8004820:	684a      	ldr	r2, [r1, #4]
 8004822:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004826:	4322      	orrs	r2, r4
 8004828:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800482a:	07dc      	lsls	r4, r3, #31
 800482c:	d506      	bpl.n	800483c <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800482e:	6801      	ldr	r1, [r0, #0]
 8004830:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8004832:	684a      	ldr	r2, [r1, #4]
 8004834:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8004838:	4322      	orrs	r2, r4
 800483a:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800483c:	0799      	lsls	r1, r3, #30
 800483e:	d506      	bpl.n	800484e <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004840:	6801      	ldr	r1, [r0, #0]
 8004842:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8004844:	684a      	ldr	r2, [r1, #4]
 8004846:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800484a:	4322      	orrs	r2, r4
 800484c:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800484e:	075a      	lsls	r2, r3, #29
 8004850:	d506      	bpl.n	8004860 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004852:	6801      	ldr	r1, [r0, #0]
 8004854:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8004856:	684a      	ldr	r2, [r1, #4]
 8004858:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800485c:	4322      	orrs	r2, r4
 800485e:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004860:	06dc      	lsls	r4, r3, #27
 8004862:	d506      	bpl.n	8004872 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004864:	6801      	ldr	r1, [r0, #0]
 8004866:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8004868:	688a      	ldr	r2, [r1, #8]
 800486a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800486e:	4322      	orrs	r2, r4
 8004870:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004872:	0699      	lsls	r1, r3, #26
 8004874:	d506      	bpl.n	8004884 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004876:	6801      	ldr	r1, [r0, #0]
 8004878:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800487a:	688a      	ldr	r2, [r1, #8]
 800487c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004880:	4322      	orrs	r2, r4
 8004882:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004884:	065a      	lsls	r2, r3, #25
 8004886:	d50f      	bpl.n	80048a8 <UART_AdvFeatureConfig+0x94>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004888:	6801      	ldr	r1, [r0, #0]
 800488a:	6c04      	ldr	r4, [r0, #64]	; 0x40
 800488c:	684a      	ldr	r2, [r1, #4]
 800488e:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8004892:	4322      	orrs	r2, r4
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004894:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004898:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800489a:	d105      	bne.n	80048a8 <UART_AdvFeatureConfig+0x94>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800489c:	684a      	ldr	r2, [r1, #4]
 800489e:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80048a0:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 80048a4:	4322      	orrs	r2, r4
 80048a6:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80048a8:	061b      	lsls	r3, r3, #24
 80048aa:	d506      	bpl.n	80048ba <UART_AdvFeatureConfig+0xa6>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80048ac:	6802      	ldr	r2, [r0, #0]
 80048ae:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80048b0:	6853      	ldr	r3, [r2, #4]
 80048b2:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80048b6:	430b      	orrs	r3, r1
 80048b8:	6053      	str	r3, [r2, #4]
}
 80048ba:	bd10      	pop	{r4, pc}

080048bc <UART_WaitOnFlagUntilTimeout>:
{
 80048bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80048c0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80048c4:	4604      	mov	r4, r0
 80048c6:	460f      	mov	r7, r1
 80048c8:	4616      	mov	r6, r2
 80048ca:	4698      	mov	r8, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048cc:	6822      	ldr	r2, [r4, #0]
 80048ce:	69d3      	ldr	r3, [r2, #28]
 80048d0:	ea37 0303 	bics.w	r3, r7, r3
 80048d4:	bf0c      	ite	eq
 80048d6:	2301      	moveq	r3, #1
 80048d8:	2300      	movne	r3, #0
 80048da:	42b3      	cmp	r3, r6
 80048dc:	d001      	beq.n	80048e2 <UART_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 80048de:	2000      	movs	r0, #0
 80048e0:	e01e      	b.n	8004920 <UART_WaitOnFlagUntilTimeout+0x64>
    if (Timeout != HAL_MAX_DELAY)
 80048e2:	f1b9 3fff 	cmp.w	r9, #4294967295
 80048e6:	d0f2      	beq.n	80048ce <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048e8:	f7fd fcaa 	bl	8002240 <HAL_GetTick>
 80048ec:	eba0 0008 	sub.w	r0, r0, r8
 80048f0:	4548      	cmp	r0, r9
 80048f2:	d825      	bhi.n	8004940 <UART_WaitOnFlagUntilTimeout+0x84>
 80048f4:	f1b9 0f00 	cmp.w	r9, #0
 80048f8:	d022      	beq.n	8004940 <UART_WaitOnFlagUntilTimeout+0x84>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80048fa:	6820      	ldr	r0, [r4, #0]
 80048fc:	6803      	ldr	r3, [r0, #0]
 80048fe:	075a      	lsls	r2, r3, #29
 8004900:	d5e4      	bpl.n	80048cc <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004902:	69c5      	ldr	r5, [r0, #28]
 8004904:	f015 0508 	ands.w	r5, r5, #8
 8004908:	d00c      	beq.n	8004924 <UART_WaitOnFlagUntilTimeout+0x68>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800490a:	2508      	movs	r5, #8
 800490c:	6205      	str	r5, [r0, #32]
          UART_EndRxTransfer(huart);
 800490e:	4620      	mov	r0, r4
 8004910:	f7ff fe16 	bl	8004540 <UART_EndRxTransfer>
          __HAL_UNLOCK(huart);
 8004914:	2300      	movs	r3, #0
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004916:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
          __HAL_UNLOCK(huart);
 800491a:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
          return HAL_ERROR;
 800491e:	2001      	movs	r0, #1
}
 8004920:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004924:	69c3      	ldr	r3, [r0, #28]
 8004926:	051b      	lsls	r3, r3, #20
 8004928:	d5d0      	bpl.n	80048cc <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800492a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800492e:	6203      	str	r3, [r0, #32]
          UART_EndRxTransfer(huart);
 8004930:	4620      	mov	r0, r4
 8004932:	f7ff fe05 	bl	8004540 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004936:	2320      	movs	r3, #32
 8004938:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
          __HAL_UNLOCK(huart);
 800493c:	f884 5078 	strb.w	r5, [r4, #120]	; 0x78
        return HAL_TIMEOUT;
 8004940:	2003      	movs	r0, #3
 8004942:	e7ed      	b.n	8004920 <UART_WaitOnFlagUntilTimeout+0x64>

08004944 <UART_CheckIdleState>:
{
 8004944:	b530      	push	{r4, r5, lr}
 8004946:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004948:	2500      	movs	r5, #0
{
 800494a:	b085      	sub	sp, #20
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800494c:	f8c0 5084 	str.w	r5, [r0, #132]	; 0x84
  tickstart = HAL_GetTick();
 8004950:	f7fd fc76 	bl	8002240 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004954:	6822      	ldr	r2, [r4, #0]
 8004956:	6812      	ldr	r2, [r2, #0]
 8004958:	0711      	lsls	r1, r2, #28
  tickstart = HAL_GetTick();
 800495a:	4603      	mov	r3, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800495c:	d51c      	bpl.n	8004998 <UART_CheckIdleState+0x54>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800495e:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 8004962:	9200      	str	r2, [sp, #0]
 8004964:	9003      	str	r0, [sp, #12]
 8004966:	462a      	mov	r2, r5
 8004968:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800496c:	4620      	mov	r0, r4
 800496e:	f7ff ffa5 	bl	80048bc <UART_WaitOnFlagUntilTimeout>
 8004972:	9b03      	ldr	r3, [sp, #12]
 8004974:	b180      	cbz	r0, 8004998 <UART_CheckIdleState+0x54>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004976:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004978:	e852 3f00 	ldrex	r3, [r2]
 800497c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004980:	e842 3100 	strex	r1, r3, [r2]
 8004984:	2900      	cmp	r1, #0
 8004986:	d1f6      	bne.n	8004976 <UART_CheckIdleState+0x32>
      huart->gState = HAL_UART_STATE_READY;
 8004988:	2320      	movs	r3, #32
 800498a:	67e3      	str	r3, [r4, #124]	; 0x7c
      return HAL_TIMEOUT;
 800498c:	2003      	movs	r0, #3
      __HAL_UNLOCK(huart);
 800498e:	2300      	movs	r3, #0
 8004990:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
}
 8004994:	b005      	add	sp, #20
 8004996:	bd30      	pop	{r4, r5, pc}
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004998:	6822      	ldr	r2, [r4, #0]
 800499a:	6812      	ldr	r2, [r2, #0]
 800499c:	0752      	lsls	r2, r2, #29
 800499e:	d523      	bpl.n	80049e8 <UART_CheckIdleState+0xa4>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80049a0:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 80049a4:	9200      	str	r2, [sp, #0]
 80049a6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80049aa:	2200      	movs	r2, #0
 80049ac:	4620      	mov	r0, r4
 80049ae:	f7ff ff85 	bl	80048bc <UART_WaitOnFlagUntilTimeout>
 80049b2:	b1c8      	cbz	r0, 80049e8 <UART_CheckIdleState+0xa4>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80049b4:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049b6:	e852 3f00 	ldrex	r3, [r2]
 80049ba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049be:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 80049c2:	6822      	ldr	r2, [r4, #0]
 80049c4:	2900      	cmp	r1, #0
 80049c6:	d1f5      	bne.n	80049b4 <UART_CheckIdleState+0x70>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049c8:	f102 0308 	add.w	r3, r2, #8
 80049cc:	e853 3f00 	ldrex	r3, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049d0:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049d4:	f102 0008 	add.w	r0, r2, #8
 80049d8:	e840 3100 	strex	r1, r3, [r0]
 80049dc:	2900      	cmp	r1, #0
 80049de:	d1f3      	bne.n	80049c8 <UART_CheckIdleState+0x84>
      huart->RxState = HAL_UART_STATE_READY;
 80049e0:	2320      	movs	r3, #32
 80049e2:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
 80049e6:	e7d1      	b.n	800498c <UART_CheckIdleState+0x48>
  huart->gState = HAL_UART_STATE_READY;
 80049e8:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049ea:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 80049ec:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80049ee:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049f2:	6620      	str	r0, [r4, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80049f4:	6660      	str	r0, [r4, #100]	; 0x64
  return HAL_OK;
 80049f6:	e7ca      	b.n	800498e <UART_CheckIdleState+0x4a>

080049f8 <HAL_UART_Init>:
{
 80049f8:	b510      	push	{r4, lr}
  if (huart == NULL)
 80049fa:	4604      	mov	r4, r0
 80049fc:	b340      	cbz	r0, 8004a50 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 80049fe:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 8004a00:	b91b      	cbnz	r3, 8004a0a <HAL_UART_Init+0x12>
    huart->Lock = HAL_UNLOCKED;
 8004a02:	f880 3078 	strb.w	r3, [r0, #120]	; 0x78
    HAL_UART_MspInit(huart);
 8004a06:	f7fd fb67 	bl	80020d8 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8004a0a:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8004a0c:	2324      	movs	r3, #36	; 0x24
 8004a0e:	67e3      	str	r3, [r4, #124]	; 0x7c
  __HAL_UART_DISABLE(huart);
 8004a10:	6813      	ldr	r3, [r2, #0]
 8004a12:	f023 0301 	bic.w	r3, r3, #1
 8004a16:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004a18:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004a1a:	b113      	cbz	r3, 8004a22 <HAL_UART_Init+0x2a>
    UART_AdvFeatureConfig(huart);
 8004a1c:	4620      	mov	r0, r4
 8004a1e:	f7ff fef9 	bl	8004814 <UART_AdvFeatureConfig>
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004a22:	4620      	mov	r0, r4
 8004a24:	f7ff fdb4 	bl	8004590 <UART_SetConfig>
 8004a28:	2801      	cmp	r0, #1
 8004a2a:	d011      	beq.n	8004a50 <HAL_UART_Init+0x58>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a2c:	6823      	ldr	r3, [r4, #0]
 8004a2e:	685a      	ldr	r2, [r3, #4]
 8004a30:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004a34:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a36:	689a      	ldr	r2, [r3, #8]
 8004a38:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004a3c:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8004a3e:	681a      	ldr	r2, [r3, #0]
 8004a40:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8004a44:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8004a46:	601a      	str	r2, [r3, #0]
}
 8004a48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 8004a4c:	f7ff bf7a 	b.w	8004944 <UART_CheckIdleState>
}
 8004a50:	2001      	movs	r0, #1
 8004a52:	bd10      	pop	{r4, pc}

08004a54 <__cvt>:
 8004a54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004a58:	ec55 4b10 	vmov	r4, r5, d0
 8004a5c:	2d00      	cmp	r5, #0
 8004a5e:	460e      	mov	r6, r1
 8004a60:	4619      	mov	r1, r3
 8004a62:	462b      	mov	r3, r5
 8004a64:	bfbb      	ittet	lt
 8004a66:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004a6a:	461d      	movlt	r5, r3
 8004a6c:	2300      	movge	r3, #0
 8004a6e:	232d      	movlt	r3, #45	; 0x2d
 8004a70:	700b      	strb	r3, [r1, #0]
 8004a72:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004a74:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004a78:	4691      	mov	r9, r2
 8004a7a:	f023 0820 	bic.w	r8, r3, #32
 8004a7e:	bfbc      	itt	lt
 8004a80:	4622      	movlt	r2, r4
 8004a82:	4614      	movlt	r4, r2
 8004a84:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004a88:	d005      	beq.n	8004a96 <__cvt+0x42>
 8004a8a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004a8e:	d100      	bne.n	8004a92 <__cvt+0x3e>
 8004a90:	3601      	adds	r6, #1
 8004a92:	2102      	movs	r1, #2
 8004a94:	e000      	b.n	8004a98 <__cvt+0x44>
 8004a96:	2103      	movs	r1, #3
 8004a98:	ab03      	add	r3, sp, #12
 8004a9a:	9301      	str	r3, [sp, #4]
 8004a9c:	ab02      	add	r3, sp, #8
 8004a9e:	9300      	str	r3, [sp, #0]
 8004aa0:	ec45 4b10 	vmov	d0, r4, r5
 8004aa4:	4653      	mov	r3, sl
 8004aa6:	4632      	mov	r2, r6
 8004aa8:	f000 fe6a 	bl	8005780 <_dtoa_r>
 8004aac:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004ab0:	4607      	mov	r7, r0
 8004ab2:	d102      	bne.n	8004aba <__cvt+0x66>
 8004ab4:	f019 0f01 	tst.w	r9, #1
 8004ab8:	d022      	beq.n	8004b00 <__cvt+0xac>
 8004aba:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004abe:	eb07 0906 	add.w	r9, r7, r6
 8004ac2:	d110      	bne.n	8004ae6 <__cvt+0x92>
 8004ac4:	783b      	ldrb	r3, [r7, #0]
 8004ac6:	2b30      	cmp	r3, #48	; 0x30
 8004ac8:	d10a      	bne.n	8004ae0 <__cvt+0x8c>
 8004aca:	2200      	movs	r2, #0
 8004acc:	2300      	movs	r3, #0
 8004ace:	4620      	mov	r0, r4
 8004ad0:	4629      	mov	r1, r5
 8004ad2:	f7fb fff9 	bl	8000ac8 <__aeabi_dcmpeq>
 8004ad6:	b918      	cbnz	r0, 8004ae0 <__cvt+0x8c>
 8004ad8:	f1c6 0601 	rsb	r6, r6, #1
 8004adc:	f8ca 6000 	str.w	r6, [sl]
 8004ae0:	f8da 3000 	ldr.w	r3, [sl]
 8004ae4:	4499      	add	r9, r3
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	2300      	movs	r3, #0
 8004aea:	4620      	mov	r0, r4
 8004aec:	4629      	mov	r1, r5
 8004aee:	f7fb ffeb 	bl	8000ac8 <__aeabi_dcmpeq>
 8004af2:	b108      	cbz	r0, 8004af8 <__cvt+0xa4>
 8004af4:	f8cd 900c 	str.w	r9, [sp, #12]
 8004af8:	2230      	movs	r2, #48	; 0x30
 8004afa:	9b03      	ldr	r3, [sp, #12]
 8004afc:	454b      	cmp	r3, r9
 8004afe:	d307      	bcc.n	8004b10 <__cvt+0xbc>
 8004b00:	9b03      	ldr	r3, [sp, #12]
 8004b02:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004b04:	1bdb      	subs	r3, r3, r7
 8004b06:	4638      	mov	r0, r7
 8004b08:	6013      	str	r3, [r2, #0]
 8004b0a:	b004      	add	sp, #16
 8004b0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b10:	1c59      	adds	r1, r3, #1
 8004b12:	9103      	str	r1, [sp, #12]
 8004b14:	701a      	strb	r2, [r3, #0]
 8004b16:	e7f0      	b.n	8004afa <__cvt+0xa6>

08004b18 <__exponent>:
 8004b18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	2900      	cmp	r1, #0
 8004b1e:	bfb8      	it	lt
 8004b20:	4249      	neglt	r1, r1
 8004b22:	f803 2b02 	strb.w	r2, [r3], #2
 8004b26:	bfb4      	ite	lt
 8004b28:	222d      	movlt	r2, #45	; 0x2d
 8004b2a:	222b      	movge	r2, #43	; 0x2b
 8004b2c:	2909      	cmp	r1, #9
 8004b2e:	7042      	strb	r2, [r0, #1]
 8004b30:	dd2a      	ble.n	8004b88 <__exponent+0x70>
 8004b32:	f10d 0207 	add.w	r2, sp, #7
 8004b36:	4617      	mov	r7, r2
 8004b38:	260a      	movs	r6, #10
 8004b3a:	4694      	mov	ip, r2
 8004b3c:	fb91 f5f6 	sdiv	r5, r1, r6
 8004b40:	fb06 1415 	mls	r4, r6, r5, r1
 8004b44:	3430      	adds	r4, #48	; 0x30
 8004b46:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8004b4a:	460c      	mov	r4, r1
 8004b4c:	2c63      	cmp	r4, #99	; 0x63
 8004b4e:	f102 32ff 	add.w	r2, r2, #4294967295
 8004b52:	4629      	mov	r1, r5
 8004b54:	dcf1      	bgt.n	8004b3a <__exponent+0x22>
 8004b56:	3130      	adds	r1, #48	; 0x30
 8004b58:	f1ac 0402 	sub.w	r4, ip, #2
 8004b5c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004b60:	1c41      	adds	r1, r0, #1
 8004b62:	4622      	mov	r2, r4
 8004b64:	42ba      	cmp	r2, r7
 8004b66:	d30a      	bcc.n	8004b7e <__exponent+0x66>
 8004b68:	f10d 0209 	add.w	r2, sp, #9
 8004b6c:	eba2 020c 	sub.w	r2, r2, ip
 8004b70:	42bc      	cmp	r4, r7
 8004b72:	bf88      	it	hi
 8004b74:	2200      	movhi	r2, #0
 8004b76:	4413      	add	r3, r2
 8004b78:	1a18      	subs	r0, r3, r0
 8004b7a:	b003      	add	sp, #12
 8004b7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b7e:	f812 5b01 	ldrb.w	r5, [r2], #1
 8004b82:	f801 5f01 	strb.w	r5, [r1, #1]!
 8004b86:	e7ed      	b.n	8004b64 <__exponent+0x4c>
 8004b88:	2330      	movs	r3, #48	; 0x30
 8004b8a:	3130      	adds	r1, #48	; 0x30
 8004b8c:	7083      	strb	r3, [r0, #2]
 8004b8e:	70c1      	strb	r1, [r0, #3]
 8004b90:	1d03      	adds	r3, r0, #4
 8004b92:	e7f1      	b.n	8004b78 <__exponent+0x60>

08004b94 <_printf_float>:
 8004b94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b98:	ed2d 8b02 	vpush	{d8}
 8004b9c:	b08d      	sub	sp, #52	; 0x34
 8004b9e:	460c      	mov	r4, r1
 8004ba0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004ba4:	4616      	mov	r6, r2
 8004ba6:	461f      	mov	r7, r3
 8004ba8:	4605      	mov	r5, r0
 8004baa:	f000 fce7 	bl	800557c <_localeconv_r>
 8004bae:	f8d0 a000 	ldr.w	sl, [r0]
 8004bb2:	4650      	mov	r0, sl
 8004bb4:	f7fb fb5c 	bl	8000270 <strlen>
 8004bb8:	2300      	movs	r3, #0
 8004bba:	930a      	str	r3, [sp, #40]	; 0x28
 8004bbc:	6823      	ldr	r3, [r4, #0]
 8004bbe:	9305      	str	r3, [sp, #20]
 8004bc0:	f8d8 3000 	ldr.w	r3, [r8]
 8004bc4:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004bc8:	3307      	adds	r3, #7
 8004bca:	f023 0307 	bic.w	r3, r3, #7
 8004bce:	f103 0208 	add.w	r2, r3, #8
 8004bd2:	f8c8 2000 	str.w	r2, [r8]
 8004bd6:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004bda:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004bde:	9307      	str	r3, [sp, #28]
 8004be0:	f8cd 8018 	str.w	r8, [sp, #24]
 8004be4:	ee08 0a10 	vmov	s16, r0
 8004be8:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8004bec:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004bf0:	4b9e      	ldr	r3, [pc, #632]	; (8004e6c <_printf_float+0x2d8>)
 8004bf2:	f04f 32ff 	mov.w	r2, #4294967295
 8004bf6:	f7fb ff99 	bl	8000b2c <__aeabi_dcmpun>
 8004bfa:	bb88      	cbnz	r0, 8004c60 <_printf_float+0xcc>
 8004bfc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004c00:	4b9a      	ldr	r3, [pc, #616]	; (8004e6c <_printf_float+0x2d8>)
 8004c02:	f04f 32ff 	mov.w	r2, #4294967295
 8004c06:	f7fb ff73 	bl	8000af0 <__aeabi_dcmple>
 8004c0a:	bb48      	cbnz	r0, 8004c60 <_printf_float+0xcc>
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	2300      	movs	r3, #0
 8004c10:	4640      	mov	r0, r8
 8004c12:	4649      	mov	r1, r9
 8004c14:	f7fb ff62 	bl	8000adc <__aeabi_dcmplt>
 8004c18:	b110      	cbz	r0, 8004c20 <_printf_float+0x8c>
 8004c1a:	232d      	movs	r3, #45	; 0x2d
 8004c1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c20:	4a93      	ldr	r2, [pc, #588]	; (8004e70 <_printf_float+0x2dc>)
 8004c22:	4b94      	ldr	r3, [pc, #592]	; (8004e74 <_printf_float+0x2e0>)
 8004c24:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004c28:	bf94      	ite	ls
 8004c2a:	4690      	movls	r8, r2
 8004c2c:	4698      	movhi	r8, r3
 8004c2e:	2303      	movs	r3, #3
 8004c30:	6123      	str	r3, [r4, #16]
 8004c32:	9b05      	ldr	r3, [sp, #20]
 8004c34:	f023 0304 	bic.w	r3, r3, #4
 8004c38:	6023      	str	r3, [r4, #0]
 8004c3a:	f04f 0900 	mov.w	r9, #0
 8004c3e:	9700      	str	r7, [sp, #0]
 8004c40:	4633      	mov	r3, r6
 8004c42:	aa0b      	add	r2, sp, #44	; 0x2c
 8004c44:	4621      	mov	r1, r4
 8004c46:	4628      	mov	r0, r5
 8004c48:	f000 f9da 	bl	8005000 <_printf_common>
 8004c4c:	3001      	adds	r0, #1
 8004c4e:	f040 8090 	bne.w	8004d72 <_printf_float+0x1de>
 8004c52:	f04f 30ff 	mov.w	r0, #4294967295
 8004c56:	b00d      	add	sp, #52	; 0x34
 8004c58:	ecbd 8b02 	vpop	{d8}
 8004c5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c60:	4642      	mov	r2, r8
 8004c62:	464b      	mov	r3, r9
 8004c64:	4640      	mov	r0, r8
 8004c66:	4649      	mov	r1, r9
 8004c68:	f7fb ff60 	bl	8000b2c <__aeabi_dcmpun>
 8004c6c:	b140      	cbz	r0, 8004c80 <_printf_float+0xec>
 8004c6e:	464b      	mov	r3, r9
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	bfbc      	itt	lt
 8004c74:	232d      	movlt	r3, #45	; 0x2d
 8004c76:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004c7a:	4a7f      	ldr	r2, [pc, #508]	; (8004e78 <_printf_float+0x2e4>)
 8004c7c:	4b7f      	ldr	r3, [pc, #508]	; (8004e7c <_printf_float+0x2e8>)
 8004c7e:	e7d1      	b.n	8004c24 <_printf_float+0x90>
 8004c80:	6863      	ldr	r3, [r4, #4]
 8004c82:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8004c86:	9206      	str	r2, [sp, #24]
 8004c88:	1c5a      	adds	r2, r3, #1
 8004c8a:	d13f      	bne.n	8004d0c <_printf_float+0x178>
 8004c8c:	2306      	movs	r3, #6
 8004c8e:	6063      	str	r3, [r4, #4]
 8004c90:	9b05      	ldr	r3, [sp, #20]
 8004c92:	6861      	ldr	r1, [r4, #4]
 8004c94:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004c98:	2300      	movs	r3, #0
 8004c9a:	9303      	str	r3, [sp, #12]
 8004c9c:	ab0a      	add	r3, sp, #40	; 0x28
 8004c9e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8004ca2:	ab09      	add	r3, sp, #36	; 0x24
 8004ca4:	ec49 8b10 	vmov	d0, r8, r9
 8004ca8:	9300      	str	r3, [sp, #0]
 8004caa:	6022      	str	r2, [r4, #0]
 8004cac:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004cb0:	4628      	mov	r0, r5
 8004cb2:	f7ff fecf 	bl	8004a54 <__cvt>
 8004cb6:	9b06      	ldr	r3, [sp, #24]
 8004cb8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004cba:	2b47      	cmp	r3, #71	; 0x47
 8004cbc:	4680      	mov	r8, r0
 8004cbe:	d108      	bne.n	8004cd2 <_printf_float+0x13e>
 8004cc0:	1cc8      	adds	r0, r1, #3
 8004cc2:	db02      	blt.n	8004cca <_printf_float+0x136>
 8004cc4:	6863      	ldr	r3, [r4, #4]
 8004cc6:	4299      	cmp	r1, r3
 8004cc8:	dd41      	ble.n	8004d4e <_printf_float+0x1ba>
 8004cca:	f1ab 0302 	sub.w	r3, fp, #2
 8004cce:	fa5f fb83 	uxtb.w	fp, r3
 8004cd2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004cd6:	d820      	bhi.n	8004d1a <_printf_float+0x186>
 8004cd8:	3901      	subs	r1, #1
 8004cda:	465a      	mov	r2, fp
 8004cdc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004ce0:	9109      	str	r1, [sp, #36]	; 0x24
 8004ce2:	f7ff ff19 	bl	8004b18 <__exponent>
 8004ce6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004ce8:	1813      	adds	r3, r2, r0
 8004cea:	2a01      	cmp	r2, #1
 8004cec:	4681      	mov	r9, r0
 8004cee:	6123      	str	r3, [r4, #16]
 8004cf0:	dc02      	bgt.n	8004cf8 <_printf_float+0x164>
 8004cf2:	6822      	ldr	r2, [r4, #0]
 8004cf4:	07d2      	lsls	r2, r2, #31
 8004cf6:	d501      	bpl.n	8004cfc <_printf_float+0x168>
 8004cf8:	3301      	adds	r3, #1
 8004cfa:	6123      	str	r3, [r4, #16]
 8004cfc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d09c      	beq.n	8004c3e <_printf_float+0xaa>
 8004d04:	232d      	movs	r3, #45	; 0x2d
 8004d06:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d0a:	e798      	b.n	8004c3e <_printf_float+0xaa>
 8004d0c:	9a06      	ldr	r2, [sp, #24]
 8004d0e:	2a47      	cmp	r2, #71	; 0x47
 8004d10:	d1be      	bne.n	8004c90 <_printf_float+0xfc>
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d1bc      	bne.n	8004c90 <_printf_float+0xfc>
 8004d16:	2301      	movs	r3, #1
 8004d18:	e7b9      	b.n	8004c8e <_printf_float+0xfa>
 8004d1a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8004d1e:	d118      	bne.n	8004d52 <_printf_float+0x1be>
 8004d20:	2900      	cmp	r1, #0
 8004d22:	6863      	ldr	r3, [r4, #4]
 8004d24:	dd0b      	ble.n	8004d3e <_printf_float+0x1aa>
 8004d26:	6121      	str	r1, [r4, #16]
 8004d28:	b913      	cbnz	r3, 8004d30 <_printf_float+0x19c>
 8004d2a:	6822      	ldr	r2, [r4, #0]
 8004d2c:	07d0      	lsls	r0, r2, #31
 8004d2e:	d502      	bpl.n	8004d36 <_printf_float+0x1a2>
 8004d30:	3301      	adds	r3, #1
 8004d32:	440b      	add	r3, r1
 8004d34:	6123      	str	r3, [r4, #16]
 8004d36:	65a1      	str	r1, [r4, #88]	; 0x58
 8004d38:	f04f 0900 	mov.w	r9, #0
 8004d3c:	e7de      	b.n	8004cfc <_printf_float+0x168>
 8004d3e:	b913      	cbnz	r3, 8004d46 <_printf_float+0x1b2>
 8004d40:	6822      	ldr	r2, [r4, #0]
 8004d42:	07d2      	lsls	r2, r2, #31
 8004d44:	d501      	bpl.n	8004d4a <_printf_float+0x1b6>
 8004d46:	3302      	adds	r3, #2
 8004d48:	e7f4      	b.n	8004d34 <_printf_float+0x1a0>
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	e7f2      	b.n	8004d34 <_printf_float+0x1a0>
 8004d4e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8004d52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004d54:	4299      	cmp	r1, r3
 8004d56:	db05      	blt.n	8004d64 <_printf_float+0x1d0>
 8004d58:	6823      	ldr	r3, [r4, #0]
 8004d5a:	6121      	str	r1, [r4, #16]
 8004d5c:	07d8      	lsls	r0, r3, #31
 8004d5e:	d5ea      	bpl.n	8004d36 <_printf_float+0x1a2>
 8004d60:	1c4b      	adds	r3, r1, #1
 8004d62:	e7e7      	b.n	8004d34 <_printf_float+0x1a0>
 8004d64:	2900      	cmp	r1, #0
 8004d66:	bfd4      	ite	le
 8004d68:	f1c1 0202 	rsble	r2, r1, #2
 8004d6c:	2201      	movgt	r2, #1
 8004d6e:	4413      	add	r3, r2
 8004d70:	e7e0      	b.n	8004d34 <_printf_float+0x1a0>
 8004d72:	6823      	ldr	r3, [r4, #0]
 8004d74:	055a      	lsls	r2, r3, #21
 8004d76:	d407      	bmi.n	8004d88 <_printf_float+0x1f4>
 8004d78:	6923      	ldr	r3, [r4, #16]
 8004d7a:	4642      	mov	r2, r8
 8004d7c:	4631      	mov	r1, r6
 8004d7e:	4628      	mov	r0, r5
 8004d80:	47b8      	blx	r7
 8004d82:	3001      	adds	r0, #1
 8004d84:	d12c      	bne.n	8004de0 <_printf_float+0x24c>
 8004d86:	e764      	b.n	8004c52 <_printf_float+0xbe>
 8004d88:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004d8c:	f240 80e0 	bls.w	8004f50 <_printf_float+0x3bc>
 8004d90:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004d94:	2200      	movs	r2, #0
 8004d96:	2300      	movs	r3, #0
 8004d98:	f7fb fe96 	bl	8000ac8 <__aeabi_dcmpeq>
 8004d9c:	2800      	cmp	r0, #0
 8004d9e:	d034      	beq.n	8004e0a <_printf_float+0x276>
 8004da0:	4a37      	ldr	r2, [pc, #220]	; (8004e80 <_printf_float+0x2ec>)
 8004da2:	2301      	movs	r3, #1
 8004da4:	4631      	mov	r1, r6
 8004da6:	4628      	mov	r0, r5
 8004da8:	47b8      	blx	r7
 8004daa:	3001      	adds	r0, #1
 8004dac:	f43f af51 	beq.w	8004c52 <_printf_float+0xbe>
 8004db0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004db4:	429a      	cmp	r2, r3
 8004db6:	db02      	blt.n	8004dbe <_printf_float+0x22a>
 8004db8:	6823      	ldr	r3, [r4, #0]
 8004dba:	07d8      	lsls	r0, r3, #31
 8004dbc:	d510      	bpl.n	8004de0 <_printf_float+0x24c>
 8004dbe:	ee18 3a10 	vmov	r3, s16
 8004dc2:	4652      	mov	r2, sl
 8004dc4:	4631      	mov	r1, r6
 8004dc6:	4628      	mov	r0, r5
 8004dc8:	47b8      	blx	r7
 8004dca:	3001      	adds	r0, #1
 8004dcc:	f43f af41 	beq.w	8004c52 <_printf_float+0xbe>
 8004dd0:	f04f 0800 	mov.w	r8, #0
 8004dd4:	f104 091a 	add.w	r9, r4, #26
 8004dd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004dda:	3b01      	subs	r3, #1
 8004ddc:	4543      	cmp	r3, r8
 8004dde:	dc09      	bgt.n	8004df4 <_printf_float+0x260>
 8004de0:	6823      	ldr	r3, [r4, #0]
 8004de2:	079b      	lsls	r3, r3, #30
 8004de4:	f100 8107 	bmi.w	8004ff6 <_printf_float+0x462>
 8004de8:	68e0      	ldr	r0, [r4, #12]
 8004dea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004dec:	4298      	cmp	r0, r3
 8004dee:	bfb8      	it	lt
 8004df0:	4618      	movlt	r0, r3
 8004df2:	e730      	b.n	8004c56 <_printf_float+0xc2>
 8004df4:	2301      	movs	r3, #1
 8004df6:	464a      	mov	r2, r9
 8004df8:	4631      	mov	r1, r6
 8004dfa:	4628      	mov	r0, r5
 8004dfc:	47b8      	blx	r7
 8004dfe:	3001      	adds	r0, #1
 8004e00:	f43f af27 	beq.w	8004c52 <_printf_float+0xbe>
 8004e04:	f108 0801 	add.w	r8, r8, #1
 8004e08:	e7e6      	b.n	8004dd8 <_printf_float+0x244>
 8004e0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	dc39      	bgt.n	8004e84 <_printf_float+0x2f0>
 8004e10:	4a1b      	ldr	r2, [pc, #108]	; (8004e80 <_printf_float+0x2ec>)
 8004e12:	2301      	movs	r3, #1
 8004e14:	4631      	mov	r1, r6
 8004e16:	4628      	mov	r0, r5
 8004e18:	47b8      	blx	r7
 8004e1a:	3001      	adds	r0, #1
 8004e1c:	f43f af19 	beq.w	8004c52 <_printf_float+0xbe>
 8004e20:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8004e24:	4313      	orrs	r3, r2
 8004e26:	d102      	bne.n	8004e2e <_printf_float+0x29a>
 8004e28:	6823      	ldr	r3, [r4, #0]
 8004e2a:	07d9      	lsls	r1, r3, #31
 8004e2c:	d5d8      	bpl.n	8004de0 <_printf_float+0x24c>
 8004e2e:	ee18 3a10 	vmov	r3, s16
 8004e32:	4652      	mov	r2, sl
 8004e34:	4631      	mov	r1, r6
 8004e36:	4628      	mov	r0, r5
 8004e38:	47b8      	blx	r7
 8004e3a:	3001      	adds	r0, #1
 8004e3c:	f43f af09 	beq.w	8004c52 <_printf_float+0xbe>
 8004e40:	f04f 0900 	mov.w	r9, #0
 8004e44:	f104 0a1a 	add.w	sl, r4, #26
 8004e48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e4a:	425b      	negs	r3, r3
 8004e4c:	454b      	cmp	r3, r9
 8004e4e:	dc01      	bgt.n	8004e54 <_printf_float+0x2c0>
 8004e50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004e52:	e792      	b.n	8004d7a <_printf_float+0x1e6>
 8004e54:	2301      	movs	r3, #1
 8004e56:	4652      	mov	r2, sl
 8004e58:	4631      	mov	r1, r6
 8004e5a:	4628      	mov	r0, r5
 8004e5c:	47b8      	blx	r7
 8004e5e:	3001      	adds	r0, #1
 8004e60:	f43f aef7 	beq.w	8004c52 <_printf_float+0xbe>
 8004e64:	f109 0901 	add.w	r9, r9, #1
 8004e68:	e7ee      	b.n	8004e48 <_printf_float+0x2b4>
 8004e6a:	bf00      	nop
 8004e6c:	7fefffff 	.word	0x7fefffff
 8004e70:	080094d4 	.word	0x080094d4
 8004e74:	080094d8 	.word	0x080094d8
 8004e78:	080094dc 	.word	0x080094dc
 8004e7c:	080094e0 	.word	0x080094e0
 8004e80:	080094e4 	.word	0x080094e4
 8004e84:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004e86:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004e88:	429a      	cmp	r2, r3
 8004e8a:	bfa8      	it	ge
 8004e8c:	461a      	movge	r2, r3
 8004e8e:	2a00      	cmp	r2, #0
 8004e90:	4691      	mov	r9, r2
 8004e92:	dc37      	bgt.n	8004f04 <_printf_float+0x370>
 8004e94:	f04f 0b00 	mov.w	fp, #0
 8004e98:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004e9c:	f104 021a 	add.w	r2, r4, #26
 8004ea0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004ea2:	9305      	str	r3, [sp, #20]
 8004ea4:	eba3 0309 	sub.w	r3, r3, r9
 8004ea8:	455b      	cmp	r3, fp
 8004eaa:	dc33      	bgt.n	8004f14 <_printf_float+0x380>
 8004eac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004eb0:	429a      	cmp	r2, r3
 8004eb2:	db3b      	blt.n	8004f2c <_printf_float+0x398>
 8004eb4:	6823      	ldr	r3, [r4, #0]
 8004eb6:	07da      	lsls	r2, r3, #31
 8004eb8:	d438      	bmi.n	8004f2c <_printf_float+0x398>
 8004eba:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8004ebe:	eba2 0903 	sub.w	r9, r2, r3
 8004ec2:	9b05      	ldr	r3, [sp, #20]
 8004ec4:	1ad2      	subs	r2, r2, r3
 8004ec6:	4591      	cmp	r9, r2
 8004ec8:	bfa8      	it	ge
 8004eca:	4691      	movge	r9, r2
 8004ecc:	f1b9 0f00 	cmp.w	r9, #0
 8004ed0:	dc35      	bgt.n	8004f3e <_printf_float+0x3aa>
 8004ed2:	f04f 0800 	mov.w	r8, #0
 8004ed6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004eda:	f104 0a1a 	add.w	sl, r4, #26
 8004ede:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004ee2:	1a9b      	subs	r3, r3, r2
 8004ee4:	eba3 0309 	sub.w	r3, r3, r9
 8004ee8:	4543      	cmp	r3, r8
 8004eea:	f77f af79 	ble.w	8004de0 <_printf_float+0x24c>
 8004eee:	2301      	movs	r3, #1
 8004ef0:	4652      	mov	r2, sl
 8004ef2:	4631      	mov	r1, r6
 8004ef4:	4628      	mov	r0, r5
 8004ef6:	47b8      	blx	r7
 8004ef8:	3001      	adds	r0, #1
 8004efa:	f43f aeaa 	beq.w	8004c52 <_printf_float+0xbe>
 8004efe:	f108 0801 	add.w	r8, r8, #1
 8004f02:	e7ec      	b.n	8004ede <_printf_float+0x34a>
 8004f04:	4613      	mov	r3, r2
 8004f06:	4631      	mov	r1, r6
 8004f08:	4642      	mov	r2, r8
 8004f0a:	4628      	mov	r0, r5
 8004f0c:	47b8      	blx	r7
 8004f0e:	3001      	adds	r0, #1
 8004f10:	d1c0      	bne.n	8004e94 <_printf_float+0x300>
 8004f12:	e69e      	b.n	8004c52 <_printf_float+0xbe>
 8004f14:	2301      	movs	r3, #1
 8004f16:	4631      	mov	r1, r6
 8004f18:	4628      	mov	r0, r5
 8004f1a:	9205      	str	r2, [sp, #20]
 8004f1c:	47b8      	blx	r7
 8004f1e:	3001      	adds	r0, #1
 8004f20:	f43f ae97 	beq.w	8004c52 <_printf_float+0xbe>
 8004f24:	9a05      	ldr	r2, [sp, #20]
 8004f26:	f10b 0b01 	add.w	fp, fp, #1
 8004f2a:	e7b9      	b.n	8004ea0 <_printf_float+0x30c>
 8004f2c:	ee18 3a10 	vmov	r3, s16
 8004f30:	4652      	mov	r2, sl
 8004f32:	4631      	mov	r1, r6
 8004f34:	4628      	mov	r0, r5
 8004f36:	47b8      	blx	r7
 8004f38:	3001      	adds	r0, #1
 8004f3a:	d1be      	bne.n	8004eba <_printf_float+0x326>
 8004f3c:	e689      	b.n	8004c52 <_printf_float+0xbe>
 8004f3e:	9a05      	ldr	r2, [sp, #20]
 8004f40:	464b      	mov	r3, r9
 8004f42:	4442      	add	r2, r8
 8004f44:	4631      	mov	r1, r6
 8004f46:	4628      	mov	r0, r5
 8004f48:	47b8      	blx	r7
 8004f4a:	3001      	adds	r0, #1
 8004f4c:	d1c1      	bne.n	8004ed2 <_printf_float+0x33e>
 8004f4e:	e680      	b.n	8004c52 <_printf_float+0xbe>
 8004f50:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004f52:	2a01      	cmp	r2, #1
 8004f54:	dc01      	bgt.n	8004f5a <_printf_float+0x3c6>
 8004f56:	07db      	lsls	r3, r3, #31
 8004f58:	d53a      	bpl.n	8004fd0 <_printf_float+0x43c>
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	4642      	mov	r2, r8
 8004f5e:	4631      	mov	r1, r6
 8004f60:	4628      	mov	r0, r5
 8004f62:	47b8      	blx	r7
 8004f64:	3001      	adds	r0, #1
 8004f66:	f43f ae74 	beq.w	8004c52 <_printf_float+0xbe>
 8004f6a:	ee18 3a10 	vmov	r3, s16
 8004f6e:	4652      	mov	r2, sl
 8004f70:	4631      	mov	r1, r6
 8004f72:	4628      	mov	r0, r5
 8004f74:	47b8      	blx	r7
 8004f76:	3001      	adds	r0, #1
 8004f78:	f43f ae6b 	beq.w	8004c52 <_printf_float+0xbe>
 8004f7c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004f80:	2200      	movs	r2, #0
 8004f82:	2300      	movs	r3, #0
 8004f84:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8004f88:	f7fb fd9e 	bl	8000ac8 <__aeabi_dcmpeq>
 8004f8c:	b9d8      	cbnz	r0, 8004fc6 <_printf_float+0x432>
 8004f8e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8004f92:	f108 0201 	add.w	r2, r8, #1
 8004f96:	4631      	mov	r1, r6
 8004f98:	4628      	mov	r0, r5
 8004f9a:	47b8      	blx	r7
 8004f9c:	3001      	adds	r0, #1
 8004f9e:	d10e      	bne.n	8004fbe <_printf_float+0x42a>
 8004fa0:	e657      	b.n	8004c52 <_printf_float+0xbe>
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	4652      	mov	r2, sl
 8004fa6:	4631      	mov	r1, r6
 8004fa8:	4628      	mov	r0, r5
 8004faa:	47b8      	blx	r7
 8004fac:	3001      	adds	r0, #1
 8004fae:	f43f ae50 	beq.w	8004c52 <_printf_float+0xbe>
 8004fb2:	f108 0801 	add.w	r8, r8, #1
 8004fb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004fb8:	3b01      	subs	r3, #1
 8004fba:	4543      	cmp	r3, r8
 8004fbc:	dcf1      	bgt.n	8004fa2 <_printf_float+0x40e>
 8004fbe:	464b      	mov	r3, r9
 8004fc0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004fc4:	e6da      	b.n	8004d7c <_printf_float+0x1e8>
 8004fc6:	f04f 0800 	mov.w	r8, #0
 8004fca:	f104 0a1a 	add.w	sl, r4, #26
 8004fce:	e7f2      	b.n	8004fb6 <_printf_float+0x422>
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	4642      	mov	r2, r8
 8004fd4:	e7df      	b.n	8004f96 <_printf_float+0x402>
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	464a      	mov	r2, r9
 8004fda:	4631      	mov	r1, r6
 8004fdc:	4628      	mov	r0, r5
 8004fde:	47b8      	blx	r7
 8004fe0:	3001      	adds	r0, #1
 8004fe2:	f43f ae36 	beq.w	8004c52 <_printf_float+0xbe>
 8004fe6:	f108 0801 	add.w	r8, r8, #1
 8004fea:	68e3      	ldr	r3, [r4, #12]
 8004fec:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004fee:	1a5b      	subs	r3, r3, r1
 8004ff0:	4543      	cmp	r3, r8
 8004ff2:	dcf0      	bgt.n	8004fd6 <_printf_float+0x442>
 8004ff4:	e6f8      	b.n	8004de8 <_printf_float+0x254>
 8004ff6:	f04f 0800 	mov.w	r8, #0
 8004ffa:	f104 0919 	add.w	r9, r4, #25
 8004ffe:	e7f4      	b.n	8004fea <_printf_float+0x456>

08005000 <_printf_common>:
 8005000:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005004:	4616      	mov	r6, r2
 8005006:	4699      	mov	r9, r3
 8005008:	688a      	ldr	r2, [r1, #8]
 800500a:	690b      	ldr	r3, [r1, #16]
 800500c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005010:	4293      	cmp	r3, r2
 8005012:	bfb8      	it	lt
 8005014:	4613      	movlt	r3, r2
 8005016:	6033      	str	r3, [r6, #0]
 8005018:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800501c:	4607      	mov	r7, r0
 800501e:	460c      	mov	r4, r1
 8005020:	b10a      	cbz	r2, 8005026 <_printf_common+0x26>
 8005022:	3301      	adds	r3, #1
 8005024:	6033      	str	r3, [r6, #0]
 8005026:	6823      	ldr	r3, [r4, #0]
 8005028:	0699      	lsls	r1, r3, #26
 800502a:	bf42      	ittt	mi
 800502c:	6833      	ldrmi	r3, [r6, #0]
 800502e:	3302      	addmi	r3, #2
 8005030:	6033      	strmi	r3, [r6, #0]
 8005032:	6825      	ldr	r5, [r4, #0]
 8005034:	f015 0506 	ands.w	r5, r5, #6
 8005038:	d106      	bne.n	8005048 <_printf_common+0x48>
 800503a:	f104 0a19 	add.w	sl, r4, #25
 800503e:	68e3      	ldr	r3, [r4, #12]
 8005040:	6832      	ldr	r2, [r6, #0]
 8005042:	1a9b      	subs	r3, r3, r2
 8005044:	42ab      	cmp	r3, r5
 8005046:	dc26      	bgt.n	8005096 <_printf_common+0x96>
 8005048:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800504c:	1e13      	subs	r3, r2, #0
 800504e:	6822      	ldr	r2, [r4, #0]
 8005050:	bf18      	it	ne
 8005052:	2301      	movne	r3, #1
 8005054:	0692      	lsls	r2, r2, #26
 8005056:	d42b      	bmi.n	80050b0 <_printf_common+0xb0>
 8005058:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800505c:	4649      	mov	r1, r9
 800505e:	4638      	mov	r0, r7
 8005060:	47c0      	blx	r8
 8005062:	3001      	adds	r0, #1
 8005064:	d01e      	beq.n	80050a4 <_printf_common+0xa4>
 8005066:	6823      	ldr	r3, [r4, #0]
 8005068:	6922      	ldr	r2, [r4, #16]
 800506a:	f003 0306 	and.w	r3, r3, #6
 800506e:	2b04      	cmp	r3, #4
 8005070:	bf02      	ittt	eq
 8005072:	68e5      	ldreq	r5, [r4, #12]
 8005074:	6833      	ldreq	r3, [r6, #0]
 8005076:	1aed      	subeq	r5, r5, r3
 8005078:	68a3      	ldr	r3, [r4, #8]
 800507a:	bf0c      	ite	eq
 800507c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005080:	2500      	movne	r5, #0
 8005082:	4293      	cmp	r3, r2
 8005084:	bfc4      	itt	gt
 8005086:	1a9b      	subgt	r3, r3, r2
 8005088:	18ed      	addgt	r5, r5, r3
 800508a:	2600      	movs	r6, #0
 800508c:	341a      	adds	r4, #26
 800508e:	42b5      	cmp	r5, r6
 8005090:	d11a      	bne.n	80050c8 <_printf_common+0xc8>
 8005092:	2000      	movs	r0, #0
 8005094:	e008      	b.n	80050a8 <_printf_common+0xa8>
 8005096:	2301      	movs	r3, #1
 8005098:	4652      	mov	r2, sl
 800509a:	4649      	mov	r1, r9
 800509c:	4638      	mov	r0, r7
 800509e:	47c0      	blx	r8
 80050a0:	3001      	adds	r0, #1
 80050a2:	d103      	bne.n	80050ac <_printf_common+0xac>
 80050a4:	f04f 30ff 	mov.w	r0, #4294967295
 80050a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050ac:	3501      	adds	r5, #1
 80050ae:	e7c6      	b.n	800503e <_printf_common+0x3e>
 80050b0:	18e1      	adds	r1, r4, r3
 80050b2:	1c5a      	adds	r2, r3, #1
 80050b4:	2030      	movs	r0, #48	; 0x30
 80050b6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80050ba:	4422      	add	r2, r4
 80050bc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80050c0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80050c4:	3302      	adds	r3, #2
 80050c6:	e7c7      	b.n	8005058 <_printf_common+0x58>
 80050c8:	2301      	movs	r3, #1
 80050ca:	4622      	mov	r2, r4
 80050cc:	4649      	mov	r1, r9
 80050ce:	4638      	mov	r0, r7
 80050d0:	47c0      	blx	r8
 80050d2:	3001      	adds	r0, #1
 80050d4:	d0e6      	beq.n	80050a4 <_printf_common+0xa4>
 80050d6:	3601      	adds	r6, #1
 80050d8:	e7d9      	b.n	800508e <_printf_common+0x8e>
	...

080050dc <_printf_i>:
 80050dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80050e0:	7e0f      	ldrb	r7, [r1, #24]
 80050e2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80050e4:	2f78      	cmp	r7, #120	; 0x78
 80050e6:	4691      	mov	r9, r2
 80050e8:	4680      	mov	r8, r0
 80050ea:	460c      	mov	r4, r1
 80050ec:	469a      	mov	sl, r3
 80050ee:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80050f2:	d807      	bhi.n	8005104 <_printf_i+0x28>
 80050f4:	2f62      	cmp	r7, #98	; 0x62
 80050f6:	d80a      	bhi.n	800510e <_printf_i+0x32>
 80050f8:	2f00      	cmp	r7, #0
 80050fa:	f000 80d4 	beq.w	80052a6 <_printf_i+0x1ca>
 80050fe:	2f58      	cmp	r7, #88	; 0x58
 8005100:	f000 80c0 	beq.w	8005284 <_printf_i+0x1a8>
 8005104:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005108:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800510c:	e03a      	b.n	8005184 <_printf_i+0xa8>
 800510e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005112:	2b15      	cmp	r3, #21
 8005114:	d8f6      	bhi.n	8005104 <_printf_i+0x28>
 8005116:	a101      	add	r1, pc, #4	; (adr r1, 800511c <_printf_i+0x40>)
 8005118:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800511c:	08005175 	.word	0x08005175
 8005120:	08005189 	.word	0x08005189
 8005124:	08005105 	.word	0x08005105
 8005128:	08005105 	.word	0x08005105
 800512c:	08005105 	.word	0x08005105
 8005130:	08005105 	.word	0x08005105
 8005134:	08005189 	.word	0x08005189
 8005138:	08005105 	.word	0x08005105
 800513c:	08005105 	.word	0x08005105
 8005140:	08005105 	.word	0x08005105
 8005144:	08005105 	.word	0x08005105
 8005148:	0800528d 	.word	0x0800528d
 800514c:	080051b5 	.word	0x080051b5
 8005150:	08005247 	.word	0x08005247
 8005154:	08005105 	.word	0x08005105
 8005158:	08005105 	.word	0x08005105
 800515c:	080052af 	.word	0x080052af
 8005160:	08005105 	.word	0x08005105
 8005164:	080051b5 	.word	0x080051b5
 8005168:	08005105 	.word	0x08005105
 800516c:	08005105 	.word	0x08005105
 8005170:	0800524f 	.word	0x0800524f
 8005174:	682b      	ldr	r3, [r5, #0]
 8005176:	1d1a      	adds	r2, r3, #4
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	602a      	str	r2, [r5, #0]
 800517c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005180:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005184:	2301      	movs	r3, #1
 8005186:	e09f      	b.n	80052c8 <_printf_i+0x1ec>
 8005188:	6820      	ldr	r0, [r4, #0]
 800518a:	682b      	ldr	r3, [r5, #0]
 800518c:	0607      	lsls	r7, r0, #24
 800518e:	f103 0104 	add.w	r1, r3, #4
 8005192:	6029      	str	r1, [r5, #0]
 8005194:	d501      	bpl.n	800519a <_printf_i+0xbe>
 8005196:	681e      	ldr	r6, [r3, #0]
 8005198:	e003      	b.n	80051a2 <_printf_i+0xc6>
 800519a:	0646      	lsls	r6, r0, #25
 800519c:	d5fb      	bpl.n	8005196 <_printf_i+0xba>
 800519e:	f9b3 6000 	ldrsh.w	r6, [r3]
 80051a2:	2e00      	cmp	r6, #0
 80051a4:	da03      	bge.n	80051ae <_printf_i+0xd2>
 80051a6:	232d      	movs	r3, #45	; 0x2d
 80051a8:	4276      	negs	r6, r6
 80051aa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80051ae:	485a      	ldr	r0, [pc, #360]	; (8005318 <_printf_i+0x23c>)
 80051b0:	230a      	movs	r3, #10
 80051b2:	e012      	b.n	80051da <_printf_i+0xfe>
 80051b4:	682b      	ldr	r3, [r5, #0]
 80051b6:	6820      	ldr	r0, [r4, #0]
 80051b8:	1d19      	adds	r1, r3, #4
 80051ba:	6029      	str	r1, [r5, #0]
 80051bc:	0605      	lsls	r5, r0, #24
 80051be:	d501      	bpl.n	80051c4 <_printf_i+0xe8>
 80051c0:	681e      	ldr	r6, [r3, #0]
 80051c2:	e002      	b.n	80051ca <_printf_i+0xee>
 80051c4:	0641      	lsls	r1, r0, #25
 80051c6:	d5fb      	bpl.n	80051c0 <_printf_i+0xe4>
 80051c8:	881e      	ldrh	r6, [r3, #0]
 80051ca:	4853      	ldr	r0, [pc, #332]	; (8005318 <_printf_i+0x23c>)
 80051cc:	2f6f      	cmp	r7, #111	; 0x6f
 80051ce:	bf0c      	ite	eq
 80051d0:	2308      	moveq	r3, #8
 80051d2:	230a      	movne	r3, #10
 80051d4:	2100      	movs	r1, #0
 80051d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80051da:	6865      	ldr	r5, [r4, #4]
 80051dc:	60a5      	str	r5, [r4, #8]
 80051de:	2d00      	cmp	r5, #0
 80051e0:	bfa2      	ittt	ge
 80051e2:	6821      	ldrge	r1, [r4, #0]
 80051e4:	f021 0104 	bicge.w	r1, r1, #4
 80051e8:	6021      	strge	r1, [r4, #0]
 80051ea:	b90e      	cbnz	r6, 80051f0 <_printf_i+0x114>
 80051ec:	2d00      	cmp	r5, #0
 80051ee:	d04b      	beq.n	8005288 <_printf_i+0x1ac>
 80051f0:	4615      	mov	r5, r2
 80051f2:	fbb6 f1f3 	udiv	r1, r6, r3
 80051f6:	fb03 6711 	mls	r7, r3, r1, r6
 80051fa:	5dc7      	ldrb	r7, [r0, r7]
 80051fc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005200:	4637      	mov	r7, r6
 8005202:	42bb      	cmp	r3, r7
 8005204:	460e      	mov	r6, r1
 8005206:	d9f4      	bls.n	80051f2 <_printf_i+0x116>
 8005208:	2b08      	cmp	r3, #8
 800520a:	d10b      	bne.n	8005224 <_printf_i+0x148>
 800520c:	6823      	ldr	r3, [r4, #0]
 800520e:	07de      	lsls	r6, r3, #31
 8005210:	d508      	bpl.n	8005224 <_printf_i+0x148>
 8005212:	6923      	ldr	r3, [r4, #16]
 8005214:	6861      	ldr	r1, [r4, #4]
 8005216:	4299      	cmp	r1, r3
 8005218:	bfde      	ittt	le
 800521a:	2330      	movle	r3, #48	; 0x30
 800521c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005220:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005224:	1b52      	subs	r2, r2, r5
 8005226:	6122      	str	r2, [r4, #16]
 8005228:	f8cd a000 	str.w	sl, [sp]
 800522c:	464b      	mov	r3, r9
 800522e:	aa03      	add	r2, sp, #12
 8005230:	4621      	mov	r1, r4
 8005232:	4640      	mov	r0, r8
 8005234:	f7ff fee4 	bl	8005000 <_printf_common>
 8005238:	3001      	adds	r0, #1
 800523a:	d14a      	bne.n	80052d2 <_printf_i+0x1f6>
 800523c:	f04f 30ff 	mov.w	r0, #4294967295
 8005240:	b004      	add	sp, #16
 8005242:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005246:	6823      	ldr	r3, [r4, #0]
 8005248:	f043 0320 	orr.w	r3, r3, #32
 800524c:	6023      	str	r3, [r4, #0]
 800524e:	4833      	ldr	r0, [pc, #204]	; (800531c <_printf_i+0x240>)
 8005250:	2778      	movs	r7, #120	; 0x78
 8005252:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005256:	6823      	ldr	r3, [r4, #0]
 8005258:	6829      	ldr	r1, [r5, #0]
 800525a:	061f      	lsls	r7, r3, #24
 800525c:	f851 6b04 	ldr.w	r6, [r1], #4
 8005260:	d402      	bmi.n	8005268 <_printf_i+0x18c>
 8005262:	065f      	lsls	r7, r3, #25
 8005264:	bf48      	it	mi
 8005266:	b2b6      	uxthmi	r6, r6
 8005268:	07df      	lsls	r7, r3, #31
 800526a:	bf48      	it	mi
 800526c:	f043 0320 	orrmi.w	r3, r3, #32
 8005270:	6029      	str	r1, [r5, #0]
 8005272:	bf48      	it	mi
 8005274:	6023      	strmi	r3, [r4, #0]
 8005276:	b91e      	cbnz	r6, 8005280 <_printf_i+0x1a4>
 8005278:	6823      	ldr	r3, [r4, #0]
 800527a:	f023 0320 	bic.w	r3, r3, #32
 800527e:	6023      	str	r3, [r4, #0]
 8005280:	2310      	movs	r3, #16
 8005282:	e7a7      	b.n	80051d4 <_printf_i+0xf8>
 8005284:	4824      	ldr	r0, [pc, #144]	; (8005318 <_printf_i+0x23c>)
 8005286:	e7e4      	b.n	8005252 <_printf_i+0x176>
 8005288:	4615      	mov	r5, r2
 800528a:	e7bd      	b.n	8005208 <_printf_i+0x12c>
 800528c:	682b      	ldr	r3, [r5, #0]
 800528e:	6826      	ldr	r6, [r4, #0]
 8005290:	6961      	ldr	r1, [r4, #20]
 8005292:	1d18      	adds	r0, r3, #4
 8005294:	6028      	str	r0, [r5, #0]
 8005296:	0635      	lsls	r5, r6, #24
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	d501      	bpl.n	80052a0 <_printf_i+0x1c4>
 800529c:	6019      	str	r1, [r3, #0]
 800529e:	e002      	b.n	80052a6 <_printf_i+0x1ca>
 80052a0:	0670      	lsls	r0, r6, #25
 80052a2:	d5fb      	bpl.n	800529c <_printf_i+0x1c0>
 80052a4:	8019      	strh	r1, [r3, #0]
 80052a6:	2300      	movs	r3, #0
 80052a8:	6123      	str	r3, [r4, #16]
 80052aa:	4615      	mov	r5, r2
 80052ac:	e7bc      	b.n	8005228 <_printf_i+0x14c>
 80052ae:	682b      	ldr	r3, [r5, #0]
 80052b0:	1d1a      	adds	r2, r3, #4
 80052b2:	602a      	str	r2, [r5, #0]
 80052b4:	681d      	ldr	r5, [r3, #0]
 80052b6:	6862      	ldr	r2, [r4, #4]
 80052b8:	2100      	movs	r1, #0
 80052ba:	4628      	mov	r0, r5
 80052bc:	f7fa ff88 	bl	80001d0 <memchr>
 80052c0:	b108      	cbz	r0, 80052c6 <_printf_i+0x1ea>
 80052c2:	1b40      	subs	r0, r0, r5
 80052c4:	6060      	str	r0, [r4, #4]
 80052c6:	6863      	ldr	r3, [r4, #4]
 80052c8:	6123      	str	r3, [r4, #16]
 80052ca:	2300      	movs	r3, #0
 80052cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80052d0:	e7aa      	b.n	8005228 <_printf_i+0x14c>
 80052d2:	6923      	ldr	r3, [r4, #16]
 80052d4:	462a      	mov	r2, r5
 80052d6:	4649      	mov	r1, r9
 80052d8:	4640      	mov	r0, r8
 80052da:	47d0      	blx	sl
 80052dc:	3001      	adds	r0, #1
 80052de:	d0ad      	beq.n	800523c <_printf_i+0x160>
 80052e0:	6823      	ldr	r3, [r4, #0]
 80052e2:	079b      	lsls	r3, r3, #30
 80052e4:	d413      	bmi.n	800530e <_printf_i+0x232>
 80052e6:	68e0      	ldr	r0, [r4, #12]
 80052e8:	9b03      	ldr	r3, [sp, #12]
 80052ea:	4298      	cmp	r0, r3
 80052ec:	bfb8      	it	lt
 80052ee:	4618      	movlt	r0, r3
 80052f0:	e7a6      	b.n	8005240 <_printf_i+0x164>
 80052f2:	2301      	movs	r3, #1
 80052f4:	4632      	mov	r2, r6
 80052f6:	4649      	mov	r1, r9
 80052f8:	4640      	mov	r0, r8
 80052fa:	47d0      	blx	sl
 80052fc:	3001      	adds	r0, #1
 80052fe:	d09d      	beq.n	800523c <_printf_i+0x160>
 8005300:	3501      	adds	r5, #1
 8005302:	68e3      	ldr	r3, [r4, #12]
 8005304:	9903      	ldr	r1, [sp, #12]
 8005306:	1a5b      	subs	r3, r3, r1
 8005308:	42ab      	cmp	r3, r5
 800530a:	dcf2      	bgt.n	80052f2 <_printf_i+0x216>
 800530c:	e7eb      	b.n	80052e6 <_printf_i+0x20a>
 800530e:	2500      	movs	r5, #0
 8005310:	f104 0619 	add.w	r6, r4, #25
 8005314:	e7f5      	b.n	8005302 <_printf_i+0x226>
 8005316:	bf00      	nop
 8005318:	080094e6 	.word	0x080094e6
 800531c:	080094f7 	.word	0x080094f7

08005320 <std>:
 8005320:	2300      	movs	r3, #0
 8005322:	b510      	push	{r4, lr}
 8005324:	4604      	mov	r4, r0
 8005326:	e9c0 3300 	strd	r3, r3, [r0]
 800532a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800532e:	6083      	str	r3, [r0, #8]
 8005330:	8181      	strh	r1, [r0, #12]
 8005332:	6643      	str	r3, [r0, #100]	; 0x64
 8005334:	81c2      	strh	r2, [r0, #14]
 8005336:	6183      	str	r3, [r0, #24]
 8005338:	4619      	mov	r1, r3
 800533a:	2208      	movs	r2, #8
 800533c:	305c      	adds	r0, #92	; 0x5c
 800533e:	f000 f914 	bl	800556a <memset>
 8005342:	4b0d      	ldr	r3, [pc, #52]	; (8005378 <std+0x58>)
 8005344:	6263      	str	r3, [r4, #36]	; 0x24
 8005346:	4b0d      	ldr	r3, [pc, #52]	; (800537c <std+0x5c>)
 8005348:	62a3      	str	r3, [r4, #40]	; 0x28
 800534a:	4b0d      	ldr	r3, [pc, #52]	; (8005380 <std+0x60>)
 800534c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800534e:	4b0d      	ldr	r3, [pc, #52]	; (8005384 <std+0x64>)
 8005350:	6323      	str	r3, [r4, #48]	; 0x30
 8005352:	4b0d      	ldr	r3, [pc, #52]	; (8005388 <std+0x68>)
 8005354:	6224      	str	r4, [r4, #32]
 8005356:	429c      	cmp	r4, r3
 8005358:	d006      	beq.n	8005368 <std+0x48>
 800535a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800535e:	4294      	cmp	r4, r2
 8005360:	d002      	beq.n	8005368 <std+0x48>
 8005362:	33d0      	adds	r3, #208	; 0xd0
 8005364:	429c      	cmp	r4, r3
 8005366:	d105      	bne.n	8005374 <std+0x54>
 8005368:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800536c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005370:	f000 b978 	b.w	8005664 <__retarget_lock_init_recursive>
 8005374:	bd10      	pop	{r4, pc}
 8005376:	bf00      	nop
 8005378:	080054e5 	.word	0x080054e5
 800537c:	08005507 	.word	0x08005507
 8005380:	0800553f 	.word	0x0800553f
 8005384:	08005563 	.word	0x08005563
 8005388:	200123b0 	.word	0x200123b0

0800538c <stdio_exit_handler>:
 800538c:	4a02      	ldr	r2, [pc, #8]	; (8005398 <stdio_exit_handler+0xc>)
 800538e:	4903      	ldr	r1, [pc, #12]	; (800539c <stdio_exit_handler+0x10>)
 8005390:	4803      	ldr	r0, [pc, #12]	; (80053a0 <stdio_exit_handler+0x14>)
 8005392:	f000 b869 	b.w	8005468 <_fwalk_sglue>
 8005396:	bf00      	nop
 8005398:	2000000c 	.word	0x2000000c
 800539c:	08007019 	.word	0x08007019
 80053a0:	20000018 	.word	0x20000018

080053a4 <cleanup_stdio>:
 80053a4:	6841      	ldr	r1, [r0, #4]
 80053a6:	4b0c      	ldr	r3, [pc, #48]	; (80053d8 <cleanup_stdio+0x34>)
 80053a8:	4299      	cmp	r1, r3
 80053aa:	b510      	push	{r4, lr}
 80053ac:	4604      	mov	r4, r0
 80053ae:	d001      	beq.n	80053b4 <cleanup_stdio+0x10>
 80053b0:	f001 fe32 	bl	8007018 <_fflush_r>
 80053b4:	68a1      	ldr	r1, [r4, #8]
 80053b6:	4b09      	ldr	r3, [pc, #36]	; (80053dc <cleanup_stdio+0x38>)
 80053b8:	4299      	cmp	r1, r3
 80053ba:	d002      	beq.n	80053c2 <cleanup_stdio+0x1e>
 80053bc:	4620      	mov	r0, r4
 80053be:	f001 fe2b 	bl	8007018 <_fflush_r>
 80053c2:	68e1      	ldr	r1, [r4, #12]
 80053c4:	4b06      	ldr	r3, [pc, #24]	; (80053e0 <cleanup_stdio+0x3c>)
 80053c6:	4299      	cmp	r1, r3
 80053c8:	d004      	beq.n	80053d4 <cleanup_stdio+0x30>
 80053ca:	4620      	mov	r0, r4
 80053cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80053d0:	f001 be22 	b.w	8007018 <_fflush_r>
 80053d4:	bd10      	pop	{r4, pc}
 80053d6:	bf00      	nop
 80053d8:	200123b0 	.word	0x200123b0
 80053dc:	20012418 	.word	0x20012418
 80053e0:	20012480 	.word	0x20012480

080053e4 <global_stdio_init.part.0>:
 80053e4:	b510      	push	{r4, lr}
 80053e6:	4b0b      	ldr	r3, [pc, #44]	; (8005414 <global_stdio_init.part.0+0x30>)
 80053e8:	4c0b      	ldr	r4, [pc, #44]	; (8005418 <global_stdio_init.part.0+0x34>)
 80053ea:	4a0c      	ldr	r2, [pc, #48]	; (800541c <global_stdio_init.part.0+0x38>)
 80053ec:	601a      	str	r2, [r3, #0]
 80053ee:	4620      	mov	r0, r4
 80053f0:	2200      	movs	r2, #0
 80053f2:	2104      	movs	r1, #4
 80053f4:	f7ff ff94 	bl	8005320 <std>
 80053f8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80053fc:	2201      	movs	r2, #1
 80053fe:	2109      	movs	r1, #9
 8005400:	f7ff ff8e 	bl	8005320 <std>
 8005404:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005408:	2202      	movs	r2, #2
 800540a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800540e:	2112      	movs	r1, #18
 8005410:	f7ff bf86 	b.w	8005320 <std>
 8005414:	200124e8 	.word	0x200124e8
 8005418:	200123b0 	.word	0x200123b0
 800541c:	0800538d 	.word	0x0800538d

08005420 <__sfp_lock_acquire>:
 8005420:	4801      	ldr	r0, [pc, #4]	; (8005428 <__sfp_lock_acquire+0x8>)
 8005422:	f000 b920 	b.w	8005666 <__retarget_lock_acquire_recursive>
 8005426:	bf00      	nop
 8005428:	200124f1 	.word	0x200124f1

0800542c <__sfp_lock_release>:
 800542c:	4801      	ldr	r0, [pc, #4]	; (8005434 <__sfp_lock_release+0x8>)
 800542e:	f000 b91b 	b.w	8005668 <__retarget_lock_release_recursive>
 8005432:	bf00      	nop
 8005434:	200124f1 	.word	0x200124f1

08005438 <__sinit>:
 8005438:	b510      	push	{r4, lr}
 800543a:	4604      	mov	r4, r0
 800543c:	f7ff fff0 	bl	8005420 <__sfp_lock_acquire>
 8005440:	6a23      	ldr	r3, [r4, #32]
 8005442:	b11b      	cbz	r3, 800544c <__sinit+0x14>
 8005444:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005448:	f7ff bff0 	b.w	800542c <__sfp_lock_release>
 800544c:	4b04      	ldr	r3, [pc, #16]	; (8005460 <__sinit+0x28>)
 800544e:	6223      	str	r3, [r4, #32]
 8005450:	4b04      	ldr	r3, [pc, #16]	; (8005464 <__sinit+0x2c>)
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d1f5      	bne.n	8005444 <__sinit+0xc>
 8005458:	f7ff ffc4 	bl	80053e4 <global_stdio_init.part.0>
 800545c:	e7f2      	b.n	8005444 <__sinit+0xc>
 800545e:	bf00      	nop
 8005460:	080053a5 	.word	0x080053a5
 8005464:	200124e8 	.word	0x200124e8

08005468 <_fwalk_sglue>:
 8005468:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800546c:	4607      	mov	r7, r0
 800546e:	4688      	mov	r8, r1
 8005470:	4614      	mov	r4, r2
 8005472:	2600      	movs	r6, #0
 8005474:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005478:	f1b9 0901 	subs.w	r9, r9, #1
 800547c:	d505      	bpl.n	800548a <_fwalk_sglue+0x22>
 800547e:	6824      	ldr	r4, [r4, #0]
 8005480:	2c00      	cmp	r4, #0
 8005482:	d1f7      	bne.n	8005474 <_fwalk_sglue+0xc>
 8005484:	4630      	mov	r0, r6
 8005486:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800548a:	89ab      	ldrh	r3, [r5, #12]
 800548c:	2b01      	cmp	r3, #1
 800548e:	d907      	bls.n	80054a0 <_fwalk_sglue+0x38>
 8005490:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005494:	3301      	adds	r3, #1
 8005496:	d003      	beq.n	80054a0 <_fwalk_sglue+0x38>
 8005498:	4629      	mov	r1, r5
 800549a:	4638      	mov	r0, r7
 800549c:	47c0      	blx	r8
 800549e:	4306      	orrs	r6, r0
 80054a0:	3568      	adds	r5, #104	; 0x68
 80054a2:	e7e9      	b.n	8005478 <_fwalk_sglue+0x10>

080054a4 <siprintf>:
 80054a4:	b40e      	push	{r1, r2, r3}
 80054a6:	b500      	push	{lr}
 80054a8:	b09c      	sub	sp, #112	; 0x70
 80054aa:	ab1d      	add	r3, sp, #116	; 0x74
 80054ac:	9002      	str	r0, [sp, #8]
 80054ae:	9006      	str	r0, [sp, #24]
 80054b0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80054b4:	4809      	ldr	r0, [pc, #36]	; (80054dc <siprintf+0x38>)
 80054b6:	9107      	str	r1, [sp, #28]
 80054b8:	9104      	str	r1, [sp, #16]
 80054ba:	4909      	ldr	r1, [pc, #36]	; (80054e0 <siprintf+0x3c>)
 80054bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80054c0:	9105      	str	r1, [sp, #20]
 80054c2:	6800      	ldr	r0, [r0, #0]
 80054c4:	9301      	str	r3, [sp, #4]
 80054c6:	a902      	add	r1, sp, #8
 80054c8:	f001 fc22 	bl	8006d10 <_svfiprintf_r>
 80054cc:	9b02      	ldr	r3, [sp, #8]
 80054ce:	2200      	movs	r2, #0
 80054d0:	701a      	strb	r2, [r3, #0]
 80054d2:	b01c      	add	sp, #112	; 0x70
 80054d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80054d8:	b003      	add	sp, #12
 80054da:	4770      	bx	lr
 80054dc:	20000064 	.word	0x20000064
 80054e0:	ffff0208 	.word	0xffff0208

080054e4 <__sread>:
 80054e4:	b510      	push	{r4, lr}
 80054e6:	460c      	mov	r4, r1
 80054e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054ec:	f000 f86c 	bl	80055c8 <_read_r>
 80054f0:	2800      	cmp	r0, #0
 80054f2:	bfab      	itete	ge
 80054f4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80054f6:	89a3      	ldrhlt	r3, [r4, #12]
 80054f8:	181b      	addge	r3, r3, r0
 80054fa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80054fe:	bfac      	ite	ge
 8005500:	6563      	strge	r3, [r4, #84]	; 0x54
 8005502:	81a3      	strhlt	r3, [r4, #12]
 8005504:	bd10      	pop	{r4, pc}

08005506 <__swrite>:
 8005506:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800550a:	461f      	mov	r7, r3
 800550c:	898b      	ldrh	r3, [r1, #12]
 800550e:	05db      	lsls	r3, r3, #23
 8005510:	4605      	mov	r5, r0
 8005512:	460c      	mov	r4, r1
 8005514:	4616      	mov	r6, r2
 8005516:	d505      	bpl.n	8005524 <__swrite+0x1e>
 8005518:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800551c:	2302      	movs	r3, #2
 800551e:	2200      	movs	r2, #0
 8005520:	f000 f840 	bl	80055a4 <_lseek_r>
 8005524:	89a3      	ldrh	r3, [r4, #12]
 8005526:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800552a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800552e:	81a3      	strh	r3, [r4, #12]
 8005530:	4632      	mov	r2, r6
 8005532:	463b      	mov	r3, r7
 8005534:	4628      	mov	r0, r5
 8005536:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800553a:	f000 b857 	b.w	80055ec <_write_r>

0800553e <__sseek>:
 800553e:	b510      	push	{r4, lr}
 8005540:	460c      	mov	r4, r1
 8005542:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005546:	f000 f82d 	bl	80055a4 <_lseek_r>
 800554a:	1c43      	adds	r3, r0, #1
 800554c:	89a3      	ldrh	r3, [r4, #12]
 800554e:	bf15      	itete	ne
 8005550:	6560      	strne	r0, [r4, #84]	; 0x54
 8005552:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005556:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800555a:	81a3      	strheq	r3, [r4, #12]
 800555c:	bf18      	it	ne
 800555e:	81a3      	strhne	r3, [r4, #12]
 8005560:	bd10      	pop	{r4, pc}

08005562 <__sclose>:
 8005562:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005566:	f000 b80d 	b.w	8005584 <_close_r>

0800556a <memset>:
 800556a:	4402      	add	r2, r0
 800556c:	4603      	mov	r3, r0
 800556e:	4293      	cmp	r3, r2
 8005570:	d100      	bne.n	8005574 <memset+0xa>
 8005572:	4770      	bx	lr
 8005574:	f803 1b01 	strb.w	r1, [r3], #1
 8005578:	e7f9      	b.n	800556e <memset+0x4>
	...

0800557c <_localeconv_r>:
 800557c:	4800      	ldr	r0, [pc, #0]	; (8005580 <_localeconv_r+0x4>)
 800557e:	4770      	bx	lr
 8005580:	20000158 	.word	0x20000158

08005584 <_close_r>:
 8005584:	b538      	push	{r3, r4, r5, lr}
 8005586:	4d06      	ldr	r5, [pc, #24]	; (80055a0 <_close_r+0x1c>)
 8005588:	2300      	movs	r3, #0
 800558a:	4604      	mov	r4, r0
 800558c:	4608      	mov	r0, r1
 800558e:	602b      	str	r3, [r5, #0]
 8005590:	f7fc fd02 	bl	8001f98 <_close>
 8005594:	1c43      	adds	r3, r0, #1
 8005596:	d102      	bne.n	800559e <_close_r+0x1a>
 8005598:	682b      	ldr	r3, [r5, #0]
 800559a:	b103      	cbz	r3, 800559e <_close_r+0x1a>
 800559c:	6023      	str	r3, [r4, #0]
 800559e:	bd38      	pop	{r3, r4, r5, pc}
 80055a0:	200124ec 	.word	0x200124ec

080055a4 <_lseek_r>:
 80055a4:	b538      	push	{r3, r4, r5, lr}
 80055a6:	4d07      	ldr	r5, [pc, #28]	; (80055c4 <_lseek_r+0x20>)
 80055a8:	4604      	mov	r4, r0
 80055aa:	4608      	mov	r0, r1
 80055ac:	4611      	mov	r1, r2
 80055ae:	2200      	movs	r2, #0
 80055b0:	602a      	str	r2, [r5, #0]
 80055b2:	461a      	mov	r2, r3
 80055b4:	f7fc fcfa 	bl	8001fac <_lseek>
 80055b8:	1c43      	adds	r3, r0, #1
 80055ba:	d102      	bne.n	80055c2 <_lseek_r+0x1e>
 80055bc:	682b      	ldr	r3, [r5, #0]
 80055be:	b103      	cbz	r3, 80055c2 <_lseek_r+0x1e>
 80055c0:	6023      	str	r3, [r4, #0]
 80055c2:	bd38      	pop	{r3, r4, r5, pc}
 80055c4:	200124ec 	.word	0x200124ec

080055c8 <_read_r>:
 80055c8:	b538      	push	{r3, r4, r5, lr}
 80055ca:	4d07      	ldr	r5, [pc, #28]	; (80055e8 <_read_r+0x20>)
 80055cc:	4604      	mov	r4, r0
 80055ce:	4608      	mov	r0, r1
 80055d0:	4611      	mov	r1, r2
 80055d2:	2200      	movs	r2, #0
 80055d4:	602a      	str	r2, [r5, #0]
 80055d6:	461a      	mov	r2, r3
 80055d8:	f7fc fcc2 	bl	8001f60 <_read>
 80055dc:	1c43      	adds	r3, r0, #1
 80055de:	d102      	bne.n	80055e6 <_read_r+0x1e>
 80055e0:	682b      	ldr	r3, [r5, #0]
 80055e2:	b103      	cbz	r3, 80055e6 <_read_r+0x1e>
 80055e4:	6023      	str	r3, [r4, #0]
 80055e6:	bd38      	pop	{r3, r4, r5, pc}
 80055e8:	200124ec 	.word	0x200124ec

080055ec <_write_r>:
 80055ec:	b538      	push	{r3, r4, r5, lr}
 80055ee:	4d07      	ldr	r5, [pc, #28]	; (800560c <_write_r+0x20>)
 80055f0:	4604      	mov	r4, r0
 80055f2:	4608      	mov	r0, r1
 80055f4:	4611      	mov	r1, r2
 80055f6:	2200      	movs	r2, #0
 80055f8:	602a      	str	r2, [r5, #0]
 80055fa:	461a      	mov	r2, r3
 80055fc:	f7fc fcbe 	bl	8001f7c <_write>
 8005600:	1c43      	adds	r3, r0, #1
 8005602:	d102      	bne.n	800560a <_write_r+0x1e>
 8005604:	682b      	ldr	r3, [r5, #0]
 8005606:	b103      	cbz	r3, 800560a <_write_r+0x1e>
 8005608:	6023      	str	r3, [r4, #0]
 800560a:	bd38      	pop	{r3, r4, r5, pc}
 800560c:	200124ec 	.word	0x200124ec

08005610 <__errno>:
 8005610:	4b01      	ldr	r3, [pc, #4]	; (8005618 <__errno+0x8>)
 8005612:	6818      	ldr	r0, [r3, #0]
 8005614:	4770      	bx	lr
 8005616:	bf00      	nop
 8005618:	20000064 	.word	0x20000064

0800561c <__libc_init_array>:
 800561c:	b570      	push	{r4, r5, r6, lr}
 800561e:	4d0d      	ldr	r5, [pc, #52]	; (8005654 <__libc_init_array+0x38>)
 8005620:	4c0d      	ldr	r4, [pc, #52]	; (8005658 <__libc_init_array+0x3c>)
 8005622:	1b64      	subs	r4, r4, r5
 8005624:	10a4      	asrs	r4, r4, #2
 8005626:	2600      	movs	r6, #0
 8005628:	42a6      	cmp	r6, r4
 800562a:	d109      	bne.n	8005640 <__libc_init_array+0x24>
 800562c:	4d0b      	ldr	r5, [pc, #44]	; (800565c <__libc_init_array+0x40>)
 800562e:	4c0c      	ldr	r4, [pc, #48]	; (8005660 <__libc_init_array+0x44>)
 8005630:	f003 fc36 	bl	8008ea0 <_init>
 8005634:	1b64      	subs	r4, r4, r5
 8005636:	10a4      	asrs	r4, r4, #2
 8005638:	2600      	movs	r6, #0
 800563a:	42a6      	cmp	r6, r4
 800563c:	d105      	bne.n	800564a <__libc_init_array+0x2e>
 800563e:	bd70      	pop	{r4, r5, r6, pc}
 8005640:	f855 3b04 	ldr.w	r3, [r5], #4
 8005644:	4798      	blx	r3
 8005646:	3601      	adds	r6, #1
 8005648:	e7ee      	b.n	8005628 <__libc_init_array+0xc>
 800564a:	f855 3b04 	ldr.w	r3, [r5], #4
 800564e:	4798      	blx	r3
 8005650:	3601      	adds	r6, #1
 8005652:	e7f2      	b.n	800563a <__libc_init_array+0x1e>
 8005654:	08009a28 	.word	0x08009a28
 8005658:	08009a28 	.word	0x08009a28
 800565c:	08009a28 	.word	0x08009a28
 8005660:	08009a2c 	.word	0x08009a2c

08005664 <__retarget_lock_init_recursive>:
 8005664:	4770      	bx	lr

08005666 <__retarget_lock_acquire_recursive>:
 8005666:	4770      	bx	lr

08005668 <__retarget_lock_release_recursive>:
 8005668:	4770      	bx	lr

0800566a <quorem>:
 800566a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800566e:	6903      	ldr	r3, [r0, #16]
 8005670:	690c      	ldr	r4, [r1, #16]
 8005672:	42a3      	cmp	r3, r4
 8005674:	4607      	mov	r7, r0
 8005676:	db7e      	blt.n	8005776 <quorem+0x10c>
 8005678:	3c01      	subs	r4, #1
 800567a:	f101 0814 	add.w	r8, r1, #20
 800567e:	f100 0514 	add.w	r5, r0, #20
 8005682:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005686:	9301      	str	r3, [sp, #4]
 8005688:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800568c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005690:	3301      	adds	r3, #1
 8005692:	429a      	cmp	r2, r3
 8005694:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005698:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800569c:	fbb2 f6f3 	udiv	r6, r2, r3
 80056a0:	d331      	bcc.n	8005706 <quorem+0x9c>
 80056a2:	f04f 0e00 	mov.w	lr, #0
 80056a6:	4640      	mov	r0, r8
 80056a8:	46ac      	mov	ip, r5
 80056aa:	46f2      	mov	sl, lr
 80056ac:	f850 2b04 	ldr.w	r2, [r0], #4
 80056b0:	b293      	uxth	r3, r2
 80056b2:	fb06 e303 	mla	r3, r6, r3, lr
 80056b6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80056ba:	0c1a      	lsrs	r2, r3, #16
 80056bc:	b29b      	uxth	r3, r3
 80056be:	ebaa 0303 	sub.w	r3, sl, r3
 80056c2:	f8dc a000 	ldr.w	sl, [ip]
 80056c6:	fa13 f38a 	uxtah	r3, r3, sl
 80056ca:	fb06 220e 	mla	r2, r6, lr, r2
 80056ce:	9300      	str	r3, [sp, #0]
 80056d0:	9b00      	ldr	r3, [sp, #0]
 80056d2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80056d6:	b292      	uxth	r2, r2
 80056d8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80056dc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80056e0:	f8bd 3000 	ldrh.w	r3, [sp]
 80056e4:	4581      	cmp	r9, r0
 80056e6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80056ea:	f84c 3b04 	str.w	r3, [ip], #4
 80056ee:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80056f2:	d2db      	bcs.n	80056ac <quorem+0x42>
 80056f4:	f855 300b 	ldr.w	r3, [r5, fp]
 80056f8:	b92b      	cbnz	r3, 8005706 <quorem+0x9c>
 80056fa:	9b01      	ldr	r3, [sp, #4]
 80056fc:	3b04      	subs	r3, #4
 80056fe:	429d      	cmp	r5, r3
 8005700:	461a      	mov	r2, r3
 8005702:	d32c      	bcc.n	800575e <quorem+0xf4>
 8005704:	613c      	str	r4, [r7, #16]
 8005706:	4638      	mov	r0, r7
 8005708:	f001 f9a8 	bl	8006a5c <__mcmp>
 800570c:	2800      	cmp	r0, #0
 800570e:	db22      	blt.n	8005756 <quorem+0xec>
 8005710:	3601      	adds	r6, #1
 8005712:	4629      	mov	r1, r5
 8005714:	2000      	movs	r0, #0
 8005716:	f858 2b04 	ldr.w	r2, [r8], #4
 800571a:	f8d1 c000 	ldr.w	ip, [r1]
 800571e:	b293      	uxth	r3, r2
 8005720:	1ac3      	subs	r3, r0, r3
 8005722:	0c12      	lsrs	r2, r2, #16
 8005724:	fa13 f38c 	uxtah	r3, r3, ip
 8005728:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800572c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005730:	b29b      	uxth	r3, r3
 8005732:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005736:	45c1      	cmp	r9, r8
 8005738:	f841 3b04 	str.w	r3, [r1], #4
 800573c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005740:	d2e9      	bcs.n	8005716 <quorem+0xac>
 8005742:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005746:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800574a:	b922      	cbnz	r2, 8005756 <quorem+0xec>
 800574c:	3b04      	subs	r3, #4
 800574e:	429d      	cmp	r5, r3
 8005750:	461a      	mov	r2, r3
 8005752:	d30a      	bcc.n	800576a <quorem+0x100>
 8005754:	613c      	str	r4, [r7, #16]
 8005756:	4630      	mov	r0, r6
 8005758:	b003      	add	sp, #12
 800575a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800575e:	6812      	ldr	r2, [r2, #0]
 8005760:	3b04      	subs	r3, #4
 8005762:	2a00      	cmp	r2, #0
 8005764:	d1ce      	bne.n	8005704 <quorem+0x9a>
 8005766:	3c01      	subs	r4, #1
 8005768:	e7c9      	b.n	80056fe <quorem+0x94>
 800576a:	6812      	ldr	r2, [r2, #0]
 800576c:	3b04      	subs	r3, #4
 800576e:	2a00      	cmp	r2, #0
 8005770:	d1f0      	bne.n	8005754 <quorem+0xea>
 8005772:	3c01      	subs	r4, #1
 8005774:	e7eb      	b.n	800574e <quorem+0xe4>
 8005776:	2000      	movs	r0, #0
 8005778:	e7ee      	b.n	8005758 <quorem+0xee>
 800577a:	0000      	movs	r0, r0
 800577c:	0000      	movs	r0, r0
	...

08005780 <_dtoa_r>:
 8005780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005784:	ed2d 8b04 	vpush	{d8-d9}
 8005788:	69c5      	ldr	r5, [r0, #28]
 800578a:	b093      	sub	sp, #76	; 0x4c
 800578c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005790:	ec57 6b10 	vmov	r6, r7, d0
 8005794:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005798:	9107      	str	r1, [sp, #28]
 800579a:	4604      	mov	r4, r0
 800579c:	920a      	str	r2, [sp, #40]	; 0x28
 800579e:	930d      	str	r3, [sp, #52]	; 0x34
 80057a0:	b975      	cbnz	r5, 80057c0 <_dtoa_r+0x40>
 80057a2:	2010      	movs	r0, #16
 80057a4:	f000 fe2a 	bl	80063fc <malloc>
 80057a8:	4602      	mov	r2, r0
 80057aa:	61e0      	str	r0, [r4, #28]
 80057ac:	b920      	cbnz	r0, 80057b8 <_dtoa_r+0x38>
 80057ae:	4bae      	ldr	r3, [pc, #696]	; (8005a68 <_dtoa_r+0x2e8>)
 80057b0:	21ef      	movs	r1, #239	; 0xef
 80057b2:	48ae      	ldr	r0, [pc, #696]	; (8005a6c <_dtoa_r+0x2ec>)
 80057b4:	f001 fc90 	bl	80070d8 <__assert_func>
 80057b8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80057bc:	6005      	str	r5, [r0, #0]
 80057be:	60c5      	str	r5, [r0, #12]
 80057c0:	69e3      	ldr	r3, [r4, #28]
 80057c2:	6819      	ldr	r1, [r3, #0]
 80057c4:	b151      	cbz	r1, 80057dc <_dtoa_r+0x5c>
 80057c6:	685a      	ldr	r2, [r3, #4]
 80057c8:	604a      	str	r2, [r1, #4]
 80057ca:	2301      	movs	r3, #1
 80057cc:	4093      	lsls	r3, r2
 80057ce:	608b      	str	r3, [r1, #8]
 80057d0:	4620      	mov	r0, r4
 80057d2:	f000 ff07 	bl	80065e4 <_Bfree>
 80057d6:	69e3      	ldr	r3, [r4, #28]
 80057d8:	2200      	movs	r2, #0
 80057da:	601a      	str	r2, [r3, #0]
 80057dc:	1e3b      	subs	r3, r7, #0
 80057de:	bfbb      	ittet	lt
 80057e0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80057e4:	9303      	strlt	r3, [sp, #12]
 80057e6:	2300      	movge	r3, #0
 80057e8:	2201      	movlt	r2, #1
 80057ea:	bfac      	ite	ge
 80057ec:	f8c8 3000 	strge.w	r3, [r8]
 80057f0:	f8c8 2000 	strlt.w	r2, [r8]
 80057f4:	4b9e      	ldr	r3, [pc, #632]	; (8005a70 <_dtoa_r+0x2f0>)
 80057f6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80057fa:	ea33 0308 	bics.w	r3, r3, r8
 80057fe:	d11b      	bne.n	8005838 <_dtoa_r+0xb8>
 8005800:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005802:	f242 730f 	movw	r3, #9999	; 0x270f
 8005806:	6013      	str	r3, [r2, #0]
 8005808:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800580c:	4333      	orrs	r3, r6
 800580e:	f000 8593 	beq.w	8006338 <_dtoa_r+0xbb8>
 8005812:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005814:	b963      	cbnz	r3, 8005830 <_dtoa_r+0xb0>
 8005816:	4b97      	ldr	r3, [pc, #604]	; (8005a74 <_dtoa_r+0x2f4>)
 8005818:	e027      	b.n	800586a <_dtoa_r+0xea>
 800581a:	4b97      	ldr	r3, [pc, #604]	; (8005a78 <_dtoa_r+0x2f8>)
 800581c:	9300      	str	r3, [sp, #0]
 800581e:	3308      	adds	r3, #8
 8005820:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005822:	6013      	str	r3, [r2, #0]
 8005824:	9800      	ldr	r0, [sp, #0]
 8005826:	b013      	add	sp, #76	; 0x4c
 8005828:	ecbd 8b04 	vpop	{d8-d9}
 800582c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005830:	4b90      	ldr	r3, [pc, #576]	; (8005a74 <_dtoa_r+0x2f4>)
 8005832:	9300      	str	r3, [sp, #0]
 8005834:	3303      	adds	r3, #3
 8005836:	e7f3      	b.n	8005820 <_dtoa_r+0xa0>
 8005838:	ed9d 7b02 	vldr	d7, [sp, #8]
 800583c:	2200      	movs	r2, #0
 800583e:	ec51 0b17 	vmov	r0, r1, d7
 8005842:	eeb0 8a47 	vmov.f32	s16, s14
 8005846:	eef0 8a67 	vmov.f32	s17, s15
 800584a:	2300      	movs	r3, #0
 800584c:	f7fb f93c 	bl	8000ac8 <__aeabi_dcmpeq>
 8005850:	4681      	mov	r9, r0
 8005852:	b160      	cbz	r0, 800586e <_dtoa_r+0xee>
 8005854:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005856:	2301      	movs	r3, #1
 8005858:	6013      	str	r3, [r2, #0]
 800585a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800585c:	2b00      	cmp	r3, #0
 800585e:	f000 8568 	beq.w	8006332 <_dtoa_r+0xbb2>
 8005862:	4b86      	ldr	r3, [pc, #536]	; (8005a7c <_dtoa_r+0x2fc>)
 8005864:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005866:	6013      	str	r3, [r2, #0]
 8005868:	3b01      	subs	r3, #1
 800586a:	9300      	str	r3, [sp, #0]
 800586c:	e7da      	b.n	8005824 <_dtoa_r+0xa4>
 800586e:	aa10      	add	r2, sp, #64	; 0x40
 8005870:	a911      	add	r1, sp, #68	; 0x44
 8005872:	4620      	mov	r0, r4
 8005874:	eeb0 0a48 	vmov.f32	s0, s16
 8005878:	eef0 0a68 	vmov.f32	s1, s17
 800587c:	f001 f994 	bl	8006ba8 <__d2b>
 8005880:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8005884:	4682      	mov	sl, r0
 8005886:	2d00      	cmp	r5, #0
 8005888:	d07f      	beq.n	800598a <_dtoa_r+0x20a>
 800588a:	ee18 3a90 	vmov	r3, s17
 800588e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005892:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8005896:	ec51 0b18 	vmov	r0, r1, d8
 800589a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800589e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80058a2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80058a6:	4619      	mov	r1, r3
 80058a8:	2200      	movs	r2, #0
 80058aa:	4b75      	ldr	r3, [pc, #468]	; (8005a80 <_dtoa_r+0x300>)
 80058ac:	f7fa fcec 	bl	8000288 <__aeabi_dsub>
 80058b0:	a367      	add	r3, pc, #412	; (adr r3, 8005a50 <_dtoa_r+0x2d0>)
 80058b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058b6:	f7fa fe9f 	bl	80005f8 <__aeabi_dmul>
 80058ba:	a367      	add	r3, pc, #412	; (adr r3, 8005a58 <_dtoa_r+0x2d8>)
 80058bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058c0:	f7fa fce4 	bl	800028c <__adddf3>
 80058c4:	4606      	mov	r6, r0
 80058c6:	4628      	mov	r0, r5
 80058c8:	460f      	mov	r7, r1
 80058ca:	f7fa fe2b 	bl	8000524 <__aeabi_i2d>
 80058ce:	a364      	add	r3, pc, #400	; (adr r3, 8005a60 <_dtoa_r+0x2e0>)
 80058d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058d4:	f7fa fe90 	bl	80005f8 <__aeabi_dmul>
 80058d8:	4602      	mov	r2, r0
 80058da:	460b      	mov	r3, r1
 80058dc:	4630      	mov	r0, r6
 80058de:	4639      	mov	r1, r7
 80058e0:	f7fa fcd4 	bl	800028c <__adddf3>
 80058e4:	4606      	mov	r6, r0
 80058e6:	460f      	mov	r7, r1
 80058e8:	f7fb f936 	bl	8000b58 <__aeabi_d2iz>
 80058ec:	2200      	movs	r2, #0
 80058ee:	4683      	mov	fp, r0
 80058f0:	2300      	movs	r3, #0
 80058f2:	4630      	mov	r0, r6
 80058f4:	4639      	mov	r1, r7
 80058f6:	f7fb f8f1 	bl	8000adc <__aeabi_dcmplt>
 80058fa:	b148      	cbz	r0, 8005910 <_dtoa_r+0x190>
 80058fc:	4658      	mov	r0, fp
 80058fe:	f7fa fe11 	bl	8000524 <__aeabi_i2d>
 8005902:	4632      	mov	r2, r6
 8005904:	463b      	mov	r3, r7
 8005906:	f7fb f8df 	bl	8000ac8 <__aeabi_dcmpeq>
 800590a:	b908      	cbnz	r0, 8005910 <_dtoa_r+0x190>
 800590c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005910:	f1bb 0f16 	cmp.w	fp, #22
 8005914:	d857      	bhi.n	80059c6 <_dtoa_r+0x246>
 8005916:	4b5b      	ldr	r3, [pc, #364]	; (8005a84 <_dtoa_r+0x304>)
 8005918:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800591c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005920:	ec51 0b18 	vmov	r0, r1, d8
 8005924:	f7fb f8da 	bl	8000adc <__aeabi_dcmplt>
 8005928:	2800      	cmp	r0, #0
 800592a:	d04e      	beq.n	80059ca <_dtoa_r+0x24a>
 800592c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005930:	2300      	movs	r3, #0
 8005932:	930c      	str	r3, [sp, #48]	; 0x30
 8005934:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005936:	1b5b      	subs	r3, r3, r5
 8005938:	1e5a      	subs	r2, r3, #1
 800593a:	bf45      	ittet	mi
 800593c:	f1c3 0301 	rsbmi	r3, r3, #1
 8005940:	9305      	strmi	r3, [sp, #20]
 8005942:	2300      	movpl	r3, #0
 8005944:	2300      	movmi	r3, #0
 8005946:	9206      	str	r2, [sp, #24]
 8005948:	bf54      	ite	pl
 800594a:	9305      	strpl	r3, [sp, #20]
 800594c:	9306      	strmi	r3, [sp, #24]
 800594e:	f1bb 0f00 	cmp.w	fp, #0
 8005952:	db3c      	blt.n	80059ce <_dtoa_r+0x24e>
 8005954:	9b06      	ldr	r3, [sp, #24]
 8005956:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800595a:	445b      	add	r3, fp
 800595c:	9306      	str	r3, [sp, #24]
 800595e:	2300      	movs	r3, #0
 8005960:	9308      	str	r3, [sp, #32]
 8005962:	9b07      	ldr	r3, [sp, #28]
 8005964:	2b09      	cmp	r3, #9
 8005966:	d868      	bhi.n	8005a3a <_dtoa_r+0x2ba>
 8005968:	2b05      	cmp	r3, #5
 800596a:	bfc4      	itt	gt
 800596c:	3b04      	subgt	r3, #4
 800596e:	9307      	strgt	r3, [sp, #28]
 8005970:	9b07      	ldr	r3, [sp, #28]
 8005972:	f1a3 0302 	sub.w	r3, r3, #2
 8005976:	bfcc      	ite	gt
 8005978:	2500      	movgt	r5, #0
 800597a:	2501      	movle	r5, #1
 800597c:	2b03      	cmp	r3, #3
 800597e:	f200 8085 	bhi.w	8005a8c <_dtoa_r+0x30c>
 8005982:	e8df f003 	tbb	[pc, r3]
 8005986:	3b2e      	.short	0x3b2e
 8005988:	5839      	.short	0x5839
 800598a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800598e:	441d      	add	r5, r3
 8005990:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005994:	2b20      	cmp	r3, #32
 8005996:	bfc1      	itttt	gt
 8005998:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800599c:	fa08 f803 	lslgt.w	r8, r8, r3
 80059a0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 80059a4:	fa26 f303 	lsrgt.w	r3, r6, r3
 80059a8:	bfd6      	itet	le
 80059aa:	f1c3 0320 	rsble	r3, r3, #32
 80059ae:	ea48 0003 	orrgt.w	r0, r8, r3
 80059b2:	fa06 f003 	lslle.w	r0, r6, r3
 80059b6:	f7fa fda5 	bl	8000504 <__aeabi_ui2d>
 80059ba:	2201      	movs	r2, #1
 80059bc:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80059c0:	3d01      	subs	r5, #1
 80059c2:	920e      	str	r2, [sp, #56]	; 0x38
 80059c4:	e76f      	b.n	80058a6 <_dtoa_r+0x126>
 80059c6:	2301      	movs	r3, #1
 80059c8:	e7b3      	b.n	8005932 <_dtoa_r+0x1b2>
 80059ca:	900c      	str	r0, [sp, #48]	; 0x30
 80059cc:	e7b2      	b.n	8005934 <_dtoa_r+0x1b4>
 80059ce:	9b05      	ldr	r3, [sp, #20]
 80059d0:	eba3 030b 	sub.w	r3, r3, fp
 80059d4:	9305      	str	r3, [sp, #20]
 80059d6:	f1cb 0300 	rsb	r3, fp, #0
 80059da:	9308      	str	r3, [sp, #32]
 80059dc:	2300      	movs	r3, #0
 80059de:	930b      	str	r3, [sp, #44]	; 0x2c
 80059e0:	e7bf      	b.n	8005962 <_dtoa_r+0x1e2>
 80059e2:	2300      	movs	r3, #0
 80059e4:	9309      	str	r3, [sp, #36]	; 0x24
 80059e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	dc52      	bgt.n	8005a92 <_dtoa_r+0x312>
 80059ec:	2301      	movs	r3, #1
 80059ee:	9301      	str	r3, [sp, #4]
 80059f0:	9304      	str	r3, [sp, #16]
 80059f2:	461a      	mov	r2, r3
 80059f4:	920a      	str	r2, [sp, #40]	; 0x28
 80059f6:	e00b      	b.n	8005a10 <_dtoa_r+0x290>
 80059f8:	2301      	movs	r3, #1
 80059fa:	e7f3      	b.n	80059e4 <_dtoa_r+0x264>
 80059fc:	2300      	movs	r3, #0
 80059fe:	9309      	str	r3, [sp, #36]	; 0x24
 8005a00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a02:	445b      	add	r3, fp
 8005a04:	9301      	str	r3, [sp, #4]
 8005a06:	3301      	adds	r3, #1
 8005a08:	2b01      	cmp	r3, #1
 8005a0a:	9304      	str	r3, [sp, #16]
 8005a0c:	bfb8      	it	lt
 8005a0e:	2301      	movlt	r3, #1
 8005a10:	69e0      	ldr	r0, [r4, #28]
 8005a12:	2100      	movs	r1, #0
 8005a14:	2204      	movs	r2, #4
 8005a16:	f102 0614 	add.w	r6, r2, #20
 8005a1a:	429e      	cmp	r6, r3
 8005a1c:	d93d      	bls.n	8005a9a <_dtoa_r+0x31a>
 8005a1e:	6041      	str	r1, [r0, #4]
 8005a20:	4620      	mov	r0, r4
 8005a22:	f000 fd9f 	bl	8006564 <_Balloc>
 8005a26:	9000      	str	r0, [sp, #0]
 8005a28:	2800      	cmp	r0, #0
 8005a2a:	d139      	bne.n	8005aa0 <_dtoa_r+0x320>
 8005a2c:	4b16      	ldr	r3, [pc, #88]	; (8005a88 <_dtoa_r+0x308>)
 8005a2e:	4602      	mov	r2, r0
 8005a30:	f240 11af 	movw	r1, #431	; 0x1af
 8005a34:	e6bd      	b.n	80057b2 <_dtoa_r+0x32>
 8005a36:	2301      	movs	r3, #1
 8005a38:	e7e1      	b.n	80059fe <_dtoa_r+0x27e>
 8005a3a:	2501      	movs	r5, #1
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	9307      	str	r3, [sp, #28]
 8005a40:	9509      	str	r5, [sp, #36]	; 0x24
 8005a42:	f04f 33ff 	mov.w	r3, #4294967295
 8005a46:	9301      	str	r3, [sp, #4]
 8005a48:	9304      	str	r3, [sp, #16]
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	2312      	movs	r3, #18
 8005a4e:	e7d1      	b.n	80059f4 <_dtoa_r+0x274>
 8005a50:	636f4361 	.word	0x636f4361
 8005a54:	3fd287a7 	.word	0x3fd287a7
 8005a58:	8b60c8b3 	.word	0x8b60c8b3
 8005a5c:	3fc68a28 	.word	0x3fc68a28
 8005a60:	509f79fb 	.word	0x509f79fb
 8005a64:	3fd34413 	.word	0x3fd34413
 8005a68:	08009515 	.word	0x08009515
 8005a6c:	0800952c 	.word	0x0800952c
 8005a70:	7ff00000 	.word	0x7ff00000
 8005a74:	08009511 	.word	0x08009511
 8005a78:	08009508 	.word	0x08009508
 8005a7c:	080094e5 	.word	0x080094e5
 8005a80:	3ff80000 	.word	0x3ff80000
 8005a84:	08009618 	.word	0x08009618
 8005a88:	08009584 	.word	0x08009584
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	9309      	str	r3, [sp, #36]	; 0x24
 8005a90:	e7d7      	b.n	8005a42 <_dtoa_r+0x2c2>
 8005a92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a94:	9301      	str	r3, [sp, #4]
 8005a96:	9304      	str	r3, [sp, #16]
 8005a98:	e7ba      	b.n	8005a10 <_dtoa_r+0x290>
 8005a9a:	3101      	adds	r1, #1
 8005a9c:	0052      	lsls	r2, r2, #1
 8005a9e:	e7ba      	b.n	8005a16 <_dtoa_r+0x296>
 8005aa0:	69e3      	ldr	r3, [r4, #28]
 8005aa2:	9a00      	ldr	r2, [sp, #0]
 8005aa4:	601a      	str	r2, [r3, #0]
 8005aa6:	9b04      	ldr	r3, [sp, #16]
 8005aa8:	2b0e      	cmp	r3, #14
 8005aaa:	f200 80a8 	bhi.w	8005bfe <_dtoa_r+0x47e>
 8005aae:	2d00      	cmp	r5, #0
 8005ab0:	f000 80a5 	beq.w	8005bfe <_dtoa_r+0x47e>
 8005ab4:	f1bb 0f00 	cmp.w	fp, #0
 8005ab8:	dd38      	ble.n	8005b2c <_dtoa_r+0x3ac>
 8005aba:	4bc0      	ldr	r3, [pc, #768]	; (8005dbc <_dtoa_r+0x63c>)
 8005abc:	f00b 020f 	and.w	r2, fp, #15
 8005ac0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005ac4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8005ac8:	e9d3 6700 	ldrd	r6, r7, [r3]
 8005acc:	ea4f 182b 	mov.w	r8, fp, asr #4
 8005ad0:	d019      	beq.n	8005b06 <_dtoa_r+0x386>
 8005ad2:	4bbb      	ldr	r3, [pc, #748]	; (8005dc0 <_dtoa_r+0x640>)
 8005ad4:	ec51 0b18 	vmov	r0, r1, d8
 8005ad8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005adc:	f7fa feb6 	bl	800084c <__aeabi_ddiv>
 8005ae0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005ae4:	f008 080f 	and.w	r8, r8, #15
 8005ae8:	2503      	movs	r5, #3
 8005aea:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8005dc0 <_dtoa_r+0x640>
 8005aee:	f1b8 0f00 	cmp.w	r8, #0
 8005af2:	d10a      	bne.n	8005b0a <_dtoa_r+0x38a>
 8005af4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005af8:	4632      	mov	r2, r6
 8005afa:	463b      	mov	r3, r7
 8005afc:	f7fa fea6 	bl	800084c <__aeabi_ddiv>
 8005b00:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005b04:	e02b      	b.n	8005b5e <_dtoa_r+0x3de>
 8005b06:	2502      	movs	r5, #2
 8005b08:	e7ef      	b.n	8005aea <_dtoa_r+0x36a>
 8005b0a:	f018 0f01 	tst.w	r8, #1
 8005b0e:	d008      	beq.n	8005b22 <_dtoa_r+0x3a2>
 8005b10:	4630      	mov	r0, r6
 8005b12:	4639      	mov	r1, r7
 8005b14:	e9d9 2300 	ldrd	r2, r3, [r9]
 8005b18:	f7fa fd6e 	bl	80005f8 <__aeabi_dmul>
 8005b1c:	3501      	adds	r5, #1
 8005b1e:	4606      	mov	r6, r0
 8005b20:	460f      	mov	r7, r1
 8005b22:	ea4f 0868 	mov.w	r8, r8, asr #1
 8005b26:	f109 0908 	add.w	r9, r9, #8
 8005b2a:	e7e0      	b.n	8005aee <_dtoa_r+0x36e>
 8005b2c:	f000 809f 	beq.w	8005c6e <_dtoa_r+0x4ee>
 8005b30:	f1cb 0600 	rsb	r6, fp, #0
 8005b34:	4ba1      	ldr	r3, [pc, #644]	; (8005dbc <_dtoa_r+0x63c>)
 8005b36:	4fa2      	ldr	r7, [pc, #648]	; (8005dc0 <_dtoa_r+0x640>)
 8005b38:	f006 020f 	and.w	r2, r6, #15
 8005b3c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005b40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b44:	ec51 0b18 	vmov	r0, r1, d8
 8005b48:	f7fa fd56 	bl	80005f8 <__aeabi_dmul>
 8005b4c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005b50:	1136      	asrs	r6, r6, #4
 8005b52:	2300      	movs	r3, #0
 8005b54:	2502      	movs	r5, #2
 8005b56:	2e00      	cmp	r6, #0
 8005b58:	d17e      	bne.n	8005c58 <_dtoa_r+0x4d8>
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d1d0      	bne.n	8005b00 <_dtoa_r+0x380>
 8005b5e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005b60:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	f000 8084 	beq.w	8005c72 <_dtoa_r+0x4f2>
 8005b6a:	4b96      	ldr	r3, [pc, #600]	; (8005dc4 <_dtoa_r+0x644>)
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	4640      	mov	r0, r8
 8005b70:	4649      	mov	r1, r9
 8005b72:	f7fa ffb3 	bl	8000adc <__aeabi_dcmplt>
 8005b76:	2800      	cmp	r0, #0
 8005b78:	d07b      	beq.n	8005c72 <_dtoa_r+0x4f2>
 8005b7a:	9b04      	ldr	r3, [sp, #16]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d078      	beq.n	8005c72 <_dtoa_r+0x4f2>
 8005b80:	9b01      	ldr	r3, [sp, #4]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	dd39      	ble.n	8005bfa <_dtoa_r+0x47a>
 8005b86:	4b90      	ldr	r3, [pc, #576]	; (8005dc8 <_dtoa_r+0x648>)
 8005b88:	2200      	movs	r2, #0
 8005b8a:	4640      	mov	r0, r8
 8005b8c:	4649      	mov	r1, r9
 8005b8e:	f7fa fd33 	bl	80005f8 <__aeabi_dmul>
 8005b92:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005b96:	9e01      	ldr	r6, [sp, #4]
 8005b98:	f10b 37ff 	add.w	r7, fp, #4294967295
 8005b9c:	3501      	adds	r5, #1
 8005b9e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8005ba2:	4628      	mov	r0, r5
 8005ba4:	f7fa fcbe 	bl	8000524 <__aeabi_i2d>
 8005ba8:	4642      	mov	r2, r8
 8005baa:	464b      	mov	r3, r9
 8005bac:	f7fa fd24 	bl	80005f8 <__aeabi_dmul>
 8005bb0:	4b86      	ldr	r3, [pc, #536]	; (8005dcc <_dtoa_r+0x64c>)
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	f7fa fb6a 	bl	800028c <__adddf3>
 8005bb8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8005bbc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005bc0:	9303      	str	r3, [sp, #12]
 8005bc2:	2e00      	cmp	r6, #0
 8005bc4:	d158      	bne.n	8005c78 <_dtoa_r+0x4f8>
 8005bc6:	4b82      	ldr	r3, [pc, #520]	; (8005dd0 <_dtoa_r+0x650>)
 8005bc8:	2200      	movs	r2, #0
 8005bca:	4640      	mov	r0, r8
 8005bcc:	4649      	mov	r1, r9
 8005bce:	f7fa fb5b 	bl	8000288 <__aeabi_dsub>
 8005bd2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005bd6:	4680      	mov	r8, r0
 8005bd8:	4689      	mov	r9, r1
 8005bda:	f7fa ff9d 	bl	8000b18 <__aeabi_dcmpgt>
 8005bde:	2800      	cmp	r0, #0
 8005be0:	f040 8296 	bne.w	8006110 <_dtoa_r+0x990>
 8005be4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8005be8:	4640      	mov	r0, r8
 8005bea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005bee:	4649      	mov	r1, r9
 8005bf0:	f7fa ff74 	bl	8000adc <__aeabi_dcmplt>
 8005bf4:	2800      	cmp	r0, #0
 8005bf6:	f040 8289 	bne.w	800610c <_dtoa_r+0x98c>
 8005bfa:	ed8d 8b02 	vstr	d8, [sp, #8]
 8005bfe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	f2c0 814e 	blt.w	8005ea2 <_dtoa_r+0x722>
 8005c06:	f1bb 0f0e 	cmp.w	fp, #14
 8005c0a:	f300 814a 	bgt.w	8005ea2 <_dtoa_r+0x722>
 8005c0e:	4b6b      	ldr	r3, [pc, #428]	; (8005dbc <_dtoa_r+0x63c>)
 8005c10:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005c14:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005c18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	f280 80dc 	bge.w	8005dd8 <_dtoa_r+0x658>
 8005c20:	9b04      	ldr	r3, [sp, #16]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	f300 80d8 	bgt.w	8005dd8 <_dtoa_r+0x658>
 8005c28:	f040 826f 	bne.w	800610a <_dtoa_r+0x98a>
 8005c2c:	4b68      	ldr	r3, [pc, #416]	; (8005dd0 <_dtoa_r+0x650>)
 8005c2e:	2200      	movs	r2, #0
 8005c30:	4640      	mov	r0, r8
 8005c32:	4649      	mov	r1, r9
 8005c34:	f7fa fce0 	bl	80005f8 <__aeabi_dmul>
 8005c38:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005c3c:	f7fa ff62 	bl	8000b04 <__aeabi_dcmpge>
 8005c40:	9e04      	ldr	r6, [sp, #16]
 8005c42:	4637      	mov	r7, r6
 8005c44:	2800      	cmp	r0, #0
 8005c46:	f040 8245 	bne.w	80060d4 <_dtoa_r+0x954>
 8005c4a:	9d00      	ldr	r5, [sp, #0]
 8005c4c:	2331      	movs	r3, #49	; 0x31
 8005c4e:	f805 3b01 	strb.w	r3, [r5], #1
 8005c52:	f10b 0b01 	add.w	fp, fp, #1
 8005c56:	e241      	b.n	80060dc <_dtoa_r+0x95c>
 8005c58:	07f2      	lsls	r2, r6, #31
 8005c5a:	d505      	bpl.n	8005c68 <_dtoa_r+0x4e8>
 8005c5c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005c60:	f7fa fcca 	bl	80005f8 <__aeabi_dmul>
 8005c64:	3501      	adds	r5, #1
 8005c66:	2301      	movs	r3, #1
 8005c68:	1076      	asrs	r6, r6, #1
 8005c6a:	3708      	adds	r7, #8
 8005c6c:	e773      	b.n	8005b56 <_dtoa_r+0x3d6>
 8005c6e:	2502      	movs	r5, #2
 8005c70:	e775      	b.n	8005b5e <_dtoa_r+0x3de>
 8005c72:	9e04      	ldr	r6, [sp, #16]
 8005c74:	465f      	mov	r7, fp
 8005c76:	e792      	b.n	8005b9e <_dtoa_r+0x41e>
 8005c78:	9900      	ldr	r1, [sp, #0]
 8005c7a:	4b50      	ldr	r3, [pc, #320]	; (8005dbc <_dtoa_r+0x63c>)
 8005c7c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005c80:	4431      	add	r1, r6
 8005c82:	9102      	str	r1, [sp, #8]
 8005c84:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005c86:	eeb0 9a47 	vmov.f32	s18, s14
 8005c8a:	eef0 9a67 	vmov.f32	s19, s15
 8005c8e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005c92:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005c96:	2900      	cmp	r1, #0
 8005c98:	d044      	beq.n	8005d24 <_dtoa_r+0x5a4>
 8005c9a:	494e      	ldr	r1, [pc, #312]	; (8005dd4 <_dtoa_r+0x654>)
 8005c9c:	2000      	movs	r0, #0
 8005c9e:	f7fa fdd5 	bl	800084c <__aeabi_ddiv>
 8005ca2:	ec53 2b19 	vmov	r2, r3, d9
 8005ca6:	f7fa faef 	bl	8000288 <__aeabi_dsub>
 8005caa:	9d00      	ldr	r5, [sp, #0]
 8005cac:	ec41 0b19 	vmov	d9, r0, r1
 8005cb0:	4649      	mov	r1, r9
 8005cb2:	4640      	mov	r0, r8
 8005cb4:	f7fa ff50 	bl	8000b58 <__aeabi_d2iz>
 8005cb8:	4606      	mov	r6, r0
 8005cba:	f7fa fc33 	bl	8000524 <__aeabi_i2d>
 8005cbe:	4602      	mov	r2, r0
 8005cc0:	460b      	mov	r3, r1
 8005cc2:	4640      	mov	r0, r8
 8005cc4:	4649      	mov	r1, r9
 8005cc6:	f7fa fadf 	bl	8000288 <__aeabi_dsub>
 8005cca:	3630      	adds	r6, #48	; 0x30
 8005ccc:	f805 6b01 	strb.w	r6, [r5], #1
 8005cd0:	ec53 2b19 	vmov	r2, r3, d9
 8005cd4:	4680      	mov	r8, r0
 8005cd6:	4689      	mov	r9, r1
 8005cd8:	f7fa ff00 	bl	8000adc <__aeabi_dcmplt>
 8005cdc:	2800      	cmp	r0, #0
 8005cde:	d164      	bne.n	8005daa <_dtoa_r+0x62a>
 8005ce0:	4642      	mov	r2, r8
 8005ce2:	464b      	mov	r3, r9
 8005ce4:	4937      	ldr	r1, [pc, #220]	; (8005dc4 <_dtoa_r+0x644>)
 8005ce6:	2000      	movs	r0, #0
 8005ce8:	f7fa face 	bl	8000288 <__aeabi_dsub>
 8005cec:	ec53 2b19 	vmov	r2, r3, d9
 8005cf0:	f7fa fef4 	bl	8000adc <__aeabi_dcmplt>
 8005cf4:	2800      	cmp	r0, #0
 8005cf6:	f040 80b6 	bne.w	8005e66 <_dtoa_r+0x6e6>
 8005cfa:	9b02      	ldr	r3, [sp, #8]
 8005cfc:	429d      	cmp	r5, r3
 8005cfe:	f43f af7c 	beq.w	8005bfa <_dtoa_r+0x47a>
 8005d02:	4b31      	ldr	r3, [pc, #196]	; (8005dc8 <_dtoa_r+0x648>)
 8005d04:	ec51 0b19 	vmov	r0, r1, d9
 8005d08:	2200      	movs	r2, #0
 8005d0a:	f7fa fc75 	bl	80005f8 <__aeabi_dmul>
 8005d0e:	4b2e      	ldr	r3, [pc, #184]	; (8005dc8 <_dtoa_r+0x648>)
 8005d10:	ec41 0b19 	vmov	d9, r0, r1
 8005d14:	2200      	movs	r2, #0
 8005d16:	4640      	mov	r0, r8
 8005d18:	4649      	mov	r1, r9
 8005d1a:	f7fa fc6d 	bl	80005f8 <__aeabi_dmul>
 8005d1e:	4680      	mov	r8, r0
 8005d20:	4689      	mov	r9, r1
 8005d22:	e7c5      	b.n	8005cb0 <_dtoa_r+0x530>
 8005d24:	ec51 0b17 	vmov	r0, r1, d7
 8005d28:	f7fa fc66 	bl	80005f8 <__aeabi_dmul>
 8005d2c:	9b02      	ldr	r3, [sp, #8]
 8005d2e:	9d00      	ldr	r5, [sp, #0]
 8005d30:	930f      	str	r3, [sp, #60]	; 0x3c
 8005d32:	ec41 0b19 	vmov	d9, r0, r1
 8005d36:	4649      	mov	r1, r9
 8005d38:	4640      	mov	r0, r8
 8005d3a:	f7fa ff0d 	bl	8000b58 <__aeabi_d2iz>
 8005d3e:	4606      	mov	r6, r0
 8005d40:	f7fa fbf0 	bl	8000524 <__aeabi_i2d>
 8005d44:	3630      	adds	r6, #48	; 0x30
 8005d46:	4602      	mov	r2, r0
 8005d48:	460b      	mov	r3, r1
 8005d4a:	4640      	mov	r0, r8
 8005d4c:	4649      	mov	r1, r9
 8005d4e:	f7fa fa9b 	bl	8000288 <__aeabi_dsub>
 8005d52:	f805 6b01 	strb.w	r6, [r5], #1
 8005d56:	9b02      	ldr	r3, [sp, #8]
 8005d58:	429d      	cmp	r5, r3
 8005d5a:	4680      	mov	r8, r0
 8005d5c:	4689      	mov	r9, r1
 8005d5e:	f04f 0200 	mov.w	r2, #0
 8005d62:	d124      	bne.n	8005dae <_dtoa_r+0x62e>
 8005d64:	4b1b      	ldr	r3, [pc, #108]	; (8005dd4 <_dtoa_r+0x654>)
 8005d66:	ec51 0b19 	vmov	r0, r1, d9
 8005d6a:	f7fa fa8f 	bl	800028c <__adddf3>
 8005d6e:	4602      	mov	r2, r0
 8005d70:	460b      	mov	r3, r1
 8005d72:	4640      	mov	r0, r8
 8005d74:	4649      	mov	r1, r9
 8005d76:	f7fa fecf 	bl	8000b18 <__aeabi_dcmpgt>
 8005d7a:	2800      	cmp	r0, #0
 8005d7c:	d173      	bne.n	8005e66 <_dtoa_r+0x6e6>
 8005d7e:	ec53 2b19 	vmov	r2, r3, d9
 8005d82:	4914      	ldr	r1, [pc, #80]	; (8005dd4 <_dtoa_r+0x654>)
 8005d84:	2000      	movs	r0, #0
 8005d86:	f7fa fa7f 	bl	8000288 <__aeabi_dsub>
 8005d8a:	4602      	mov	r2, r0
 8005d8c:	460b      	mov	r3, r1
 8005d8e:	4640      	mov	r0, r8
 8005d90:	4649      	mov	r1, r9
 8005d92:	f7fa fea3 	bl	8000adc <__aeabi_dcmplt>
 8005d96:	2800      	cmp	r0, #0
 8005d98:	f43f af2f 	beq.w	8005bfa <_dtoa_r+0x47a>
 8005d9c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8005d9e:	1e6b      	subs	r3, r5, #1
 8005da0:	930f      	str	r3, [sp, #60]	; 0x3c
 8005da2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005da6:	2b30      	cmp	r3, #48	; 0x30
 8005da8:	d0f8      	beq.n	8005d9c <_dtoa_r+0x61c>
 8005daa:	46bb      	mov	fp, r7
 8005dac:	e04a      	b.n	8005e44 <_dtoa_r+0x6c4>
 8005dae:	4b06      	ldr	r3, [pc, #24]	; (8005dc8 <_dtoa_r+0x648>)
 8005db0:	f7fa fc22 	bl	80005f8 <__aeabi_dmul>
 8005db4:	4680      	mov	r8, r0
 8005db6:	4689      	mov	r9, r1
 8005db8:	e7bd      	b.n	8005d36 <_dtoa_r+0x5b6>
 8005dba:	bf00      	nop
 8005dbc:	08009618 	.word	0x08009618
 8005dc0:	080095f0 	.word	0x080095f0
 8005dc4:	3ff00000 	.word	0x3ff00000
 8005dc8:	40240000 	.word	0x40240000
 8005dcc:	401c0000 	.word	0x401c0000
 8005dd0:	40140000 	.word	0x40140000
 8005dd4:	3fe00000 	.word	0x3fe00000
 8005dd8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005ddc:	9d00      	ldr	r5, [sp, #0]
 8005dde:	4642      	mov	r2, r8
 8005de0:	464b      	mov	r3, r9
 8005de2:	4630      	mov	r0, r6
 8005de4:	4639      	mov	r1, r7
 8005de6:	f7fa fd31 	bl	800084c <__aeabi_ddiv>
 8005dea:	f7fa feb5 	bl	8000b58 <__aeabi_d2iz>
 8005dee:	9001      	str	r0, [sp, #4]
 8005df0:	f7fa fb98 	bl	8000524 <__aeabi_i2d>
 8005df4:	4642      	mov	r2, r8
 8005df6:	464b      	mov	r3, r9
 8005df8:	f7fa fbfe 	bl	80005f8 <__aeabi_dmul>
 8005dfc:	4602      	mov	r2, r0
 8005dfe:	460b      	mov	r3, r1
 8005e00:	4630      	mov	r0, r6
 8005e02:	4639      	mov	r1, r7
 8005e04:	f7fa fa40 	bl	8000288 <__aeabi_dsub>
 8005e08:	9e01      	ldr	r6, [sp, #4]
 8005e0a:	9f04      	ldr	r7, [sp, #16]
 8005e0c:	3630      	adds	r6, #48	; 0x30
 8005e0e:	f805 6b01 	strb.w	r6, [r5], #1
 8005e12:	9e00      	ldr	r6, [sp, #0]
 8005e14:	1bae      	subs	r6, r5, r6
 8005e16:	42b7      	cmp	r7, r6
 8005e18:	4602      	mov	r2, r0
 8005e1a:	460b      	mov	r3, r1
 8005e1c:	d134      	bne.n	8005e88 <_dtoa_r+0x708>
 8005e1e:	f7fa fa35 	bl	800028c <__adddf3>
 8005e22:	4642      	mov	r2, r8
 8005e24:	464b      	mov	r3, r9
 8005e26:	4606      	mov	r6, r0
 8005e28:	460f      	mov	r7, r1
 8005e2a:	f7fa fe75 	bl	8000b18 <__aeabi_dcmpgt>
 8005e2e:	b9c8      	cbnz	r0, 8005e64 <_dtoa_r+0x6e4>
 8005e30:	4642      	mov	r2, r8
 8005e32:	464b      	mov	r3, r9
 8005e34:	4630      	mov	r0, r6
 8005e36:	4639      	mov	r1, r7
 8005e38:	f7fa fe46 	bl	8000ac8 <__aeabi_dcmpeq>
 8005e3c:	b110      	cbz	r0, 8005e44 <_dtoa_r+0x6c4>
 8005e3e:	9b01      	ldr	r3, [sp, #4]
 8005e40:	07db      	lsls	r3, r3, #31
 8005e42:	d40f      	bmi.n	8005e64 <_dtoa_r+0x6e4>
 8005e44:	4651      	mov	r1, sl
 8005e46:	4620      	mov	r0, r4
 8005e48:	f000 fbcc 	bl	80065e4 <_Bfree>
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005e50:	702b      	strb	r3, [r5, #0]
 8005e52:	f10b 0301 	add.w	r3, fp, #1
 8005e56:	6013      	str	r3, [r2, #0]
 8005e58:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	f43f ace2 	beq.w	8005824 <_dtoa_r+0xa4>
 8005e60:	601d      	str	r5, [r3, #0]
 8005e62:	e4df      	b.n	8005824 <_dtoa_r+0xa4>
 8005e64:	465f      	mov	r7, fp
 8005e66:	462b      	mov	r3, r5
 8005e68:	461d      	mov	r5, r3
 8005e6a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005e6e:	2a39      	cmp	r2, #57	; 0x39
 8005e70:	d106      	bne.n	8005e80 <_dtoa_r+0x700>
 8005e72:	9a00      	ldr	r2, [sp, #0]
 8005e74:	429a      	cmp	r2, r3
 8005e76:	d1f7      	bne.n	8005e68 <_dtoa_r+0x6e8>
 8005e78:	9900      	ldr	r1, [sp, #0]
 8005e7a:	2230      	movs	r2, #48	; 0x30
 8005e7c:	3701      	adds	r7, #1
 8005e7e:	700a      	strb	r2, [r1, #0]
 8005e80:	781a      	ldrb	r2, [r3, #0]
 8005e82:	3201      	adds	r2, #1
 8005e84:	701a      	strb	r2, [r3, #0]
 8005e86:	e790      	b.n	8005daa <_dtoa_r+0x62a>
 8005e88:	4ba3      	ldr	r3, [pc, #652]	; (8006118 <_dtoa_r+0x998>)
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	f7fa fbb4 	bl	80005f8 <__aeabi_dmul>
 8005e90:	2200      	movs	r2, #0
 8005e92:	2300      	movs	r3, #0
 8005e94:	4606      	mov	r6, r0
 8005e96:	460f      	mov	r7, r1
 8005e98:	f7fa fe16 	bl	8000ac8 <__aeabi_dcmpeq>
 8005e9c:	2800      	cmp	r0, #0
 8005e9e:	d09e      	beq.n	8005dde <_dtoa_r+0x65e>
 8005ea0:	e7d0      	b.n	8005e44 <_dtoa_r+0x6c4>
 8005ea2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005ea4:	2a00      	cmp	r2, #0
 8005ea6:	f000 80ca 	beq.w	800603e <_dtoa_r+0x8be>
 8005eaa:	9a07      	ldr	r2, [sp, #28]
 8005eac:	2a01      	cmp	r2, #1
 8005eae:	f300 80ad 	bgt.w	800600c <_dtoa_r+0x88c>
 8005eb2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005eb4:	2a00      	cmp	r2, #0
 8005eb6:	f000 80a5 	beq.w	8006004 <_dtoa_r+0x884>
 8005eba:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005ebe:	9e08      	ldr	r6, [sp, #32]
 8005ec0:	9d05      	ldr	r5, [sp, #20]
 8005ec2:	9a05      	ldr	r2, [sp, #20]
 8005ec4:	441a      	add	r2, r3
 8005ec6:	9205      	str	r2, [sp, #20]
 8005ec8:	9a06      	ldr	r2, [sp, #24]
 8005eca:	2101      	movs	r1, #1
 8005ecc:	441a      	add	r2, r3
 8005ece:	4620      	mov	r0, r4
 8005ed0:	9206      	str	r2, [sp, #24]
 8005ed2:	f000 fc3d 	bl	8006750 <__i2b>
 8005ed6:	4607      	mov	r7, r0
 8005ed8:	b165      	cbz	r5, 8005ef4 <_dtoa_r+0x774>
 8005eda:	9b06      	ldr	r3, [sp, #24]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	dd09      	ble.n	8005ef4 <_dtoa_r+0x774>
 8005ee0:	42ab      	cmp	r3, r5
 8005ee2:	9a05      	ldr	r2, [sp, #20]
 8005ee4:	bfa8      	it	ge
 8005ee6:	462b      	movge	r3, r5
 8005ee8:	1ad2      	subs	r2, r2, r3
 8005eea:	9205      	str	r2, [sp, #20]
 8005eec:	9a06      	ldr	r2, [sp, #24]
 8005eee:	1aed      	subs	r5, r5, r3
 8005ef0:	1ad3      	subs	r3, r2, r3
 8005ef2:	9306      	str	r3, [sp, #24]
 8005ef4:	9b08      	ldr	r3, [sp, #32]
 8005ef6:	b1f3      	cbz	r3, 8005f36 <_dtoa_r+0x7b6>
 8005ef8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	f000 80a3 	beq.w	8006046 <_dtoa_r+0x8c6>
 8005f00:	2e00      	cmp	r6, #0
 8005f02:	dd10      	ble.n	8005f26 <_dtoa_r+0x7a6>
 8005f04:	4639      	mov	r1, r7
 8005f06:	4632      	mov	r2, r6
 8005f08:	4620      	mov	r0, r4
 8005f0a:	f000 fce1 	bl	80068d0 <__pow5mult>
 8005f0e:	4652      	mov	r2, sl
 8005f10:	4601      	mov	r1, r0
 8005f12:	4607      	mov	r7, r0
 8005f14:	4620      	mov	r0, r4
 8005f16:	f000 fc31 	bl	800677c <__multiply>
 8005f1a:	4651      	mov	r1, sl
 8005f1c:	4680      	mov	r8, r0
 8005f1e:	4620      	mov	r0, r4
 8005f20:	f000 fb60 	bl	80065e4 <_Bfree>
 8005f24:	46c2      	mov	sl, r8
 8005f26:	9b08      	ldr	r3, [sp, #32]
 8005f28:	1b9a      	subs	r2, r3, r6
 8005f2a:	d004      	beq.n	8005f36 <_dtoa_r+0x7b6>
 8005f2c:	4651      	mov	r1, sl
 8005f2e:	4620      	mov	r0, r4
 8005f30:	f000 fcce 	bl	80068d0 <__pow5mult>
 8005f34:	4682      	mov	sl, r0
 8005f36:	2101      	movs	r1, #1
 8005f38:	4620      	mov	r0, r4
 8005f3a:	f000 fc09 	bl	8006750 <__i2b>
 8005f3e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	4606      	mov	r6, r0
 8005f44:	f340 8081 	ble.w	800604a <_dtoa_r+0x8ca>
 8005f48:	461a      	mov	r2, r3
 8005f4a:	4601      	mov	r1, r0
 8005f4c:	4620      	mov	r0, r4
 8005f4e:	f000 fcbf 	bl	80068d0 <__pow5mult>
 8005f52:	9b07      	ldr	r3, [sp, #28]
 8005f54:	2b01      	cmp	r3, #1
 8005f56:	4606      	mov	r6, r0
 8005f58:	dd7a      	ble.n	8006050 <_dtoa_r+0x8d0>
 8005f5a:	f04f 0800 	mov.w	r8, #0
 8005f5e:	6933      	ldr	r3, [r6, #16]
 8005f60:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005f64:	6918      	ldr	r0, [r3, #16]
 8005f66:	f000 fba5 	bl	80066b4 <__hi0bits>
 8005f6a:	f1c0 0020 	rsb	r0, r0, #32
 8005f6e:	9b06      	ldr	r3, [sp, #24]
 8005f70:	4418      	add	r0, r3
 8005f72:	f010 001f 	ands.w	r0, r0, #31
 8005f76:	f000 8094 	beq.w	80060a2 <_dtoa_r+0x922>
 8005f7a:	f1c0 0320 	rsb	r3, r0, #32
 8005f7e:	2b04      	cmp	r3, #4
 8005f80:	f340 8085 	ble.w	800608e <_dtoa_r+0x90e>
 8005f84:	9b05      	ldr	r3, [sp, #20]
 8005f86:	f1c0 001c 	rsb	r0, r0, #28
 8005f8a:	4403      	add	r3, r0
 8005f8c:	9305      	str	r3, [sp, #20]
 8005f8e:	9b06      	ldr	r3, [sp, #24]
 8005f90:	4403      	add	r3, r0
 8005f92:	4405      	add	r5, r0
 8005f94:	9306      	str	r3, [sp, #24]
 8005f96:	9b05      	ldr	r3, [sp, #20]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	dd05      	ble.n	8005fa8 <_dtoa_r+0x828>
 8005f9c:	4651      	mov	r1, sl
 8005f9e:	461a      	mov	r2, r3
 8005fa0:	4620      	mov	r0, r4
 8005fa2:	f000 fcef 	bl	8006984 <__lshift>
 8005fa6:	4682      	mov	sl, r0
 8005fa8:	9b06      	ldr	r3, [sp, #24]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	dd05      	ble.n	8005fba <_dtoa_r+0x83a>
 8005fae:	4631      	mov	r1, r6
 8005fb0:	461a      	mov	r2, r3
 8005fb2:	4620      	mov	r0, r4
 8005fb4:	f000 fce6 	bl	8006984 <__lshift>
 8005fb8:	4606      	mov	r6, r0
 8005fba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d072      	beq.n	80060a6 <_dtoa_r+0x926>
 8005fc0:	4631      	mov	r1, r6
 8005fc2:	4650      	mov	r0, sl
 8005fc4:	f000 fd4a 	bl	8006a5c <__mcmp>
 8005fc8:	2800      	cmp	r0, #0
 8005fca:	da6c      	bge.n	80060a6 <_dtoa_r+0x926>
 8005fcc:	2300      	movs	r3, #0
 8005fce:	4651      	mov	r1, sl
 8005fd0:	220a      	movs	r2, #10
 8005fd2:	4620      	mov	r0, r4
 8005fd4:	f000 fb28 	bl	8006628 <__multadd>
 8005fd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005fda:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005fde:	4682      	mov	sl, r0
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	f000 81b0 	beq.w	8006346 <_dtoa_r+0xbc6>
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	4639      	mov	r1, r7
 8005fea:	220a      	movs	r2, #10
 8005fec:	4620      	mov	r0, r4
 8005fee:	f000 fb1b 	bl	8006628 <__multadd>
 8005ff2:	9b01      	ldr	r3, [sp, #4]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	4607      	mov	r7, r0
 8005ff8:	f300 8096 	bgt.w	8006128 <_dtoa_r+0x9a8>
 8005ffc:	9b07      	ldr	r3, [sp, #28]
 8005ffe:	2b02      	cmp	r3, #2
 8006000:	dc59      	bgt.n	80060b6 <_dtoa_r+0x936>
 8006002:	e091      	b.n	8006128 <_dtoa_r+0x9a8>
 8006004:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006006:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800600a:	e758      	b.n	8005ebe <_dtoa_r+0x73e>
 800600c:	9b04      	ldr	r3, [sp, #16]
 800600e:	1e5e      	subs	r6, r3, #1
 8006010:	9b08      	ldr	r3, [sp, #32]
 8006012:	42b3      	cmp	r3, r6
 8006014:	bfbf      	itttt	lt
 8006016:	9b08      	ldrlt	r3, [sp, #32]
 8006018:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800601a:	9608      	strlt	r6, [sp, #32]
 800601c:	1af3      	sublt	r3, r6, r3
 800601e:	bfb4      	ite	lt
 8006020:	18d2      	addlt	r2, r2, r3
 8006022:	1b9e      	subge	r6, r3, r6
 8006024:	9b04      	ldr	r3, [sp, #16]
 8006026:	bfbc      	itt	lt
 8006028:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800602a:	2600      	movlt	r6, #0
 800602c:	2b00      	cmp	r3, #0
 800602e:	bfb7      	itett	lt
 8006030:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8006034:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8006038:	1a9d      	sublt	r5, r3, r2
 800603a:	2300      	movlt	r3, #0
 800603c:	e741      	b.n	8005ec2 <_dtoa_r+0x742>
 800603e:	9e08      	ldr	r6, [sp, #32]
 8006040:	9d05      	ldr	r5, [sp, #20]
 8006042:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8006044:	e748      	b.n	8005ed8 <_dtoa_r+0x758>
 8006046:	9a08      	ldr	r2, [sp, #32]
 8006048:	e770      	b.n	8005f2c <_dtoa_r+0x7ac>
 800604a:	9b07      	ldr	r3, [sp, #28]
 800604c:	2b01      	cmp	r3, #1
 800604e:	dc19      	bgt.n	8006084 <_dtoa_r+0x904>
 8006050:	9b02      	ldr	r3, [sp, #8]
 8006052:	b9bb      	cbnz	r3, 8006084 <_dtoa_r+0x904>
 8006054:	9b03      	ldr	r3, [sp, #12]
 8006056:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800605a:	b99b      	cbnz	r3, 8006084 <_dtoa_r+0x904>
 800605c:	9b03      	ldr	r3, [sp, #12]
 800605e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006062:	0d1b      	lsrs	r3, r3, #20
 8006064:	051b      	lsls	r3, r3, #20
 8006066:	b183      	cbz	r3, 800608a <_dtoa_r+0x90a>
 8006068:	9b05      	ldr	r3, [sp, #20]
 800606a:	3301      	adds	r3, #1
 800606c:	9305      	str	r3, [sp, #20]
 800606e:	9b06      	ldr	r3, [sp, #24]
 8006070:	3301      	adds	r3, #1
 8006072:	9306      	str	r3, [sp, #24]
 8006074:	f04f 0801 	mov.w	r8, #1
 8006078:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800607a:	2b00      	cmp	r3, #0
 800607c:	f47f af6f 	bne.w	8005f5e <_dtoa_r+0x7de>
 8006080:	2001      	movs	r0, #1
 8006082:	e774      	b.n	8005f6e <_dtoa_r+0x7ee>
 8006084:	f04f 0800 	mov.w	r8, #0
 8006088:	e7f6      	b.n	8006078 <_dtoa_r+0x8f8>
 800608a:	4698      	mov	r8, r3
 800608c:	e7f4      	b.n	8006078 <_dtoa_r+0x8f8>
 800608e:	d082      	beq.n	8005f96 <_dtoa_r+0x816>
 8006090:	9a05      	ldr	r2, [sp, #20]
 8006092:	331c      	adds	r3, #28
 8006094:	441a      	add	r2, r3
 8006096:	9205      	str	r2, [sp, #20]
 8006098:	9a06      	ldr	r2, [sp, #24]
 800609a:	441a      	add	r2, r3
 800609c:	441d      	add	r5, r3
 800609e:	9206      	str	r2, [sp, #24]
 80060a0:	e779      	b.n	8005f96 <_dtoa_r+0x816>
 80060a2:	4603      	mov	r3, r0
 80060a4:	e7f4      	b.n	8006090 <_dtoa_r+0x910>
 80060a6:	9b04      	ldr	r3, [sp, #16]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	dc37      	bgt.n	800611c <_dtoa_r+0x99c>
 80060ac:	9b07      	ldr	r3, [sp, #28]
 80060ae:	2b02      	cmp	r3, #2
 80060b0:	dd34      	ble.n	800611c <_dtoa_r+0x99c>
 80060b2:	9b04      	ldr	r3, [sp, #16]
 80060b4:	9301      	str	r3, [sp, #4]
 80060b6:	9b01      	ldr	r3, [sp, #4]
 80060b8:	b963      	cbnz	r3, 80060d4 <_dtoa_r+0x954>
 80060ba:	4631      	mov	r1, r6
 80060bc:	2205      	movs	r2, #5
 80060be:	4620      	mov	r0, r4
 80060c0:	f000 fab2 	bl	8006628 <__multadd>
 80060c4:	4601      	mov	r1, r0
 80060c6:	4606      	mov	r6, r0
 80060c8:	4650      	mov	r0, sl
 80060ca:	f000 fcc7 	bl	8006a5c <__mcmp>
 80060ce:	2800      	cmp	r0, #0
 80060d0:	f73f adbb 	bgt.w	8005c4a <_dtoa_r+0x4ca>
 80060d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80060d6:	9d00      	ldr	r5, [sp, #0]
 80060d8:	ea6f 0b03 	mvn.w	fp, r3
 80060dc:	f04f 0800 	mov.w	r8, #0
 80060e0:	4631      	mov	r1, r6
 80060e2:	4620      	mov	r0, r4
 80060e4:	f000 fa7e 	bl	80065e4 <_Bfree>
 80060e8:	2f00      	cmp	r7, #0
 80060ea:	f43f aeab 	beq.w	8005e44 <_dtoa_r+0x6c4>
 80060ee:	f1b8 0f00 	cmp.w	r8, #0
 80060f2:	d005      	beq.n	8006100 <_dtoa_r+0x980>
 80060f4:	45b8      	cmp	r8, r7
 80060f6:	d003      	beq.n	8006100 <_dtoa_r+0x980>
 80060f8:	4641      	mov	r1, r8
 80060fa:	4620      	mov	r0, r4
 80060fc:	f000 fa72 	bl	80065e4 <_Bfree>
 8006100:	4639      	mov	r1, r7
 8006102:	4620      	mov	r0, r4
 8006104:	f000 fa6e 	bl	80065e4 <_Bfree>
 8006108:	e69c      	b.n	8005e44 <_dtoa_r+0x6c4>
 800610a:	2600      	movs	r6, #0
 800610c:	4637      	mov	r7, r6
 800610e:	e7e1      	b.n	80060d4 <_dtoa_r+0x954>
 8006110:	46bb      	mov	fp, r7
 8006112:	4637      	mov	r7, r6
 8006114:	e599      	b.n	8005c4a <_dtoa_r+0x4ca>
 8006116:	bf00      	nop
 8006118:	40240000 	.word	0x40240000
 800611c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800611e:	2b00      	cmp	r3, #0
 8006120:	f000 80c8 	beq.w	80062b4 <_dtoa_r+0xb34>
 8006124:	9b04      	ldr	r3, [sp, #16]
 8006126:	9301      	str	r3, [sp, #4]
 8006128:	2d00      	cmp	r5, #0
 800612a:	dd05      	ble.n	8006138 <_dtoa_r+0x9b8>
 800612c:	4639      	mov	r1, r7
 800612e:	462a      	mov	r2, r5
 8006130:	4620      	mov	r0, r4
 8006132:	f000 fc27 	bl	8006984 <__lshift>
 8006136:	4607      	mov	r7, r0
 8006138:	f1b8 0f00 	cmp.w	r8, #0
 800613c:	d05b      	beq.n	80061f6 <_dtoa_r+0xa76>
 800613e:	6879      	ldr	r1, [r7, #4]
 8006140:	4620      	mov	r0, r4
 8006142:	f000 fa0f 	bl	8006564 <_Balloc>
 8006146:	4605      	mov	r5, r0
 8006148:	b928      	cbnz	r0, 8006156 <_dtoa_r+0x9d6>
 800614a:	4b83      	ldr	r3, [pc, #524]	; (8006358 <_dtoa_r+0xbd8>)
 800614c:	4602      	mov	r2, r0
 800614e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8006152:	f7ff bb2e 	b.w	80057b2 <_dtoa_r+0x32>
 8006156:	693a      	ldr	r2, [r7, #16]
 8006158:	3202      	adds	r2, #2
 800615a:	0092      	lsls	r2, r2, #2
 800615c:	f107 010c 	add.w	r1, r7, #12
 8006160:	300c      	adds	r0, #12
 8006162:	f000 ffab 	bl	80070bc <memcpy>
 8006166:	2201      	movs	r2, #1
 8006168:	4629      	mov	r1, r5
 800616a:	4620      	mov	r0, r4
 800616c:	f000 fc0a 	bl	8006984 <__lshift>
 8006170:	9b00      	ldr	r3, [sp, #0]
 8006172:	3301      	adds	r3, #1
 8006174:	9304      	str	r3, [sp, #16]
 8006176:	e9dd 2300 	ldrd	r2, r3, [sp]
 800617a:	4413      	add	r3, r2
 800617c:	9308      	str	r3, [sp, #32]
 800617e:	9b02      	ldr	r3, [sp, #8]
 8006180:	f003 0301 	and.w	r3, r3, #1
 8006184:	46b8      	mov	r8, r7
 8006186:	9306      	str	r3, [sp, #24]
 8006188:	4607      	mov	r7, r0
 800618a:	9b04      	ldr	r3, [sp, #16]
 800618c:	4631      	mov	r1, r6
 800618e:	3b01      	subs	r3, #1
 8006190:	4650      	mov	r0, sl
 8006192:	9301      	str	r3, [sp, #4]
 8006194:	f7ff fa69 	bl	800566a <quorem>
 8006198:	4641      	mov	r1, r8
 800619a:	9002      	str	r0, [sp, #8]
 800619c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80061a0:	4650      	mov	r0, sl
 80061a2:	f000 fc5b 	bl	8006a5c <__mcmp>
 80061a6:	463a      	mov	r2, r7
 80061a8:	9005      	str	r0, [sp, #20]
 80061aa:	4631      	mov	r1, r6
 80061ac:	4620      	mov	r0, r4
 80061ae:	f000 fc71 	bl	8006a94 <__mdiff>
 80061b2:	68c2      	ldr	r2, [r0, #12]
 80061b4:	4605      	mov	r5, r0
 80061b6:	bb02      	cbnz	r2, 80061fa <_dtoa_r+0xa7a>
 80061b8:	4601      	mov	r1, r0
 80061ba:	4650      	mov	r0, sl
 80061bc:	f000 fc4e 	bl	8006a5c <__mcmp>
 80061c0:	4602      	mov	r2, r0
 80061c2:	4629      	mov	r1, r5
 80061c4:	4620      	mov	r0, r4
 80061c6:	9209      	str	r2, [sp, #36]	; 0x24
 80061c8:	f000 fa0c 	bl	80065e4 <_Bfree>
 80061cc:	9b07      	ldr	r3, [sp, #28]
 80061ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80061d0:	9d04      	ldr	r5, [sp, #16]
 80061d2:	ea43 0102 	orr.w	r1, r3, r2
 80061d6:	9b06      	ldr	r3, [sp, #24]
 80061d8:	4319      	orrs	r1, r3
 80061da:	d110      	bne.n	80061fe <_dtoa_r+0xa7e>
 80061dc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80061e0:	d029      	beq.n	8006236 <_dtoa_r+0xab6>
 80061e2:	9b05      	ldr	r3, [sp, #20]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	dd02      	ble.n	80061ee <_dtoa_r+0xa6e>
 80061e8:	9b02      	ldr	r3, [sp, #8]
 80061ea:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80061ee:	9b01      	ldr	r3, [sp, #4]
 80061f0:	f883 9000 	strb.w	r9, [r3]
 80061f4:	e774      	b.n	80060e0 <_dtoa_r+0x960>
 80061f6:	4638      	mov	r0, r7
 80061f8:	e7ba      	b.n	8006170 <_dtoa_r+0x9f0>
 80061fa:	2201      	movs	r2, #1
 80061fc:	e7e1      	b.n	80061c2 <_dtoa_r+0xa42>
 80061fe:	9b05      	ldr	r3, [sp, #20]
 8006200:	2b00      	cmp	r3, #0
 8006202:	db04      	blt.n	800620e <_dtoa_r+0xa8e>
 8006204:	9907      	ldr	r1, [sp, #28]
 8006206:	430b      	orrs	r3, r1
 8006208:	9906      	ldr	r1, [sp, #24]
 800620a:	430b      	orrs	r3, r1
 800620c:	d120      	bne.n	8006250 <_dtoa_r+0xad0>
 800620e:	2a00      	cmp	r2, #0
 8006210:	dded      	ble.n	80061ee <_dtoa_r+0xa6e>
 8006212:	4651      	mov	r1, sl
 8006214:	2201      	movs	r2, #1
 8006216:	4620      	mov	r0, r4
 8006218:	f000 fbb4 	bl	8006984 <__lshift>
 800621c:	4631      	mov	r1, r6
 800621e:	4682      	mov	sl, r0
 8006220:	f000 fc1c 	bl	8006a5c <__mcmp>
 8006224:	2800      	cmp	r0, #0
 8006226:	dc03      	bgt.n	8006230 <_dtoa_r+0xab0>
 8006228:	d1e1      	bne.n	80061ee <_dtoa_r+0xa6e>
 800622a:	f019 0f01 	tst.w	r9, #1
 800622e:	d0de      	beq.n	80061ee <_dtoa_r+0xa6e>
 8006230:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006234:	d1d8      	bne.n	80061e8 <_dtoa_r+0xa68>
 8006236:	9a01      	ldr	r2, [sp, #4]
 8006238:	2339      	movs	r3, #57	; 0x39
 800623a:	7013      	strb	r3, [r2, #0]
 800623c:	462b      	mov	r3, r5
 800623e:	461d      	mov	r5, r3
 8006240:	3b01      	subs	r3, #1
 8006242:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006246:	2a39      	cmp	r2, #57	; 0x39
 8006248:	d06c      	beq.n	8006324 <_dtoa_r+0xba4>
 800624a:	3201      	adds	r2, #1
 800624c:	701a      	strb	r2, [r3, #0]
 800624e:	e747      	b.n	80060e0 <_dtoa_r+0x960>
 8006250:	2a00      	cmp	r2, #0
 8006252:	dd07      	ble.n	8006264 <_dtoa_r+0xae4>
 8006254:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006258:	d0ed      	beq.n	8006236 <_dtoa_r+0xab6>
 800625a:	9a01      	ldr	r2, [sp, #4]
 800625c:	f109 0301 	add.w	r3, r9, #1
 8006260:	7013      	strb	r3, [r2, #0]
 8006262:	e73d      	b.n	80060e0 <_dtoa_r+0x960>
 8006264:	9b04      	ldr	r3, [sp, #16]
 8006266:	9a08      	ldr	r2, [sp, #32]
 8006268:	f803 9c01 	strb.w	r9, [r3, #-1]
 800626c:	4293      	cmp	r3, r2
 800626e:	d043      	beq.n	80062f8 <_dtoa_r+0xb78>
 8006270:	4651      	mov	r1, sl
 8006272:	2300      	movs	r3, #0
 8006274:	220a      	movs	r2, #10
 8006276:	4620      	mov	r0, r4
 8006278:	f000 f9d6 	bl	8006628 <__multadd>
 800627c:	45b8      	cmp	r8, r7
 800627e:	4682      	mov	sl, r0
 8006280:	f04f 0300 	mov.w	r3, #0
 8006284:	f04f 020a 	mov.w	r2, #10
 8006288:	4641      	mov	r1, r8
 800628a:	4620      	mov	r0, r4
 800628c:	d107      	bne.n	800629e <_dtoa_r+0xb1e>
 800628e:	f000 f9cb 	bl	8006628 <__multadd>
 8006292:	4680      	mov	r8, r0
 8006294:	4607      	mov	r7, r0
 8006296:	9b04      	ldr	r3, [sp, #16]
 8006298:	3301      	adds	r3, #1
 800629a:	9304      	str	r3, [sp, #16]
 800629c:	e775      	b.n	800618a <_dtoa_r+0xa0a>
 800629e:	f000 f9c3 	bl	8006628 <__multadd>
 80062a2:	4639      	mov	r1, r7
 80062a4:	4680      	mov	r8, r0
 80062a6:	2300      	movs	r3, #0
 80062a8:	220a      	movs	r2, #10
 80062aa:	4620      	mov	r0, r4
 80062ac:	f000 f9bc 	bl	8006628 <__multadd>
 80062b0:	4607      	mov	r7, r0
 80062b2:	e7f0      	b.n	8006296 <_dtoa_r+0xb16>
 80062b4:	9b04      	ldr	r3, [sp, #16]
 80062b6:	9301      	str	r3, [sp, #4]
 80062b8:	9d00      	ldr	r5, [sp, #0]
 80062ba:	4631      	mov	r1, r6
 80062bc:	4650      	mov	r0, sl
 80062be:	f7ff f9d4 	bl	800566a <quorem>
 80062c2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80062c6:	9b00      	ldr	r3, [sp, #0]
 80062c8:	f805 9b01 	strb.w	r9, [r5], #1
 80062cc:	1aea      	subs	r2, r5, r3
 80062ce:	9b01      	ldr	r3, [sp, #4]
 80062d0:	4293      	cmp	r3, r2
 80062d2:	dd07      	ble.n	80062e4 <_dtoa_r+0xb64>
 80062d4:	4651      	mov	r1, sl
 80062d6:	2300      	movs	r3, #0
 80062d8:	220a      	movs	r2, #10
 80062da:	4620      	mov	r0, r4
 80062dc:	f000 f9a4 	bl	8006628 <__multadd>
 80062e0:	4682      	mov	sl, r0
 80062e2:	e7ea      	b.n	80062ba <_dtoa_r+0xb3a>
 80062e4:	9b01      	ldr	r3, [sp, #4]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	bfc8      	it	gt
 80062ea:	461d      	movgt	r5, r3
 80062ec:	9b00      	ldr	r3, [sp, #0]
 80062ee:	bfd8      	it	le
 80062f0:	2501      	movle	r5, #1
 80062f2:	441d      	add	r5, r3
 80062f4:	f04f 0800 	mov.w	r8, #0
 80062f8:	4651      	mov	r1, sl
 80062fa:	2201      	movs	r2, #1
 80062fc:	4620      	mov	r0, r4
 80062fe:	f000 fb41 	bl	8006984 <__lshift>
 8006302:	4631      	mov	r1, r6
 8006304:	4682      	mov	sl, r0
 8006306:	f000 fba9 	bl	8006a5c <__mcmp>
 800630a:	2800      	cmp	r0, #0
 800630c:	dc96      	bgt.n	800623c <_dtoa_r+0xabc>
 800630e:	d102      	bne.n	8006316 <_dtoa_r+0xb96>
 8006310:	f019 0f01 	tst.w	r9, #1
 8006314:	d192      	bne.n	800623c <_dtoa_r+0xabc>
 8006316:	462b      	mov	r3, r5
 8006318:	461d      	mov	r5, r3
 800631a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800631e:	2a30      	cmp	r2, #48	; 0x30
 8006320:	d0fa      	beq.n	8006318 <_dtoa_r+0xb98>
 8006322:	e6dd      	b.n	80060e0 <_dtoa_r+0x960>
 8006324:	9a00      	ldr	r2, [sp, #0]
 8006326:	429a      	cmp	r2, r3
 8006328:	d189      	bne.n	800623e <_dtoa_r+0xabe>
 800632a:	f10b 0b01 	add.w	fp, fp, #1
 800632e:	2331      	movs	r3, #49	; 0x31
 8006330:	e796      	b.n	8006260 <_dtoa_r+0xae0>
 8006332:	4b0a      	ldr	r3, [pc, #40]	; (800635c <_dtoa_r+0xbdc>)
 8006334:	f7ff ba99 	b.w	800586a <_dtoa_r+0xea>
 8006338:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800633a:	2b00      	cmp	r3, #0
 800633c:	f47f aa6d 	bne.w	800581a <_dtoa_r+0x9a>
 8006340:	4b07      	ldr	r3, [pc, #28]	; (8006360 <_dtoa_r+0xbe0>)
 8006342:	f7ff ba92 	b.w	800586a <_dtoa_r+0xea>
 8006346:	9b01      	ldr	r3, [sp, #4]
 8006348:	2b00      	cmp	r3, #0
 800634a:	dcb5      	bgt.n	80062b8 <_dtoa_r+0xb38>
 800634c:	9b07      	ldr	r3, [sp, #28]
 800634e:	2b02      	cmp	r3, #2
 8006350:	f73f aeb1 	bgt.w	80060b6 <_dtoa_r+0x936>
 8006354:	e7b0      	b.n	80062b8 <_dtoa_r+0xb38>
 8006356:	bf00      	nop
 8006358:	08009584 	.word	0x08009584
 800635c:	080094e4 	.word	0x080094e4
 8006360:	08009508 	.word	0x08009508

08006364 <_free_r>:
 8006364:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006366:	2900      	cmp	r1, #0
 8006368:	d044      	beq.n	80063f4 <_free_r+0x90>
 800636a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800636e:	9001      	str	r0, [sp, #4]
 8006370:	2b00      	cmp	r3, #0
 8006372:	f1a1 0404 	sub.w	r4, r1, #4
 8006376:	bfb8      	it	lt
 8006378:	18e4      	addlt	r4, r4, r3
 800637a:	f000 f8e7 	bl	800654c <__malloc_lock>
 800637e:	4a1e      	ldr	r2, [pc, #120]	; (80063f8 <_free_r+0x94>)
 8006380:	9801      	ldr	r0, [sp, #4]
 8006382:	6813      	ldr	r3, [r2, #0]
 8006384:	b933      	cbnz	r3, 8006394 <_free_r+0x30>
 8006386:	6063      	str	r3, [r4, #4]
 8006388:	6014      	str	r4, [r2, #0]
 800638a:	b003      	add	sp, #12
 800638c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006390:	f000 b8e2 	b.w	8006558 <__malloc_unlock>
 8006394:	42a3      	cmp	r3, r4
 8006396:	d908      	bls.n	80063aa <_free_r+0x46>
 8006398:	6825      	ldr	r5, [r4, #0]
 800639a:	1961      	adds	r1, r4, r5
 800639c:	428b      	cmp	r3, r1
 800639e:	bf01      	itttt	eq
 80063a0:	6819      	ldreq	r1, [r3, #0]
 80063a2:	685b      	ldreq	r3, [r3, #4]
 80063a4:	1949      	addeq	r1, r1, r5
 80063a6:	6021      	streq	r1, [r4, #0]
 80063a8:	e7ed      	b.n	8006386 <_free_r+0x22>
 80063aa:	461a      	mov	r2, r3
 80063ac:	685b      	ldr	r3, [r3, #4]
 80063ae:	b10b      	cbz	r3, 80063b4 <_free_r+0x50>
 80063b0:	42a3      	cmp	r3, r4
 80063b2:	d9fa      	bls.n	80063aa <_free_r+0x46>
 80063b4:	6811      	ldr	r1, [r2, #0]
 80063b6:	1855      	adds	r5, r2, r1
 80063b8:	42a5      	cmp	r5, r4
 80063ba:	d10b      	bne.n	80063d4 <_free_r+0x70>
 80063bc:	6824      	ldr	r4, [r4, #0]
 80063be:	4421      	add	r1, r4
 80063c0:	1854      	adds	r4, r2, r1
 80063c2:	42a3      	cmp	r3, r4
 80063c4:	6011      	str	r1, [r2, #0]
 80063c6:	d1e0      	bne.n	800638a <_free_r+0x26>
 80063c8:	681c      	ldr	r4, [r3, #0]
 80063ca:	685b      	ldr	r3, [r3, #4]
 80063cc:	6053      	str	r3, [r2, #4]
 80063ce:	440c      	add	r4, r1
 80063d0:	6014      	str	r4, [r2, #0]
 80063d2:	e7da      	b.n	800638a <_free_r+0x26>
 80063d4:	d902      	bls.n	80063dc <_free_r+0x78>
 80063d6:	230c      	movs	r3, #12
 80063d8:	6003      	str	r3, [r0, #0]
 80063da:	e7d6      	b.n	800638a <_free_r+0x26>
 80063dc:	6825      	ldr	r5, [r4, #0]
 80063de:	1961      	adds	r1, r4, r5
 80063e0:	428b      	cmp	r3, r1
 80063e2:	bf04      	itt	eq
 80063e4:	6819      	ldreq	r1, [r3, #0]
 80063e6:	685b      	ldreq	r3, [r3, #4]
 80063e8:	6063      	str	r3, [r4, #4]
 80063ea:	bf04      	itt	eq
 80063ec:	1949      	addeq	r1, r1, r5
 80063ee:	6021      	streq	r1, [r4, #0]
 80063f0:	6054      	str	r4, [r2, #4]
 80063f2:	e7ca      	b.n	800638a <_free_r+0x26>
 80063f4:	b003      	add	sp, #12
 80063f6:	bd30      	pop	{r4, r5, pc}
 80063f8:	200124f4 	.word	0x200124f4

080063fc <malloc>:
 80063fc:	4b02      	ldr	r3, [pc, #8]	; (8006408 <malloc+0xc>)
 80063fe:	4601      	mov	r1, r0
 8006400:	6818      	ldr	r0, [r3, #0]
 8006402:	f000 b823 	b.w	800644c <_malloc_r>
 8006406:	bf00      	nop
 8006408:	20000064 	.word	0x20000064

0800640c <sbrk_aligned>:
 800640c:	b570      	push	{r4, r5, r6, lr}
 800640e:	4e0e      	ldr	r6, [pc, #56]	; (8006448 <sbrk_aligned+0x3c>)
 8006410:	460c      	mov	r4, r1
 8006412:	6831      	ldr	r1, [r6, #0]
 8006414:	4605      	mov	r5, r0
 8006416:	b911      	cbnz	r1, 800641e <sbrk_aligned+0x12>
 8006418:	f000 fe40 	bl	800709c <_sbrk_r>
 800641c:	6030      	str	r0, [r6, #0]
 800641e:	4621      	mov	r1, r4
 8006420:	4628      	mov	r0, r5
 8006422:	f000 fe3b 	bl	800709c <_sbrk_r>
 8006426:	1c43      	adds	r3, r0, #1
 8006428:	d00a      	beq.n	8006440 <sbrk_aligned+0x34>
 800642a:	1cc4      	adds	r4, r0, #3
 800642c:	f024 0403 	bic.w	r4, r4, #3
 8006430:	42a0      	cmp	r0, r4
 8006432:	d007      	beq.n	8006444 <sbrk_aligned+0x38>
 8006434:	1a21      	subs	r1, r4, r0
 8006436:	4628      	mov	r0, r5
 8006438:	f000 fe30 	bl	800709c <_sbrk_r>
 800643c:	3001      	adds	r0, #1
 800643e:	d101      	bne.n	8006444 <sbrk_aligned+0x38>
 8006440:	f04f 34ff 	mov.w	r4, #4294967295
 8006444:	4620      	mov	r0, r4
 8006446:	bd70      	pop	{r4, r5, r6, pc}
 8006448:	200124f8 	.word	0x200124f8

0800644c <_malloc_r>:
 800644c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006450:	1ccd      	adds	r5, r1, #3
 8006452:	f025 0503 	bic.w	r5, r5, #3
 8006456:	3508      	adds	r5, #8
 8006458:	2d0c      	cmp	r5, #12
 800645a:	bf38      	it	cc
 800645c:	250c      	movcc	r5, #12
 800645e:	2d00      	cmp	r5, #0
 8006460:	4607      	mov	r7, r0
 8006462:	db01      	blt.n	8006468 <_malloc_r+0x1c>
 8006464:	42a9      	cmp	r1, r5
 8006466:	d905      	bls.n	8006474 <_malloc_r+0x28>
 8006468:	230c      	movs	r3, #12
 800646a:	603b      	str	r3, [r7, #0]
 800646c:	2600      	movs	r6, #0
 800646e:	4630      	mov	r0, r6
 8006470:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006474:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006548 <_malloc_r+0xfc>
 8006478:	f000 f868 	bl	800654c <__malloc_lock>
 800647c:	f8d8 3000 	ldr.w	r3, [r8]
 8006480:	461c      	mov	r4, r3
 8006482:	bb5c      	cbnz	r4, 80064dc <_malloc_r+0x90>
 8006484:	4629      	mov	r1, r5
 8006486:	4638      	mov	r0, r7
 8006488:	f7ff ffc0 	bl	800640c <sbrk_aligned>
 800648c:	1c43      	adds	r3, r0, #1
 800648e:	4604      	mov	r4, r0
 8006490:	d155      	bne.n	800653e <_malloc_r+0xf2>
 8006492:	f8d8 4000 	ldr.w	r4, [r8]
 8006496:	4626      	mov	r6, r4
 8006498:	2e00      	cmp	r6, #0
 800649a:	d145      	bne.n	8006528 <_malloc_r+0xdc>
 800649c:	2c00      	cmp	r4, #0
 800649e:	d048      	beq.n	8006532 <_malloc_r+0xe6>
 80064a0:	6823      	ldr	r3, [r4, #0]
 80064a2:	4631      	mov	r1, r6
 80064a4:	4638      	mov	r0, r7
 80064a6:	eb04 0903 	add.w	r9, r4, r3
 80064aa:	f000 fdf7 	bl	800709c <_sbrk_r>
 80064ae:	4581      	cmp	r9, r0
 80064b0:	d13f      	bne.n	8006532 <_malloc_r+0xe6>
 80064b2:	6821      	ldr	r1, [r4, #0]
 80064b4:	1a6d      	subs	r5, r5, r1
 80064b6:	4629      	mov	r1, r5
 80064b8:	4638      	mov	r0, r7
 80064ba:	f7ff ffa7 	bl	800640c <sbrk_aligned>
 80064be:	3001      	adds	r0, #1
 80064c0:	d037      	beq.n	8006532 <_malloc_r+0xe6>
 80064c2:	6823      	ldr	r3, [r4, #0]
 80064c4:	442b      	add	r3, r5
 80064c6:	6023      	str	r3, [r4, #0]
 80064c8:	f8d8 3000 	ldr.w	r3, [r8]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d038      	beq.n	8006542 <_malloc_r+0xf6>
 80064d0:	685a      	ldr	r2, [r3, #4]
 80064d2:	42a2      	cmp	r2, r4
 80064d4:	d12b      	bne.n	800652e <_malloc_r+0xe2>
 80064d6:	2200      	movs	r2, #0
 80064d8:	605a      	str	r2, [r3, #4]
 80064da:	e00f      	b.n	80064fc <_malloc_r+0xb0>
 80064dc:	6822      	ldr	r2, [r4, #0]
 80064de:	1b52      	subs	r2, r2, r5
 80064e0:	d41f      	bmi.n	8006522 <_malloc_r+0xd6>
 80064e2:	2a0b      	cmp	r2, #11
 80064e4:	d917      	bls.n	8006516 <_malloc_r+0xca>
 80064e6:	1961      	adds	r1, r4, r5
 80064e8:	42a3      	cmp	r3, r4
 80064ea:	6025      	str	r5, [r4, #0]
 80064ec:	bf18      	it	ne
 80064ee:	6059      	strne	r1, [r3, #4]
 80064f0:	6863      	ldr	r3, [r4, #4]
 80064f2:	bf08      	it	eq
 80064f4:	f8c8 1000 	streq.w	r1, [r8]
 80064f8:	5162      	str	r2, [r4, r5]
 80064fa:	604b      	str	r3, [r1, #4]
 80064fc:	4638      	mov	r0, r7
 80064fe:	f104 060b 	add.w	r6, r4, #11
 8006502:	f000 f829 	bl	8006558 <__malloc_unlock>
 8006506:	f026 0607 	bic.w	r6, r6, #7
 800650a:	1d23      	adds	r3, r4, #4
 800650c:	1af2      	subs	r2, r6, r3
 800650e:	d0ae      	beq.n	800646e <_malloc_r+0x22>
 8006510:	1b9b      	subs	r3, r3, r6
 8006512:	50a3      	str	r3, [r4, r2]
 8006514:	e7ab      	b.n	800646e <_malloc_r+0x22>
 8006516:	42a3      	cmp	r3, r4
 8006518:	6862      	ldr	r2, [r4, #4]
 800651a:	d1dd      	bne.n	80064d8 <_malloc_r+0x8c>
 800651c:	f8c8 2000 	str.w	r2, [r8]
 8006520:	e7ec      	b.n	80064fc <_malloc_r+0xb0>
 8006522:	4623      	mov	r3, r4
 8006524:	6864      	ldr	r4, [r4, #4]
 8006526:	e7ac      	b.n	8006482 <_malloc_r+0x36>
 8006528:	4634      	mov	r4, r6
 800652a:	6876      	ldr	r6, [r6, #4]
 800652c:	e7b4      	b.n	8006498 <_malloc_r+0x4c>
 800652e:	4613      	mov	r3, r2
 8006530:	e7cc      	b.n	80064cc <_malloc_r+0x80>
 8006532:	230c      	movs	r3, #12
 8006534:	603b      	str	r3, [r7, #0]
 8006536:	4638      	mov	r0, r7
 8006538:	f000 f80e 	bl	8006558 <__malloc_unlock>
 800653c:	e797      	b.n	800646e <_malloc_r+0x22>
 800653e:	6025      	str	r5, [r4, #0]
 8006540:	e7dc      	b.n	80064fc <_malloc_r+0xb0>
 8006542:	605b      	str	r3, [r3, #4]
 8006544:	deff      	udf	#255	; 0xff
 8006546:	bf00      	nop
 8006548:	200124f4 	.word	0x200124f4

0800654c <__malloc_lock>:
 800654c:	4801      	ldr	r0, [pc, #4]	; (8006554 <__malloc_lock+0x8>)
 800654e:	f7ff b88a 	b.w	8005666 <__retarget_lock_acquire_recursive>
 8006552:	bf00      	nop
 8006554:	200124f0 	.word	0x200124f0

08006558 <__malloc_unlock>:
 8006558:	4801      	ldr	r0, [pc, #4]	; (8006560 <__malloc_unlock+0x8>)
 800655a:	f7ff b885 	b.w	8005668 <__retarget_lock_release_recursive>
 800655e:	bf00      	nop
 8006560:	200124f0 	.word	0x200124f0

08006564 <_Balloc>:
 8006564:	b570      	push	{r4, r5, r6, lr}
 8006566:	69c6      	ldr	r6, [r0, #28]
 8006568:	4604      	mov	r4, r0
 800656a:	460d      	mov	r5, r1
 800656c:	b976      	cbnz	r6, 800658c <_Balloc+0x28>
 800656e:	2010      	movs	r0, #16
 8006570:	f7ff ff44 	bl	80063fc <malloc>
 8006574:	4602      	mov	r2, r0
 8006576:	61e0      	str	r0, [r4, #28]
 8006578:	b920      	cbnz	r0, 8006584 <_Balloc+0x20>
 800657a:	4b18      	ldr	r3, [pc, #96]	; (80065dc <_Balloc+0x78>)
 800657c:	4818      	ldr	r0, [pc, #96]	; (80065e0 <_Balloc+0x7c>)
 800657e:	216b      	movs	r1, #107	; 0x6b
 8006580:	f000 fdaa 	bl	80070d8 <__assert_func>
 8006584:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006588:	6006      	str	r6, [r0, #0]
 800658a:	60c6      	str	r6, [r0, #12]
 800658c:	69e6      	ldr	r6, [r4, #28]
 800658e:	68f3      	ldr	r3, [r6, #12]
 8006590:	b183      	cbz	r3, 80065b4 <_Balloc+0x50>
 8006592:	69e3      	ldr	r3, [r4, #28]
 8006594:	68db      	ldr	r3, [r3, #12]
 8006596:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800659a:	b9b8      	cbnz	r0, 80065cc <_Balloc+0x68>
 800659c:	2101      	movs	r1, #1
 800659e:	fa01 f605 	lsl.w	r6, r1, r5
 80065a2:	1d72      	adds	r2, r6, #5
 80065a4:	0092      	lsls	r2, r2, #2
 80065a6:	4620      	mov	r0, r4
 80065a8:	f000 fdb4 	bl	8007114 <_calloc_r>
 80065ac:	b160      	cbz	r0, 80065c8 <_Balloc+0x64>
 80065ae:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80065b2:	e00e      	b.n	80065d2 <_Balloc+0x6e>
 80065b4:	2221      	movs	r2, #33	; 0x21
 80065b6:	2104      	movs	r1, #4
 80065b8:	4620      	mov	r0, r4
 80065ba:	f000 fdab 	bl	8007114 <_calloc_r>
 80065be:	69e3      	ldr	r3, [r4, #28]
 80065c0:	60f0      	str	r0, [r6, #12]
 80065c2:	68db      	ldr	r3, [r3, #12]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d1e4      	bne.n	8006592 <_Balloc+0x2e>
 80065c8:	2000      	movs	r0, #0
 80065ca:	bd70      	pop	{r4, r5, r6, pc}
 80065cc:	6802      	ldr	r2, [r0, #0]
 80065ce:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80065d2:	2300      	movs	r3, #0
 80065d4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80065d8:	e7f7      	b.n	80065ca <_Balloc+0x66>
 80065da:	bf00      	nop
 80065dc:	08009515 	.word	0x08009515
 80065e0:	08009595 	.word	0x08009595

080065e4 <_Bfree>:
 80065e4:	b570      	push	{r4, r5, r6, lr}
 80065e6:	69c6      	ldr	r6, [r0, #28]
 80065e8:	4605      	mov	r5, r0
 80065ea:	460c      	mov	r4, r1
 80065ec:	b976      	cbnz	r6, 800660c <_Bfree+0x28>
 80065ee:	2010      	movs	r0, #16
 80065f0:	f7ff ff04 	bl	80063fc <malloc>
 80065f4:	4602      	mov	r2, r0
 80065f6:	61e8      	str	r0, [r5, #28]
 80065f8:	b920      	cbnz	r0, 8006604 <_Bfree+0x20>
 80065fa:	4b09      	ldr	r3, [pc, #36]	; (8006620 <_Bfree+0x3c>)
 80065fc:	4809      	ldr	r0, [pc, #36]	; (8006624 <_Bfree+0x40>)
 80065fe:	218f      	movs	r1, #143	; 0x8f
 8006600:	f000 fd6a 	bl	80070d8 <__assert_func>
 8006604:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006608:	6006      	str	r6, [r0, #0]
 800660a:	60c6      	str	r6, [r0, #12]
 800660c:	b13c      	cbz	r4, 800661e <_Bfree+0x3a>
 800660e:	69eb      	ldr	r3, [r5, #28]
 8006610:	6862      	ldr	r2, [r4, #4]
 8006612:	68db      	ldr	r3, [r3, #12]
 8006614:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006618:	6021      	str	r1, [r4, #0]
 800661a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800661e:	bd70      	pop	{r4, r5, r6, pc}
 8006620:	08009515 	.word	0x08009515
 8006624:	08009595 	.word	0x08009595

08006628 <__multadd>:
 8006628:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800662c:	690d      	ldr	r5, [r1, #16]
 800662e:	4607      	mov	r7, r0
 8006630:	460c      	mov	r4, r1
 8006632:	461e      	mov	r6, r3
 8006634:	f101 0c14 	add.w	ip, r1, #20
 8006638:	2000      	movs	r0, #0
 800663a:	f8dc 3000 	ldr.w	r3, [ip]
 800663e:	b299      	uxth	r1, r3
 8006640:	fb02 6101 	mla	r1, r2, r1, r6
 8006644:	0c1e      	lsrs	r6, r3, #16
 8006646:	0c0b      	lsrs	r3, r1, #16
 8006648:	fb02 3306 	mla	r3, r2, r6, r3
 800664c:	b289      	uxth	r1, r1
 800664e:	3001      	adds	r0, #1
 8006650:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006654:	4285      	cmp	r5, r0
 8006656:	f84c 1b04 	str.w	r1, [ip], #4
 800665a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800665e:	dcec      	bgt.n	800663a <__multadd+0x12>
 8006660:	b30e      	cbz	r6, 80066a6 <__multadd+0x7e>
 8006662:	68a3      	ldr	r3, [r4, #8]
 8006664:	42ab      	cmp	r3, r5
 8006666:	dc19      	bgt.n	800669c <__multadd+0x74>
 8006668:	6861      	ldr	r1, [r4, #4]
 800666a:	4638      	mov	r0, r7
 800666c:	3101      	adds	r1, #1
 800666e:	f7ff ff79 	bl	8006564 <_Balloc>
 8006672:	4680      	mov	r8, r0
 8006674:	b928      	cbnz	r0, 8006682 <__multadd+0x5a>
 8006676:	4602      	mov	r2, r0
 8006678:	4b0c      	ldr	r3, [pc, #48]	; (80066ac <__multadd+0x84>)
 800667a:	480d      	ldr	r0, [pc, #52]	; (80066b0 <__multadd+0x88>)
 800667c:	21ba      	movs	r1, #186	; 0xba
 800667e:	f000 fd2b 	bl	80070d8 <__assert_func>
 8006682:	6922      	ldr	r2, [r4, #16]
 8006684:	3202      	adds	r2, #2
 8006686:	f104 010c 	add.w	r1, r4, #12
 800668a:	0092      	lsls	r2, r2, #2
 800668c:	300c      	adds	r0, #12
 800668e:	f000 fd15 	bl	80070bc <memcpy>
 8006692:	4621      	mov	r1, r4
 8006694:	4638      	mov	r0, r7
 8006696:	f7ff ffa5 	bl	80065e4 <_Bfree>
 800669a:	4644      	mov	r4, r8
 800669c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80066a0:	3501      	adds	r5, #1
 80066a2:	615e      	str	r6, [r3, #20]
 80066a4:	6125      	str	r5, [r4, #16]
 80066a6:	4620      	mov	r0, r4
 80066a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80066ac:	08009584 	.word	0x08009584
 80066b0:	08009595 	.word	0x08009595

080066b4 <__hi0bits>:
 80066b4:	0c03      	lsrs	r3, r0, #16
 80066b6:	041b      	lsls	r3, r3, #16
 80066b8:	b9d3      	cbnz	r3, 80066f0 <__hi0bits+0x3c>
 80066ba:	0400      	lsls	r0, r0, #16
 80066bc:	2310      	movs	r3, #16
 80066be:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80066c2:	bf04      	itt	eq
 80066c4:	0200      	lsleq	r0, r0, #8
 80066c6:	3308      	addeq	r3, #8
 80066c8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80066cc:	bf04      	itt	eq
 80066ce:	0100      	lsleq	r0, r0, #4
 80066d0:	3304      	addeq	r3, #4
 80066d2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80066d6:	bf04      	itt	eq
 80066d8:	0080      	lsleq	r0, r0, #2
 80066da:	3302      	addeq	r3, #2
 80066dc:	2800      	cmp	r0, #0
 80066de:	db05      	blt.n	80066ec <__hi0bits+0x38>
 80066e0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80066e4:	f103 0301 	add.w	r3, r3, #1
 80066e8:	bf08      	it	eq
 80066ea:	2320      	moveq	r3, #32
 80066ec:	4618      	mov	r0, r3
 80066ee:	4770      	bx	lr
 80066f0:	2300      	movs	r3, #0
 80066f2:	e7e4      	b.n	80066be <__hi0bits+0xa>

080066f4 <__lo0bits>:
 80066f4:	6803      	ldr	r3, [r0, #0]
 80066f6:	f013 0207 	ands.w	r2, r3, #7
 80066fa:	d00c      	beq.n	8006716 <__lo0bits+0x22>
 80066fc:	07d9      	lsls	r1, r3, #31
 80066fe:	d422      	bmi.n	8006746 <__lo0bits+0x52>
 8006700:	079a      	lsls	r2, r3, #30
 8006702:	bf49      	itett	mi
 8006704:	085b      	lsrmi	r3, r3, #1
 8006706:	089b      	lsrpl	r3, r3, #2
 8006708:	6003      	strmi	r3, [r0, #0]
 800670a:	2201      	movmi	r2, #1
 800670c:	bf5c      	itt	pl
 800670e:	6003      	strpl	r3, [r0, #0]
 8006710:	2202      	movpl	r2, #2
 8006712:	4610      	mov	r0, r2
 8006714:	4770      	bx	lr
 8006716:	b299      	uxth	r1, r3
 8006718:	b909      	cbnz	r1, 800671e <__lo0bits+0x2a>
 800671a:	0c1b      	lsrs	r3, r3, #16
 800671c:	2210      	movs	r2, #16
 800671e:	b2d9      	uxtb	r1, r3
 8006720:	b909      	cbnz	r1, 8006726 <__lo0bits+0x32>
 8006722:	3208      	adds	r2, #8
 8006724:	0a1b      	lsrs	r3, r3, #8
 8006726:	0719      	lsls	r1, r3, #28
 8006728:	bf04      	itt	eq
 800672a:	091b      	lsreq	r3, r3, #4
 800672c:	3204      	addeq	r2, #4
 800672e:	0799      	lsls	r1, r3, #30
 8006730:	bf04      	itt	eq
 8006732:	089b      	lsreq	r3, r3, #2
 8006734:	3202      	addeq	r2, #2
 8006736:	07d9      	lsls	r1, r3, #31
 8006738:	d403      	bmi.n	8006742 <__lo0bits+0x4e>
 800673a:	085b      	lsrs	r3, r3, #1
 800673c:	f102 0201 	add.w	r2, r2, #1
 8006740:	d003      	beq.n	800674a <__lo0bits+0x56>
 8006742:	6003      	str	r3, [r0, #0]
 8006744:	e7e5      	b.n	8006712 <__lo0bits+0x1e>
 8006746:	2200      	movs	r2, #0
 8006748:	e7e3      	b.n	8006712 <__lo0bits+0x1e>
 800674a:	2220      	movs	r2, #32
 800674c:	e7e1      	b.n	8006712 <__lo0bits+0x1e>
	...

08006750 <__i2b>:
 8006750:	b510      	push	{r4, lr}
 8006752:	460c      	mov	r4, r1
 8006754:	2101      	movs	r1, #1
 8006756:	f7ff ff05 	bl	8006564 <_Balloc>
 800675a:	4602      	mov	r2, r0
 800675c:	b928      	cbnz	r0, 800676a <__i2b+0x1a>
 800675e:	4b05      	ldr	r3, [pc, #20]	; (8006774 <__i2b+0x24>)
 8006760:	4805      	ldr	r0, [pc, #20]	; (8006778 <__i2b+0x28>)
 8006762:	f240 1145 	movw	r1, #325	; 0x145
 8006766:	f000 fcb7 	bl	80070d8 <__assert_func>
 800676a:	2301      	movs	r3, #1
 800676c:	6144      	str	r4, [r0, #20]
 800676e:	6103      	str	r3, [r0, #16]
 8006770:	bd10      	pop	{r4, pc}
 8006772:	bf00      	nop
 8006774:	08009584 	.word	0x08009584
 8006778:	08009595 	.word	0x08009595

0800677c <__multiply>:
 800677c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006780:	4691      	mov	r9, r2
 8006782:	690a      	ldr	r2, [r1, #16]
 8006784:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006788:	429a      	cmp	r2, r3
 800678a:	bfb8      	it	lt
 800678c:	460b      	movlt	r3, r1
 800678e:	460c      	mov	r4, r1
 8006790:	bfbc      	itt	lt
 8006792:	464c      	movlt	r4, r9
 8006794:	4699      	movlt	r9, r3
 8006796:	6927      	ldr	r7, [r4, #16]
 8006798:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800679c:	68a3      	ldr	r3, [r4, #8]
 800679e:	6861      	ldr	r1, [r4, #4]
 80067a0:	eb07 060a 	add.w	r6, r7, sl
 80067a4:	42b3      	cmp	r3, r6
 80067a6:	b085      	sub	sp, #20
 80067a8:	bfb8      	it	lt
 80067aa:	3101      	addlt	r1, #1
 80067ac:	f7ff feda 	bl	8006564 <_Balloc>
 80067b0:	b930      	cbnz	r0, 80067c0 <__multiply+0x44>
 80067b2:	4602      	mov	r2, r0
 80067b4:	4b44      	ldr	r3, [pc, #272]	; (80068c8 <__multiply+0x14c>)
 80067b6:	4845      	ldr	r0, [pc, #276]	; (80068cc <__multiply+0x150>)
 80067b8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80067bc:	f000 fc8c 	bl	80070d8 <__assert_func>
 80067c0:	f100 0514 	add.w	r5, r0, #20
 80067c4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80067c8:	462b      	mov	r3, r5
 80067ca:	2200      	movs	r2, #0
 80067cc:	4543      	cmp	r3, r8
 80067ce:	d321      	bcc.n	8006814 <__multiply+0x98>
 80067d0:	f104 0314 	add.w	r3, r4, #20
 80067d4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80067d8:	f109 0314 	add.w	r3, r9, #20
 80067dc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80067e0:	9202      	str	r2, [sp, #8]
 80067e2:	1b3a      	subs	r2, r7, r4
 80067e4:	3a15      	subs	r2, #21
 80067e6:	f022 0203 	bic.w	r2, r2, #3
 80067ea:	3204      	adds	r2, #4
 80067ec:	f104 0115 	add.w	r1, r4, #21
 80067f0:	428f      	cmp	r7, r1
 80067f2:	bf38      	it	cc
 80067f4:	2204      	movcc	r2, #4
 80067f6:	9201      	str	r2, [sp, #4]
 80067f8:	9a02      	ldr	r2, [sp, #8]
 80067fa:	9303      	str	r3, [sp, #12]
 80067fc:	429a      	cmp	r2, r3
 80067fe:	d80c      	bhi.n	800681a <__multiply+0x9e>
 8006800:	2e00      	cmp	r6, #0
 8006802:	dd03      	ble.n	800680c <__multiply+0x90>
 8006804:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006808:	2b00      	cmp	r3, #0
 800680a:	d05b      	beq.n	80068c4 <__multiply+0x148>
 800680c:	6106      	str	r6, [r0, #16]
 800680e:	b005      	add	sp, #20
 8006810:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006814:	f843 2b04 	str.w	r2, [r3], #4
 8006818:	e7d8      	b.n	80067cc <__multiply+0x50>
 800681a:	f8b3 a000 	ldrh.w	sl, [r3]
 800681e:	f1ba 0f00 	cmp.w	sl, #0
 8006822:	d024      	beq.n	800686e <__multiply+0xf2>
 8006824:	f104 0e14 	add.w	lr, r4, #20
 8006828:	46a9      	mov	r9, r5
 800682a:	f04f 0c00 	mov.w	ip, #0
 800682e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006832:	f8d9 1000 	ldr.w	r1, [r9]
 8006836:	fa1f fb82 	uxth.w	fp, r2
 800683a:	b289      	uxth	r1, r1
 800683c:	fb0a 110b 	mla	r1, sl, fp, r1
 8006840:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8006844:	f8d9 2000 	ldr.w	r2, [r9]
 8006848:	4461      	add	r1, ip
 800684a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800684e:	fb0a c20b 	mla	r2, sl, fp, ip
 8006852:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006856:	b289      	uxth	r1, r1
 8006858:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800685c:	4577      	cmp	r7, lr
 800685e:	f849 1b04 	str.w	r1, [r9], #4
 8006862:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006866:	d8e2      	bhi.n	800682e <__multiply+0xb2>
 8006868:	9a01      	ldr	r2, [sp, #4]
 800686a:	f845 c002 	str.w	ip, [r5, r2]
 800686e:	9a03      	ldr	r2, [sp, #12]
 8006870:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006874:	3304      	adds	r3, #4
 8006876:	f1b9 0f00 	cmp.w	r9, #0
 800687a:	d021      	beq.n	80068c0 <__multiply+0x144>
 800687c:	6829      	ldr	r1, [r5, #0]
 800687e:	f104 0c14 	add.w	ip, r4, #20
 8006882:	46ae      	mov	lr, r5
 8006884:	f04f 0a00 	mov.w	sl, #0
 8006888:	f8bc b000 	ldrh.w	fp, [ip]
 800688c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006890:	fb09 220b 	mla	r2, r9, fp, r2
 8006894:	4452      	add	r2, sl
 8006896:	b289      	uxth	r1, r1
 8006898:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800689c:	f84e 1b04 	str.w	r1, [lr], #4
 80068a0:	f85c 1b04 	ldr.w	r1, [ip], #4
 80068a4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80068a8:	f8be 1000 	ldrh.w	r1, [lr]
 80068ac:	fb09 110a 	mla	r1, r9, sl, r1
 80068b0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80068b4:	4567      	cmp	r7, ip
 80068b6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80068ba:	d8e5      	bhi.n	8006888 <__multiply+0x10c>
 80068bc:	9a01      	ldr	r2, [sp, #4]
 80068be:	50a9      	str	r1, [r5, r2]
 80068c0:	3504      	adds	r5, #4
 80068c2:	e799      	b.n	80067f8 <__multiply+0x7c>
 80068c4:	3e01      	subs	r6, #1
 80068c6:	e79b      	b.n	8006800 <__multiply+0x84>
 80068c8:	08009584 	.word	0x08009584
 80068cc:	08009595 	.word	0x08009595

080068d0 <__pow5mult>:
 80068d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80068d4:	4615      	mov	r5, r2
 80068d6:	f012 0203 	ands.w	r2, r2, #3
 80068da:	4606      	mov	r6, r0
 80068dc:	460f      	mov	r7, r1
 80068de:	d007      	beq.n	80068f0 <__pow5mult+0x20>
 80068e0:	4c25      	ldr	r4, [pc, #148]	; (8006978 <__pow5mult+0xa8>)
 80068e2:	3a01      	subs	r2, #1
 80068e4:	2300      	movs	r3, #0
 80068e6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80068ea:	f7ff fe9d 	bl	8006628 <__multadd>
 80068ee:	4607      	mov	r7, r0
 80068f0:	10ad      	asrs	r5, r5, #2
 80068f2:	d03d      	beq.n	8006970 <__pow5mult+0xa0>
 80068f4:	69f4      	ldr	r4, [r6, #28]
 80068f6:	b97c      	cbnz	r4, 8006918 <__pow5mult+0x48>
 80068f8:	2010      	movs	r0, #16
 80068fa:	f7ff fd7f 	bl	80063fc <malloc>
 80068fe:	4602      	mov	r2, r0
 8006900:	61f0      	str	r0, [r6, #28]
 8006902:	b928      	cbnz	r0, 8006910 <__pow5mult+0x40>
 8006904:	4b1d      	ldr	r3, [pc, #116]	; (800697c <__pow5mult+0xac>)
 8006906:	481e      	ldr	r0, [pc, #120]	; (8006980 <__pow5mult+0xb0>)
 8006908:	f240 11b3 	movw	r1, #435	; 0x1b3
 800690c:	f000 fbe4 	bl	80070d8 <__assert_func>
 8006910:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006914:	6004      	str	r4, [r0, #0]
 8006916:	60c4      	str	r4, [r0, #12]
 8006918:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800691c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006920:	b94c      	cbnz	r4, 8006936 <__pow5mult+0x66>
 8006922:	f240 2171 	movw	r1, #625	; 0x271
 8006926:	4630      	mov	r0, r6
 8006928:	f7ff ff12 	bl	8006750 <__i2b>
 800692c:	2300      	movs	r3, #0
 800692e:	f8c8 0008 	str.w	r0, [r8, #8]
 8006932:	4604      	mov	r4, r0
 8006934:	6003      	str	r3, [r0, #0]
 8006936:	f04f 0900 	mov.w	r9, #0
 800693a:	07eb      	lsls	r3, r5, #31
 800693c:	d50a      	bpl.n	8006954 <__pow5mult+0x84>
 800693e:	4639      	mov	r1, r7
 8006940:	4622      	mov	r2, r4
 8006942:	4630      	mov	r0, r6
 8006944:	f7ff ff1a 	bl	800677c <__multiply>
 8006948:	4639      	mov	r1, r7
 800694a:	4680      	mov	r8, r0
 800694c:	4630      	mov	r0, r6
 800694e:	f7ff fe49 	bl	80065e4 <_Bfree>
 8006952:	4647      	mov	r7, r8
 8006954:	106d      	asrs	r5, r5, #1
 8006956:	d00b      	beq.n	8006970 <__pow5mult+0xa0>
 8006958:	6820      	ldr	r0, [r4, #0]
 800695a:	b938      	cbnz	r0, 800696c <__pow5mult+0x9c>
 800695c:	4622      	mov	r2, r4
 800695e:	4621      	mov	r1, r4
 8006960:	4630      	mov	r0, r6
 8006962:	f7ff ff0b 	bl	800677c <__multiply>
 8006966:	6020      	str	r0, [r4, #0]
 8006968:	f8c0 9000 	str.w	r9, [r0]
 800696c:	4604      	mov	r4, r0
 800696e:	e7e4      	b.n	800693a <__pow5mult+0x6a>
 8006970:	4638      	mov	r0, r7
 8006972:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006976:	bf00      	nop
 8006978:	080096e0 	.word	0x080096e0
 800697c:	08009515 	.word	0x08009515
 8006980:	08009595 	.word	0x08009595

08006984 <__lshift>:
 8006984:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006988:	460c      	mov	r4, r1
 800698a:	6849      	ldr	r1, [r1, #4]
 800698c:	6923      	ldr	r3, [r4, #16]
 800698e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006992:	68a3      	ldr	r3, [r4, #8]
 8006994:	4607      	mov	r7, r0
 8006996:	4691      	mov	r9, r2
 8006998:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800699c:	f108 0601 	add.w	r6, r8, #1
 80069a0:	42b3      	cmp	r3, r6
 80069a2:	db0b      	blt.n	80069bc <__lshift+0x38>
 80069a4:	4638      	mov	r0, r7
 80069a6:	f7ff fddd 	bl	8006564 <_Balloc>
 80069aa:	4605      	mov	r5, r0
 80069ac:	b948      	cbnz	r0, 80069c2 <__lshift+0x3e>
 80069ae:	4602      	mov	r2, r0
 80069b0:	4b28      	ldr	r3, [pc, #160]	; (8006a54 <__lshift+0xd0>)
 80069b2:	4829      	ldr	r0, [pc, #164]	; (8006a58 <__lshift+0xd4>)
 80069b4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80069b8:	f000 fb8e 	bl	80070d8 <__assert_func>
 80069bc:	3101      	adds	r1, #1
 80069be:	005b      	lsls	r3, r3, #1
 80069c0:	e7ee      	b.n	80069a0 <__lshift+0x1c>
 80069c2:	2300      	movs	r3, #0
 80069c4:	f100 0114 	add.w	r1, r0, #20
 80069c8:	f100 0210 	add.w	r2, r0, #16
 80069cc:	4618      	mov	r0, r3
 80069ce:	4553      	cmp	r3, sl
 80069d0:	db33      	blt.n	8006a3a <__lshift+0xb6>
 80069d2:	6920      	ldr	r0, [r4, #16]
 80069d4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80069d8:	f104 0314 	add.w	r3, r4, #20
 80069dc:	f019 091f 	ands.w	r9, r9, #31
 80069e0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80069e4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80069e8:	d02b      	beq.n	8006a42 <__lshift+0xbe>
 80069ea:	f1c9 0e20 	rsb	lr, r9, #32
 80069ee:	468a      	mov	sl, r1
 80069f0:	2200      	movs	r2, #0
 80069f2:	6818      	ldr	r0, [r3, #0]
 80069f4:	fa00 f009 	lsl.w	r0, r0, r9
 80069f8:	4310      	orrs	r0, r2
 80069fa:	f84a 0b04 	str.w	r0, [sl], #4
 80069fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a02:	459c      	cmp	ip, r3
 8006a04:	fa22 f20e 	lsr.w	r2, r2, lr
 8006a08:	d8f3      	bhi.n	80069f2 <__lshift+0x6e>
 8006a0a:	ebac 0304 	sub.w	r3, ip, r4
 8006a0e:	3b15      	subs	r3, #21
 8006a10:	f023 0303 	bic.w	r3, r3, #3
 8006a14:	3304      	adds	r3, #4
 8006a16:	f104 0015 	add.w	r0, r4, #21
 8006a1a:	4584      	cmp	ip, r0
 8006a1c:	bf38      	it	cc
 8006a1e:	2304      	movcc	r3, #4
 8006a20:	50ca      	str	r2, [r1, r3]
 8006a22:	b10a      	cbz	r2, 8006a28 <__lshift+0xa4>
 8006a24:	f108 0602 	add.w	r6, r8, #2
 8006a28:	3e01      	subs	r6, #1
 8006a2a:	4638      	mov	r0, r7
 8006a2c:	612e      	str	r6, [r5, #16]
 8006a2e:	4621      	mov	r1, r4
 8006a30:	f7ff fdd8 	bl	80065e4 <_Bfree>
 8006a34:	4628      	mov	r0, r5
 8006a36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a3a:	f842 0f04 	str.w	r0, [r2, #4]!
 8006a3e:	3301      	adds	r3, #1
 8006a40:	e7c5      	b.n	80069ce <__lshift+0x4a>
 8006a42:	3904      	subs	r1, #4
 8006a44:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a48:	f841 2f04 	str.w	r2, [r1, #4]!
 8006a4c:	459c      	cmp	ip, r3
 8006a4e:	d8f9      	bhi.n	8006a44 <__lshift+0xc0>
 8006a50:	e7ea      	b.n	8006a28 <__lshift+0xa4>
 8006a52:	bf00      	nop
 8006a54:	08009584 	.word	0x08009584
 8006a58:	08009595 	.word	0x08009595

08006a5c <__mcmp>:
 8006a5c:	b530      	push	{r4, r5, lr}
 8006a5e:	6902      	ldr	r2, [r0, #16]
 8006a60:	690c      	ldr	r4, [r1, #16]
 8006a62:	1b12      	subs	r2, r2, r4
 8006a64:	d10e      	bne.n	8006a84 <__mcmp+0x28>
 8006a66:	f100 0314 	add.w	r3, r0, #20
 8006a6a:	3114      	adds	r1, #20
 8006a6c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006a70:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006a74:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006a78:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006a7c:	42a5      	cmp	r5, r4
 8006a7e:	d003      	beq.n	8006a88 <__mcmp+0x2c>
 8006a80:	d305      	bcc.n	8006a8e <__mcmp+0x32>
 8006a82:	2201      	movs	r2, #1
 8006a84:	4610      	mov	r0, r2
 8006a86:	bd30      	pop	{r4, r5, pc}
 8006a88:	4283      	cmp	r3, r0
 8006a8a:	d3f3      	bcc.n	8006a74 <__mcmp+0x18>
 8006a8c:	e7fa      	b.n	8006a84 <__mcmp+0x28>
 8006a8e:	f04f 32ff 	mov.w	r2, #4294967295
 8006a92:	e7f7      	b.n	8006a84 <__mcmp+0x28>

08006a94 <__mdiff>:
 8006a94:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a98:	460c      	mov	r4, r1
 8006a9a:	4606      	mov	r6, r0
 8006a9c:	4611      	mov	r1, r2
 8006a9e:	4620      	mov	r0, r4
 8006aa0:	4690      	mov	r8, r2
 8006aa2:	f7ff ffdb 	bl	8006a5c <__mcmp>
 8006aa6:	1e05      	subs	r5, r0, #0
 8006aa8:	d110      	bne.n	8006acc <__mdiff+0x38>
 8006aaa:	4629      	mov	r1, r5
 8006aac:	4630      	mov	r0, r6
 8006aae:	f7ff fd59 	bl	8006564 <_Balloc>
 8006ab2:	b930      	cbnz	r0, 8006ac2 <__mdiff+0x2e>
 8006ab4:	4b3a      	ldr	r3, [pc, #232]	; (8006ba0 <__mdiff+0x10c>)
 8006ab6:	4602      	mov	r2, r0
 8006ab8:	f240 2137 	movw	r1, #567	; 0x237
 8006abc:	4839      	ldr	r0, [pc, #228]	; (8006ba4 <__mdiff+0x110>)
 8006abe:	f000 fb0b 	bl	80070d8 <__assert_func>
 8006ac2:	2301      	movs	r3, #1
 8006ac4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006ac8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006acc:	bfa4      	itt	ge
 8006ace:	4643      	movge	r3, r8
 8006ad0:	46a0      	movge	r8, r4
 8006ad2:	4630      	mov	r0, r6
 8006ad4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006ad8:	bfa6      	itte	ge
 8006ada:	461c      	movge	r4, r3
 8006adc:	2500      	movge	r5, #0
 8006ade:	2501      	movlt	r5, #1
 8006ae0:	f7ff fd40 	bl	8006564 <_Balloc>
 8006ae4:	b920      	cbnz	r0, 8006af0 <__mdiff+0x5c>
 8006ae6:	4b2e      	ldr	r3, [pc, #184]	; (8006ba0 <__mdiff+0x10c>)
 8006ae8:	4602      	mov	r2, r0
 8006aea:	f240 2145 	movw	r1, #581	; 0x245
 8006aee:	e7e5      	b.n	8006abc <__mdiff+0x28>
 8006af0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006af4:	6926      	ldr	r6, [r4, #16]
 8006af6:	60c5      	str	r5, [r0, #12]
 8006af8:	f104 0914 	add.w	r9, r4, #20
 8006afc:	f108 0514 	add.w	r5, r8, #20
 8006b00:	f100 0e14 	add.w	lr, r0, #20
 8006b04:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8006b08:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006b0c:	f108 0210 	add.w	r2, r8, #16
 8006b10:	46f2      	mov	sl, lr
 8006b12:	2100      	movs	r1, #0
 8006b14:	f859 3b04 	ldr.w	r3, [r9], #4
 8006b18:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006b1c:	fa11 f88b 	uxtah	r8, r1, fp
 8006b20:	b299      	uxth	r1, r3
 8006b22:	0c1b      	lsrs	r3, r3, #16
 8006b24:	eba8 0801 	sub.w	r8, r8, r1
 8006b28:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006b2c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006b30:	fa1f f888 	uxth.w	r8, r8
 8006b34:	1419      	asrs	r1, r3, #16
 8006b36:	454e      	cmp	r6, r9
 8006b38:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006b3c:	f84a 3b04 	str.w	r3, [sl], #4
 8006b40:	d8e8      	bhi.n	8006b14 <__mdiff+0x80>
 8006b42:	1b33      	subs	r3, r6, r4
 8006b44:	3b15      	subs	r3, #21
 8006b46:	f023 0303 	bic.w	r3, r3, #3
 8006b4a:	3304      	adds	r3, #4
 8006b4c:	3415      	adds	r4, #21
 8006b4e:	42a6      	cmp	r6, r4
 8006b50:	bf38      	it	cc
 8006b52:	2304      	movcc	r3, #4
 8006b54:	441d      	add	r5, r3
 8006b56:	4473      	add	r3, lr
 8006b58:	469e      	mov	lr, r3
 8006b5a:	462e      	mov	r6, r5
 8006b5c:	4566      	cmp	r6, ip
 8006b5e:	d30e      	bcc.n	8006b7e <__mdiff+0xea>
 8006b60:	f10c 0203 	add.w	r2, ip, #3
 8006b64:	1b52      	subs	r2, r2, r5
 8006b66:	f022 0203 	bic.w	r2, r2, #3
 8006b6a:	3d03      	subs	r5, #3
 8006b6c:	45ac      	cmp	ip, r5
 8006b6e:	bf38      	it	cc
 8006b70:	2200      	movcc	r2, #0
 8006b72:	4413      	add	r3, r2
 8006b74:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8006b78:	b17a      	cbz	r2, 8006b9a <__mdiff+0x106>
 8006b7a:	6107      	str	r7, [r0, #16]
 8006b7c:	e7a4      	b.n	8006ac8 <__mdiff+0x34>
 8006b7e:	f856 8b04 	ldr.w	r8, [r6], #4
 8006b82:	fa11 f288 	uxtah	r2, r1, r8
 8006b86:	1414      	asrs	r4, r2, #16
 8006b88:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006b8c:	b292      	uxth	r2, r2
 8006b8e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8006b92:	f84e 2b04 	str.w	r2, [lr], #4
 8006b96:	1421      	asrs	r1, r4, #16
 8006b98:	e7e0      	b.n	8006b5c <__mdiff+0xc8>
 8006b9a:	3f01      	subs	r7, #1
 8006b9c:	e7ea      	b.n	8006b74 <__mdiff+0xe0>
 8006b9e:	bf00      	nop
 8006ba0:	08009584 	.word	0x08009584
 8006ba4:	08009595 	.word	0x08009595

08006ba8 <__d2b>:
 8006ba8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006bac:	460f      	mov	r7, r1
 8006bae:	2101      	movs	r1, #1
 8006bb0:	ec59 8b10 	vmov	r8, r9, d0
 8006bb4:	4616      	mov	r6, r2
 8006bb6:	f7ff fcd5 	bl	8006564 <_Balloc>
 8006bba:	4604      	mov	r4, r0
 8006bbc:	b930      	cbnz	r0, 8006bcc <__d2b+0x24>
 8006bbe:	4602      	mov	r2, r0
 8006bc0:	4b24      	ldr	r3, [pc, #144]	; (8006c54 <__d2b+0xac>)
 8006bc2:	4825      	ldr	r0, [pc, #148]	; (8006c58 <__d2b+0xb0>)
 8006bc4:	f240 310f 	movw	r1, #783	; 0x30f
 8006bc8:	f000 fa86 	bl	80070d8 <__assert_func>
 8006bcc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006bd0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006bd4:	bb2d      	cbnz	r5, 8006c22 <__d2b+0x7a>
 8006bd6:	9301      	str	r3, [sp, #4]
 8006bd8:	f1b8 0300 	subs.w	r3, r8, #0
 8006bdc:	d026      	beq.n	8006c2c <__d2b+0x84>
 8006bde:	4668      	mov	r0, sp
 8006be0:	9300      	str	r3, [sp, #0]
 8006be2:	f7ff fd87 	bl	80066f4 <__lo0bits>
 8006be6:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006bea:	b1e8      	cbz	r0, 8006c28 <__d2b+0x80>
 8006bec:	f1c0 0320 	rsb	r3, r0, #32
 8006bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8006bf4:	430b      	orrs	r3, r1
 8006bf6:	40c2      	lsrs	r2, r0
 8006bf8:	6163      	str	r3, [r4, #20]
 8006bfa:	9201      	str	r2, [sp, #4]
 8006bfc:	9b01      	ldr	r3, [sp, #4]
 8006bfe:	61a3      	str	r3, [r4, #24]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	bf14      	ite	ne
 8006c04:	2202      	movne	r2, #2
 8006c06:	2201      	moveq	r2, #1
 8006c08:	6122      	str	r2, [r4, #16]
 8006c0a:	b1bd      	cbz	r5, 8006c3c <__d2b+0x94>
 8006c0c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006c10:	4405      	add	r5, r0
 8006c12:	603d      	str	r5, [r7, #0]
 8006c14:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006c18:	6030      	str	r0, [r6, #0]
 8006c1a:	4620      	mov	r0, r4
 8006c1c:	b003      	add	sp, #12
 8006c1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006c22:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006c26:	e7d6      	b.n	8006bd6 <__d2b+0x2e>
 8006c28:	6161      	str	r1, [r4, #20]
 8006c2a:	e7e7      	b.n	8006bfc <__d2b+0x54>
 8006c2c:	a801      	add	r0, sp, #4
 8006c2e:	f7ff fd61 	bl	80066f4 <__lo0bits>
 8006c32:	9b01      	ldr	r3, [sp, #4]
 8006c34:	6163      	str	r3, [r4, #20]
 8006c36:	3020      	adds	r0, #32
 8006c38:	2201      	movs	r2, #1
 8006c3a:	e7e5      	b.n	8006c08 <__d2b+0x60>
 8006c3c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006c40:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006c44:	6038      	str	r0, [r7, #0]
 8006c46:	6918      	ldr	r0, [r3, #16]
 8006c48:	f7ff fd34 	bl	80066b4 <__hi0bits>
 8006c4c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006c50:	e7e2      	b.n	8006c18 <__d2b+0x70>
 8006c52:	bf00      	nop
 8006c54:	08009584 	.word	0x08009584
 8006c58:	08009595 	.word	0x08009595

08006c5c <__ssputs_r>:
 8006c5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c60:	688e      	ldr	r6, [r1, #8]
 8006c62:	461f      	mov	r7, r3
 8006c64:	42be      	cmp	r6, r7
 8006c66:	680b      	ldr	r3, [r1, #0]
 8006c68:	4682      	mov	sl, r0
 8006c6a:	460c      	mov	r4, r1
 8006c6c:	4690      	mov	r8, r2
 8006c6e:	d82c      	bhi.n	8006cca <__ssputs_r+0x6e>
 8006c70:	898a      	ldrh	r2, [r1, #12]
 8006c72:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006c76:	d026      	beq.n	8006cc6 <__ssputs_r+0x6a>
 8006c78:	6965      	ldr	r5, [r4, #20]
 8006c7a:	6909      	ldr	r1, [r1, #16]
 8006c7c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006c80:	eba3 0901 	sub.w	r9, r3, r1
 8006c84:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006c88:	1c7b      	adds	r3, r7, #1
 8006c8a:	444b      	add	r3, r9
 8006c8c:	106d      	asrs	r5, r5, #1
 8006c8e:	429d      	cmp	r5, r3
 8006c90:	bf38      	it	cc
 8006c92:	461d      	movcc	r5, r3
 8006c94:	0553      	lsls	r3, r2, #21
 8006c96:	d527      	bpl.n	8006ce8 <__ssputs_r+0x8c>
 8006c98:	4629      	mov	r1, r5
 8006c9a:	f7ff fbd7 	bl	800644c <_malloc_r>
 8006c9e:	4606      	mov	r6, r0
 8006ca0:	b360      	cbz	r0, 8006cfc <__ssputs_r+0xa0>
 8006ca2:	6921      	ldr	r1, [r4, #16]
 8006ca4:	464a      	mov	r2, r9
 8006ca6:	f000 fa09 	bl	80070bc <memcpy>
 8006caa:	89a3      	ldrh	r3, [r4, #12]
 8006cac:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006cb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006cb4:	81a3      	strh	r3, [r4, #12]
 8006cb6:	6126      	str	r6, [r4, #16]
 8006cb8:	6165      	str	r5, [r4, #20]
 8006cba:	444e      	add	r6, r9
 8006cbc:	eba5 0509 	sub.w	r5, r5, r9
 8006cc0:	6026      	str	r6, [r4, #0]
 8006cc2:	60a5      	str	r5, [r4, #8]
 8006cc4:	463e      	mov	r6, r7
 8006cc6:	42be      	cmp	r6, r7
 8006cc8:	d900      	bls.n	8006ccc <__ssputs_r+0x70>
 8006cca:	463e      	mov	r6, r7
 8006ccc:	6820      	ldr	r0, [r4, #0]
 8006cce:	4632      	mov	r2, r6
 8006cd0:	4641      	mov	r1, r8
 8006cd2:	f000 f9c9 	bl	8007068 <memmove>
 8006cd6:	68a3      	ldr	r3, [r4, #8]
 8006cd8:	1b9b      	subs	r3, r3, r6
 8006cda:	60a3      	str	r3, [r4, #8]
 8006cdc:	6823      	ldr	r3, [r4, #0]
 8006cde:	4433      	add	r3, r6
 8006ce0:	6023      	str	r3, [r4, #0]
 8006ce2:	2000      	movs	r0, #0
 8006ce4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ce8:	462a      	mov	r2, r5
 8006cea:	f000 fa3b 	bl	8007164 <_realloc_r>
 8006cee:	4606      	mov	r6, r0
 8006cf0:	2800      	cmp	r0, #0
 8006cf2:	d1e0      	bne.n	8006cb6 <__ssputs_r+0x5a>
 8006cf4:	6921      	ldr	r1, [r4, #16]
 8006cf6:	4650      	mov	r0, sl
 8006cf8:	f7ff fb34 	bl	8006364 <_free_r>
 8006cfc:	230c      	movs	r3, #12
 8006cfe:	f8ca 3000 	str.w	r3, [sl]
 8006d02:	89a3      	ldrh	r3, [r4, #12]
 8006d04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d08:	81a3      	strh	r3, [r4, #12]
 8006d0a:	f04f 30ff 	mov.w	r0, #4294967295
 8006d0e:	e7e9      	b.n	8006ce4 <__ssputs_r+0x88>

08006d10 <_svfiprintf_r>:
 8006d10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d14:	4698      	mov	r8, r3
 8006d16:	898b      	ldrh	r3, [r1, #12]
 8006d18:	061b      	lsls	r3, r3, #24
 8006d1a:	b09d      	sub	sp, #116	; 0x74
 8006d1c:	4607      	mov	r7, r0
 8006d1e:	460d      	mov	r5, r1
 8006d20:	4614      	mov	r4, r2
 8006d22:	d50e      	bpl.n	8006d42 <_svfiprintf_r+0x32>
 8006d24:	690b      	ldr	r3, [r1, #16]
 8006d26:	b963      	cbnz	r3, 8006d42 <_svfiprintf_r+0x32>
 8006d28:	2140      	movs	r1, #64	; 0x40
 8006d2a:	f7ff fb8f 	bl	800644c <_malloc_r>
 8006d2e:	6028      	str	r0, [r5, #0]
 8006d30:	6128      	str	r0, [r5, #16]
 8006d32:	b920      	cbnz	r0, 8006d3e <_svfiprintf_r+0x2e>
 8006d34:	230c      	movs	r3, #12
 8006d36:	603b      	str	r3, [r7, #0]
 8006d38:	f04f 30ff 	mov.w	r0, #4294967295
 8006d3c:	e0d0      	b.n	8006ee0 <_svfiprintf_r+0x1d0>
 8006d3e:	2340      	movs	r3, #64	; 0x40
 8006d40:	616b      	str	r3, [r5, #20]
 8006d42:	2300      	movs	r3, #0
 8006d44:	9309      	str	r3, [sp, #36]	; 0x24
 8006d46:	2320      	movs	r3, #32
 8006d48:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006d4c:	f8cd 800c 	str.w	r8, [sp, #12]
 8006d50:	2330      	movs	r3, #48	; 0x30
 8006d52:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006ef8 <_svfiprintf_r+0x1e8>
 8006d56:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006d5a:	f04f 0901 	mov.w	r9, #1
 8006d5e:	4623      	mov	r3, r4
 8006d60:	469a      	mov	sl, r3
 8006d62:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006d66:	b10a      	cbz	r2, 8006d6c <_svfiprintf_r+0x5c>
 8006d68:	2a25      	cmp	r2, #37	; 0x25
 8006d6a:	d1f9      	bne.n	8006d60 <_svfiprintf_r+0x50>
 8006d6c:	ebba 0b04 	subs.w	fp, sl, r4
 8006d70:	d00b      	beq.n	8006d8a <_svfiprintf_r+0x7a>
 8006d72:	465b      	mov	r3, fp
 8006d74:	4622      	mov	r2, r4
 8006d76:	4629      	mov	r1, r5
 8006d78:	4638      	mov	r0, r7
 8006d7a:	f7ff ff6f 	bl	8006c5c <__ssputs_r>
 8006d7e:	3001      	adds	r0, #1
 8006d80:	f000 80a9 	beq.w	8006ed6 <_svfiprintf_r+0x1c6>
 8006d84:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006d86:	445a      	add	r2, fp
 8006d88:	9209      	str	r2, [sp, #36]	; 0x24
 8006d8a:	f89a 3000 	ldrb.w	r3, [sl]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	f000 80a1 	beq.w	8006ed6 <_svfiprintf_r+0x1c6>
 8006d94:	2300      	movs	r3, #0
 8006d96:	f04f 32ff 	mov.w	r2, #4294967295
 8006d9a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006d9e:	f10a 0a01 	add.w	sl, sl, #1
 8006da2:	9304      	str	r3, [sp, #16]
 8006da4:	9307      	str	r3, [sp, #28]
 8006da6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006daa:	931a      	str	r3, [sp, #104]	; 0x68
 8006dac:	4654      	mov	r4, sl
 8006dae:	2205      	movs	r2, #5
 8006db0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006db4:	4850      	ldr	r0, [pc, #320]	; (8006ef8 <_svfiprintf_r+0x1e8>)
 8006db6:	f7f9 fa0b 	bl	80001d0 <memchr>
 8006dba:	9a04      	ldr	r2, [sp, #16]
 8006dbc:	b9d8      	cbnz	r0, 8006df6 <_svfiprintf_r+0xe6>
 8006dbe:	06d0      	lsls	r0, r2, #27
 8006dc0:	bf44      	itt	mi
 8006dc2:	2320      	movmi	r3, #32
 8006dc4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006dc8:	0711      	lsls	r1, r2, #28
 8006dca:	bf44      	itt	mi
 8006dcc:	232b      	movmi	r3, #43	; 0x2b
 8006dce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006dd2:	f89a 3000 	ldrb.w	r3, [sl]
 8006dd6:	2b2a      	cmp	r3, #42	; 0x2a
 8006dd8:	d015      	beq.n	8006e06 <_svfiprintf_r+0xf6>
 8006dda:	9a07      	ldr	r2, [sp, #28]
 8006ddc:	4654      	mov	r4, sl
 8006dde:	2000      	movs	r0, #0
 8006de0:	f04f 0c0a 	mov.w	ip, #10
 8006de4:	4621      	mov	r1, r4
 8006de6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006dea:	3b30      	subs	r3, #48	; 0x30
 8006dec:	2b09      	cmp	r3, #9
 8006dee:	d94d      	bls.n	8006e8c <_svfiprintf_r+0x17c>
 8006df0:	b1b0      	cbz	r0, 8006e20 <_svfiprintf_r+0x110>
 8006df2:	9207      	str	r2, [sp, #28]
 8006df4:	e014      	b.n	8006e20 <_svfiprintf_r+0x110>
 8006df6:	eba0 0308 	sub.w	r3, r0, r8
 8006dfa:	fa09 f303 	lsl.w	r3, r9, r3
 8006dfe:	4313      	orrs	r3, r2
 8006e00:	9304      	str	r3, [sp, #16]
 8006e02:	46a2      	mov	sl, r4
 8006e04:	e7d2      	b.n	8006dac <_svfiprintf_r+0x9c>
 8006e06:	9b03      	ldr	r3, [sp, #12]
 8006e08:	1d19      	adds	r1, r3, #4
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	9103      	str	r1, [sp, #12]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	bfbb      	ittet	lt
 8006e12:	425b      	neglt	r3, r3
 8006e14:	f042 0202 	orrlt.w	r2, r2, #2
 8006e18:	9307      	strge	r3, [sp, #28]
 8006e1a:	9307      	strlt	r3, [sp, #28]
 8006e1c:	bfb8      	it	lt
 8006e1e:	9204      	strlt	r2, [sp, #16]
 8006e20:	7823      	ldrb	r3, [r4, #0]
 8006e22:	2b2e      	cmp	r3, #46	; 0x2e
 8006e24:	d10c      	bne.n	8006e40 <_svfiprintf_r+0x130>
 8006e26:	7863      	ldrb	r3, [r4, #1]
 8006e28:	2b2a      	cmp	r3, #42	; 0x2a
 8006e2a:	d134      	bne.n	8006e96 <_svfiprintf_r+0x186>
 8006e2c:	9b03      	ldr	r3, [sp, #12]
 8006e2e:	1d1a      	adds	r2, r3, #4
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	9203      	str	r2, [sp, #12]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	bfb8      	it	lt
 8006e38:	f04f 33ff 	movlt.w	r3, #4294967295
 8006e3c:	3402      	adds	r4, #2
 8006e3e:	9305      	str	r3, [sp, #20]
 8006e40:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8006f08 <_svfiprintf_r+0x1f8>
 8006e44:	7821      	ldrb	r1, [r4, #0]
 8006e46:	2203      	movs	r2, #3
 8006e48:	4650      	mov	r0, sl
 8006e4a:	f7f9 f9c1 	bl	80001d0 <memchr>
 8006e4e:	b138      	cbz	r0, 8006e60 <_svfiprintf_r+0x150>
 8006e50:	9b04      	ldr	r3, [sp, #16]
 8006e52:	eba0 000a 	sub.w	r0, r0, sl
 8006e56:	2240      	movs	r2, #64	; 0x40
 8006e58:	4082      	lsls	r2, r0
 8006e5a:	4313      	orrs	r3, r2
 8006e5c:	3401      	adds	r4, #1
 8006e5e:	9304      	str	r3, [sp, #16]
 8006e60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e64:	4825      	ldr	r0, [pc, #148]	; (8006efc <_svfiprintf_r+0x1ec>)
 8006e66:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006e6a:	2206      	movs	r2, #6
 8006e6c:	f7f9 f9b0 	bl	80001d0 <memchr>
 8006e70:	2800      	cmp	r0, #0
 8006e72:	d038      	beq.n	8006ee6 <_svfiprintf_r+0x1d6>
 8006e74:	4b22      	ldr	r3, [pc, #136]	; (8006f00 <_svfiprintf_r+0x1f0>)
 8006e76:	bb1b      	cbnz	r3, 8006ec0 <_svfiprintf_r+0x1b0>
 8006e78:	9b03      	ldr	r3, [sp, #12]
 8006e7a:	3307      	adds	r3, #7
 8006e7c:	f023 0307 	bic.w	r3, r3, #7
 8006e80:	3308      	adds	r3, #8
 8006e82:	9303      	str	r3, [sp, #12]
 8006e84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e86:	4433      	add	r3, r6
 8006e88:	9309      	str	r3, [sp, #36]	; 0x24
 8006e8a:	e768      	b.n	8006d5e <_svfiprintf_r+0x4e>
 8006e8c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006e90:	460c      	mov	r4, r1
 8006e92:	2001      	movs	r0, #1
 8006e94:	e7a6      	b.n	8006de4 <_svfiprintf_r+0xd4>
 8006e96:	2300      	movs	r3, #0
 8006e98:	3401      	adds	r4, #1
 8006e9a:	9305      	str	r3, [sp, #20]
 8006e9c:	4619      	mov	r1, r3
 8006e9e:	f04f 0c0a 	mov.w	ip, #10
 8006ea2:	4620      	mov	r0, r4
 8006ea4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006ea8:	3a30      	subs	r2, #48	; 0x30
 8006eaa:	2a09      	cmp	r2, #9
 8006eac:	d903      	bls.n	8006eb6 <_svfiprintf_r+0x1a6>
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d0c6      	beq.n	8006e40 <_svfiprintf_r+0x130>
 8006eb2:	9105      	str	r1, [sp, #20]
 8006eb4:	e7c4      	b.n	8006e40 <_svfiprintf_r+0x130>
 8006eb6:	fb0c 2101 	mla	r1, ip, r1, r2
 8006eba:	4604      	mov	r4, r0
 8006ebc:	2301      	movs	r3, #1
 8006ebe:	e7f0      	b.n	8006ea2 <_svfiprintf_r+0x192>
 8006ec0:	ab03      	add	r3, sp, #12
 8006ec2:	9300      	str	r3, [sp, #0]
 8006ec4:	462a      	mov	r2, r5
 8006ec6:	4b0f      	ldr	r3, [pc, #60]	; (8006f04 <_svfiprintf_r+0x1f4>)
 8006ec8:	a904      	add	r1, sp, #16
 8006eca:	4638      	mov	r0, r7
 8006ecc:	f7fd fe62 	bl	8004b94 <_printf_float>
 8006ed0:	1c42      	adds	r2, r0, #1
 8006ed2:	4606      	mov	r6, r0
 8006ed4:	d1d6      	bne.n	8006e84 <_svfiprintf_r+0x174>
 8006ed6:	89ab      	ldrh	r3, [r5, #12]
 8006ed8:	065b      	lsls	r3, r3, #25
 8006eda:	f53f af2d 	bmi.w	8006d38 <_svfiprintf_r+0x28>
 8006ede:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006ee0:	b01d      	add	sp, #116	; 0x74
 8006ee2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ee6:	ab03      	add	r3, sp, #12
 8006ee8:	9300      	str	r3, [sp, #0]
 8006eea:	462a      	mov	r2, r5
 8006eec:	4b05      	ldr	r3, [pc, #20]	; (8006f04 <_svfiprintf_r+0x1f4>)
 8006eee:	a904      	add	r1, sp, #16
 8006ef0:	4638      	mov	r0, r7
 8006ef2:	f7fe f8f3 	bl	80050dc <_printf_i>
 8006ef6:	e7eb      	b.n	8006ed0 <_svfiprintf_r+0x1c0>
 8006ef8:	080096ec 	.word	0x080096ec
 8006efc:	080096f6 	.word	0x080096f6
 8006f00:	08004b95 	.word	0x08004b95
 8006f04:	08006c5d 	.word	0x08006c5d
 8006f08:	080096f2 	.word	0x080096f2

08006f0c <__sflush_r>:
 8006f0c:	898a      	ldrh	r2, [r1, #12]
 8006f0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f12:	4605      	mov	r5, r0
 8006f14:	0710      	lsls	r0, r2, #28
 8006f16:	460c      	mov	r4, r1
 8006f18:	d458      	bmi.n	8006fcc <__sflush_r+0xc0>
 8006f1a:	684b      	ldr	r3, [r1, #4]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	dc05      	bgt.n	8006f2c <__sflush_r+0x20>
 8006f20:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	dc02      	bgt.n	8006f2c <__sflush_r+0x20>
 8006f26:	2000      	movs	r0, #0
 8006f28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f2c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006f2e:	2e00      	cmp	r6, #0
 8006f30:	d0f9      	beq.n	8006f26 <__sflush_r+0x1a>
 8006f32:	2300      	movs	r3, #0
 8006f34:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006f38:	682f      	ldr	r7, [r5, #0]
 8006f3a:	6a21      	ldr	r1, [r4, #32]
 8006f3c:	602b      	str	r3, [r5, #0]
 8006f3e:	d032      	beq.n	8006fa6 <__sflush_r+0x9a>
 8006f40:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006f42:	89a3      	ldrh	r3, [r4, #12]
 8006f44:	075a      	lsls	r2, r3, #29
 8006f46:	d505      	bpl.n	8006f54 <__sflush_r+0x48>
 8006f48:	6863      	ldr	r3, [r4, #4]
 8006f4a:	1ac0      	subs	r0, r0, r3
 8006f4c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006f4e:	b10b      	cbz	r3, 8006f54 <__sflush_r+0x48>
 8006f50:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006f52:	1ac0      	subs	r0, r0, r3
 8006f54:	2300      	movs	r3, #0
 8006f56:	4602      	mov	r2, r0
 8006f58:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006f5a:	6a21      	ldr	r1, [r4, #32]
 8006f5c:	4628      	mov	r0, r5
 8006f5e:	47b0      	blx	r6
 8006f60:	1c43      	adds	r3, r0, #1
 8006f62:	89a3      	ldrh	r3, [r4, #12]
 8006f64:	d106      	bne.n	8006f74 <__sflush_r+0x68>
 8006f66:	6829      	ldr	r1, [r5, #0]
 8006f68:	291d      	cmp	r1, #29
 8006f6a:	d82b      	bhi.n	8006fc4 <__sflush_r+0xb8>
 8006f6c:	4a29      	ldr	r2, [pc, #164]	; (8007014 <__sflush_r+0x108>)
 8006f6e:	410a      	asrs	r2, r1
 8006f70:	07d6      	lsls	r6, r2, #31
 8006f72:	d427      	bmi.n	8006fc4 <__sflush_r+0xb8>
 8006f74:	2200      	movs	r2, #0
 8006f76:	6062      	str	r2, [r4, #4]
 8006f78:	04d9      	lsls	r1, r3, #19
 8006f7a:	6922      	ldr	r2, [r4, #16]
 8006f7c:	6022      	str	r2, [r4, #0]
 8006f7e:	d504      	bpl.n	8006f8a <__sflush_r+0x7e>
 8006f80:	1c42      	adds	r2, r0, #1
 8006f82:	d101      	bne.n	8006f88 <__sflush_r+0x7c>
 8006f84:	682b      	ldr	r3, [r5, #0]
 8006f86:	b903      	cbnz	r3, 8006f8a <__sflush_r+0x7e>
 8006f88:	6560      	str	r0, [r4, #84]	; 0x54
 8006f8a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006f8c:	602f      	str	r7, [r5, #0]
 8006f8e:	2900      	cmp	r1, #0
 8006f90:	d0c9      	beq.n	8006f26 <__sflush_r+0x1a>
 8006f92:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006f96:	4299      	cmp	r1, r3
 8006f98:	d002      	beq.n	8006fa0 <__sflush_r+0x94>
 8006f9a:	4628      	mov	r0, r5
 8006f9c:	f7ff f9e2 	bl	8006364 <_free_r>
 8006fa0:	2000      	movs	r0, #0
 8006fa2:	6360      	str	r0, [r4, #52]	; 0x34
 8006fa4:	e7c0      	b.n	8006f28 <__sflush_r+0x1c>
 8006fa6:	2301      	movs	r3, #1
 8006fa8:	4628      	mov	r0, r5
 8006faa:	47b0      	blx	r6
 8006fac:	1c41      	adds	r1, r0, #1
 8006fae:	d1c8      	bne.n	8006f42 <__sflush_r+0x36>
 8006fb0:	682b      	ldr	r3, [r5, #0]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d0c5      	beq.n	8006f42 <__sflush_r+0x36>
 8006fb6:	2b1d      	cmp	r3, #29
 8006fb8:	d001      	beq.n	8006fbe <__sflush_r+0xb2>
 8006fba:	2b16      	cmp	r3, #22
 8006fbc:	d101      	bne.n	8006fc2 <__sflush_r+0xb6>
 8006fbe:	602f      	str	r7, [r5, #0]
 8006fc0:	e7b1      	b.n	8006f26 <__sflush_r+0x1a>
 8006fc2:	89a3      	ldrh	r3, [r4, #12]
 8006fc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006fc8:	81a3      	strh	r3, [r4, #12]
 8006fca:	e7ad      	b.n	8006f28 <__sflush_r+0x1c>
 8006fcc:	690f      	ldr	r7, [r1, #16]
 8006fce:	2f00      	cmp	r7, #0
 8006fd0:	d0a9      	beq.n	8006f26 <__sflush_r+0x1a>
 8006fd2:	0793      	lsls	r3, r2, #30
 8006fd4:	680e      	ldr	r6, [r1, #0]
 8006fd6:	bf08      	it	eq
 8006fd8:	694b      	ldreq	r3, [r1, #20]
 8006fda:	600f      	str	r7, [r1, #0]
 8006fdc:	bf18      	it	ne
 8006fde:	2300      	movne	r3, #0
 8006fe0:	eba6 0807 	sub.w	r8, r6, r7
 8006fe4:	608b      	str	r3, [r1, #8]
 8006fe6:	f1b8 0f00 	cmp.w	r8, #0
 8006fea:	dd9c      	ble.n	8006f26 <__sflush_r+0x1a>
 8006fec:	6a21      	ldr	r1, [r4, #32]
 8006fee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006ff0:	4643      	mov	r3, r8
 8006ff2:	463a      	mov	r2, r7
 8006ff4:	4628      	mov	r0, r5
 8006ff6:	47b0      	blx	r6
 8006ff8:	2800      	cmp	r0, #0
 8006ffa:	dc06      	bgt.n	800700a <__sflush_r+0xfe>
 8006ffc:	89a3      	ldrh	r3, [r4, #12]
 8006ffe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007002:	81a3      	strh	r3, [r4, #12]
 8007004:	f04f 30ff 	mov.w	r0, #4294967295
 8007008:	e78e      	b.n	8006f28 <__sflush_r+0x1c>
 800700a:	4407      	add	r7, r0
 800700c:	eba8 0800 	sub.w	r8, r8, r0
 8007010:	e7e9      	b.n	8006fe6 <__sflush_r+0xda>
 8007012:	bf00      	nop
 8007014:	dfbffffe 	.word	0xdfbffffe

08007018 <_fflush_r>:
 8007018:	b538      	push	{r3, r4, r5, lr}
 800701a:	690b      	ldr	r3, [r1, #16]
 800701c:	4605      	mov	r5, r0
 800701e:	460c      	mov	r4, r1
 8007020:	b913      	cbnz	r3, 8007028 <_fflush_r+0x10>
 8007022:	2500      	movs	r5, #0
 8007024:	4628      	mov	r0, r5
 8007026:	bd38      	pop	{r3, r4, r5, pc}
 8007028:	b118      	cbz	r0, 8007032 <_fflush_r+0x1a>
 800702a:	6a03      	ldr	r3, [r0, #32]
 800702c:	b90b      	cbnz	r3, 8007032 <_fflush_r+0x1a>
 800702e:	f7fe fa03 	bl	8005438 <__sinit>
 8007032:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d0f3      	beq.n	8007022 <_fflush_r+0xa>
 800703a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800703c:	07d0      	lsls	r0, r2, #31
 800703e:	d404      	bmi.n	800704a <_fflush_r+0x32>
 8007040:	0599      	lsls	r1, r3, #22
 8007042:	d402      	bmi.n	800704a <_fflush_r+0x32>
 8007044:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007046:	f7fe fb0e 	bl	8005666 <__retarget_lock_acquire_recursive>
 800704a:	4628      	mov	r0, r5
 800704c:	4621      	mov	r1, r4
 800704e:	f7ff ff5d 	bl	8006f0c <__sflush_r>
 8007052:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007054:	07da      	lsls	r2, r3, #31
 8007056:	4605      	mov	r5, r0
 8007058:	d4e4      	bmi.n	8007024 <_fflush_r+0xc>
 800705a:	89a3      	ldrh	r3, [r4, #12]
 800705c:	059b      	lsls	r3, r3, #22
 800705e:	d4e1      	bmi.n	8007024 <_fflush_r+0xc>
 8007060:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007062:	f7fe fb01 	bl	8005668 <__retarget_lock_release_recursive>
 8007066:	e7dd      	b.n	8007024 <_fflush_r+0xc>

08007068 <memmove>:
 8007068:	4288      	cmp	r0, r1
 800706a:	b510      	push	{r4, lr}
 800706c:	eb01 0402 	add.w	r4, r1, r2
 8007070:	d902      	bls.n	8007078 <memmove+0x10>
 8007072:	4284      	cmp	r4, r0
 8007074:	4623      	mov	r3, r4
 8007076:	d807      	bhi.n	8007088 <memmove+0x20>
 8007078:	1e43      	subs	r3, r0, #1
 800707a:	42a1      	cmp	r1, r4
 800707c:	d008      	beq.n	8007090 <memmove+0x28>
 800707e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007082:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007086:	e7f8      	b.n	800707a <memmove+0x12>
 8007088:	4402      	add	r2, r0
 800708a:	4601      	mov	r1, r0
 800708c:	428a      	cmp	r2, r1
 800708e:	d100      	bne.n	8007092 <memmove+0x2a>
 8007090:	bd10      	pop	{r4, pc}
 8007092:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007096:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800709a:	e7f7      	b.n	800708c <memmove+0x24>

0800709c <_sbrk_r>:
 800709c:	b538      	push	{r3, r4, r5, lr}
 800709e:	4d06      	ldr	r5, [pc, #24]	; (80070b8 <_sbrk_r+0x1c>)
 80070a0:	2300      	movs	r3, #0
 80070a2:	4604      	mov	r4, r0
 80070a4:	4608      	mov	r0, r1
 80070a6:	602b      	str	r3, [r5, #0]
 80070a8:	f7fa ff82 	bl	8001fb0 <_sbrk>
 80070ac:	1c43      	adds	r3, r0, #1
 80070ae:	d102      	bne.n	80070b6 <_sbrk_r+0x1a>
 80070b0:	682b      	ldr	r3, [r5, #0]
 80070b2:	b103      	cbz	r3, 80070b6 <_sbrk_r+0x1a>
 80070b4:	6023      	str	r3, [r4, #0]
 80070b6:	bd38      	pop	{r3, r4, r5, pc}
 80070b8:	200124ec 	.word	0x200124ec

080070bc <memcpy>:
 80070bc:	440a      	add	r2, r1
 80070be:	4291      	cmp	r1, r2
 80070c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80070c4:	d100      	bne.n	80070c8 <memcpy+0xc>
 80070c6:	4770      	bx	lr
 80070c8:	b510      	push	{r4, lr}
 80070ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80070ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 80070d2:	4291      	cmp	r1, r2
 80070d4:	d1f9      	bne.n	80070ca <memcpy+0xe>
 80070d6:	bd10      	pop	{r4, pc}

080070d8 <__assert_func>:
 80070d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80070da:	4614      	mov	r4, r2
 80070dc:	461a      	mov	r2, r3
 80070de:	4b09      	ldr	r3, [pc, #36]	; (8007104 <__assert_func+0x2c>)
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	4605      	mov	r5, r0
 80070e4:	68d8      	ldr	r0, [r3, #12]
 80070e6:	b14c      	cbz	r4, 80070fc <__assert_func+0x24>
 80070e8:	4b07      	ldr	r3, [pc, #28]	; (8007108 <__assert_func+0x30>)
 80070ea:	9100      	str	r1, [sp, #0]
 80070ec:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80070f0:	4906      	ldr	r1, [pc, #24]	; (800710c <__assert_func+0x34>)
 80070f2:	462b      	mov	r3, r5
 80070f4:	f000 f872 	bl	80071dc <fiprintf>
 80070f8:	f000 f882 	bl	8007200 <abort>
 80070fc:	4b04      	ldr	r3, [pc, #16]	; (8007110 <__assert_func+0x38>)
 80070fe:	461c      	mov	r4, r3
 8007100:	e7f3      	b.n	80070ea <__assert_func+0x12>
 8007102:	bf00      	nop
 8007104:	20000064 	.word	0x20000064
 8007108:	08009707 	.word	0x08009707
 800710c:	08009714 	.word	0x08009714
 8007110:	08009742 	.word	0x08009742

08007114 <_calloc_r>:
 8007114:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007116:	fba1 2402 	umull	r2, r4, r1, r2
 800711a:	b94c      	cbnz	r4, 8007130 <_calloc_r+0x1c>
 800711c:	4611      	mov	r1, r2
 800711e:	9201      	str	r2, [sp, #4]
 8007120:	f7ff f994 	bl	800644c <_malloc_r>
 8007124:	9a01      	ldr	r2, [sp, #4]
 8007126:	4605      	mov	r5, r0
 8007128:	b930      	cbnz	r0, 8007138 <_calloc_r+0x24>
 800712a:	4628      	mov	r0, r5
 800712c:	b003      	add	sp, #12
 800712e:	bd30      	pop	{r4, r5, pc}
 8007130:	220c      	movs	r2, #12
 8007132:	6002      	str	r2, [r0, #0]
 8007134:	2500      	movs	r5, #0
 8007136:	e7f8      	b.n	800712a <_calloc_r+0x16>
 8007138:	4621      	mov	r1, r4
 800713a:	f7fe fa16 	bl	800556a <memset>
 800713e:	e7f4      	b.n	800712a <_calloc_r+0x16>

08007140 <__ascii_mbtowc>:
 8007140:	b082      	sub	sp, #8
 8007142:	b901      	cbnz	r1, 8007146 <__ascii_mbtowc+0x6>
 8007144:	a901      	add	r1, sp, #4
 8007146:	b142      	cbz	r2, 800715a <__ascii_mbtowc+0x1a>
 8007148:	b14b      	cbz	r3, 800715e <__ascii_mbtowc+0x1e>
 800714a:	7813      	ldrb	r3, [r2, #0]
 800714c:	600b      	str	r3, [r1, #0]
 800714e:	7812      	ldrb	r2, [r2, #0]
 8007150:	1e10      	subs	r0, r2, #0
 8007152:	bf18      	it	ne
 8007154:	2001      	movne	r0, #1
 8007156:	b002      	add	sp, #8
 8007158:	4770      	bx	lr
 800715a:	4610      	mov	r0, r2
 800715c:	e7fb      	b.n	8007156 <__ascii_mbtowc+0x16>
 800715e:	f06f 0001 	mvn.w	r0, #1
 8007162:	e7f8      	b.n	8007156 <__ascii_mbtowc+0x16>

08007164 <_realloc_r>:
 8007164:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007168:	4680      	mov	r8, r0
 800716a:	4614      	mov	r4, r2
 800716c:	460e      	mov	r6, r1
 800716e:	b921      	cbnz	r1, 800717a <_realloc_r+0x16>
 8007170:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007174:	4611      	mov	r1, r2
 8007176:	f7ff b969 	b.w	800644c <_malloc_r>
 800717a:	b92a      	cbnz	r2, 8007188 <_realloc_r+0x24>
 800717c:	f7ff f8f2 	bl	8006364 <_free_r>
 8007180:	4625      	mov	r5, r4
 8007182:	4628      	mov	r0, r5
 8007184:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007188:	f000 f841 	bl	800720e <_malloc_usable_size_r>
 800718c:	4284      	cmp	r4, r0
 800718e:	4607      	mov	r7, r0
 8007190:	d802      	bhi.n	8007198 <_realloc_r+0x34>
 8007192:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007196:	d812      	bhi.n	80071be <_realloc_r+0x5a>
 8007198:	4621      	mov	r1, r4
 800719a:	4640      	mov	r0, r8
 800719c:	f7ff f956 	bl	800644c <_malloc_r>
 80071a0:	4605      	mov	r5, r0
 80071a2:	2800      	cmp	r0, #0
 80071a4:	d0ed      	beq.n	8007182 <_realloc_r+0x1e>
 80071a6:	42bc      	cmp	r4, r7
 80071a8:	4622      	mov	r2, r4
 80071aa:	4631      	mov	r1, r6
 80071ac:	bf28      	it	cs
 80071ae:	463a      	movcs	r2, r7
 80071b0:	f7ff ff84 	bl	80070bc <memcpy>
 80071b4:	4631      	mov	r1, r6
 80071b6:	4640      	mov	r0, r8
 80071b8:	f7ff f8d4 	bl	8006364 <_free_r>
 80071bc:	e7e1      	b.n	8007182 <_realloc_r+0x1e>
 80071be:	4635      	mov	r5, r6
 80071c0:	e7df      	b.n	8007182 <_realloc_r+0x1e>

080071c2 <__ascii_wctomb>:
 80071c2:	b149      	cbz	r1, 80071d8 <__ascii_wctomb+0x16>
 80071c4:	2aff      	cmp	r2, #255	; 0xff
 80071c6:	bf85      	ittet	hi
 80071c8:	238a      	movhi	r3, #138	; 0x8a
 80071ca:	6003      	strhi	r3, [r0, #0]
 80071cc:	700a      	strbls	r2, [r1, #0]
 80071ce:	f04f 30ff 	movhi.w	r0, #4294967295
 80071d2:	bf98      	it	ls
 80071d4:	2001      	movls	r0, #1
 80071d6:	4770      	bx	lr
 80071d8:	4608      	mov	r0, r1
 80071da:	4770      	bx	lr

080071dc <fiprintf>:
 80071dc:	b40e      	push	{r1, r2, r3}
 80071de:	b503      	push	{r0, r1, lr}
 80071e0:	4601      	mov	r1, r0
 80071e2:	ab03      	add	r3, sp, #12
 80071e4:	4805      	ldr	r0, [pc, #20]	; (80071fc <fiprintf+0x20>)
 80071e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80071ea:	6800      	ldr	r0, [r0, #0]
 80071ec:	9301      	str	r3, [sp, #4]
 80071ee:	f000 f83f 	bl	8007270 <_vfiprintf_r>
 80071f2:	b002      	add	sp, #8
 80071f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80071f8:	b003      	add	sp, #12
 80071fa:	4770      	bx	lr
 80071fc:	20000064 	.word	0x20000064

08007200 <abort>:
 8007200:	b508      	push	{r3, lr}
 8007202:	2006      	movs	r0, #6
 8007204:	f000 fa0c 	bl	8007620 <raise>
 8007208:	2001      	movs	r0, #1
 800720a:	f7fa fea3 	bl	8001f54 <_exit>

0800720e <_malloc_usable_size_r>:
 800720e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007212:	1f18      	subs	r0, r3, #4
 8007214:	2b00      	cmp	r3, #0
 8007216:	bfbc      	itt	lt
 8007218:	580b      	ldrlt	r3, [r1, r0]
 800721a:	18c0      	addlt	r0, r0, r3
 800721c:	4770      	bx	lr

0800721e <__sfputc_r>:
 800721e:	6893      	ldr	r3, [r2, #8]
 8007220:	3b01      	subs	r3, #1
 8007222:	2b00      	cmp	r3, #0
 8007224:	b410      	push	{r4}
 8007226:	6093      	str	r3, [r2, #8]
 8007228:	da08      	bge.n	800723c <__sfputc_r+0x1e>
 800722a:	6994      	ldr	r4, [r2, #24]
 800722c:	42a3      	cmp	r3, r4
 800722e:	db01      	blt.n	8007234 <__sfputc_r+0x16>
 8007230:	290a      	cmp	r1, #10
 8007232:	d103      	bne.n	800723c <__sfputc_r+0x1e>
 8007234:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007238:	f000 b934 	b.w	80074a4 <__swbuf_r>
 800723c:	6813      	ldr	r3, [r2, #0]
 800723e:	1c58      	adds	r0, r3, #1
 8007240:	6010      	str	r0, [r2, #0]
 8007242:	7019      	strb	r1, [r3, #0]
 8007244:	4608      	mov	r0, r1
 8007246:	f85d 4b04 	ldr.w	r4, [sp], #4
 800724a:	4770      	bx	lr

0800724c <__sfputs_r>:
 800724c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800724e:	4606      	mov	r6, r0
 8007250:	460f      	mov	r7, r1
 8007252:	4614      	mov	r4, r2
 8007254:	18d5      	adds	r5, r2, r3
 8007256:	42ac      	cmp	r4, r5
 8007258:	d101      	bne.n	800725e <__sfputs_r+0x12>
 800725a:	2000      	movs	r0, #0
 800725c:	e007      	b.n	800726e <__sfputs_r+0x22>
 800725e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007262:	463a      	mov	r2, r7
 8007264:	4630      	mov	r0, r6
 8007266:	f7ff ffda 	bl	800721e <__sfputc_r>
 800726a:	1c43      	adds	r3, r0, #1
 800726c:	d1f3      	bne.n	8007256 <__sfputs_r+0xa>
 800726e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007270 <_vfiprintf_r>:
 8007270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007274:	460d      	mov	r5, r1
 8007276:	b09d      	sub	sp, #116	; 0x74
 8007278:	4614      	mov	r4, r2
 800727a:	4698      	mov	r8, r3
 800727c:	4606      	mov	r6, r0
 800727e:	b118      	cbz	r0, 8007288 <_vfiprintf_r+0x18>
 8007280:	6a03      	ldr	r3, [r0, #32]
 8007282:	b90b      	cbnz	r3, 8007288 <_vfiprintf_r+0x18>
 8007284:	f7fe f8d8 	bl	8005438 <__sinit>
 8007288:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800728a:	07d9      	lsls	r1, r3, #31
 800728c:	d405      	bmi.n	800729a <_vfiprintf_r+0x2a>
 800728e:	89ab      	ldrh	r3, [r5, #12]
 8007290:	059a      	lsls	r2, r3, #22
 8007292:	d402      	bmi.n	800729a <_vfiprintf_r+0x2a>
 8007294:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007296:	f7fe f9e6 	bl	8005666 <__retarget_lock_acquire_recursive>
 800729a:	89ab      	ldrh	r3, [r5, #12]
 800729c:	071b      	lsls	r3, r3, #28
 800729e:	d501      	bpl.n	80072a4 <_vfiprintf_r+0x34>
 80072a0:	692b      	ldr	r3, [r5, #16]
 80072a2:	b99b      	cbnz	r3, 80072cc <_vfiprintf_r+0x5c>
 80072a4:	4629      	mov	r1, r5
 80072a6:	4630      	mov	r0, r6
 80072a8:	f000 f93a 	bl	8007520 <__swsetup_r>
 80072ac:	b170      	cbz	r0, 80072cc <_vfiprintf_r+0x5c>
 80072ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80072b0:	07dc      	lsls	r4, r3, #31
 80072b2:	d504      	bpl.n	80072be <_vfiprintf_r+0x4e>
 80072b4:	f04f 30ff 	mov.w	r0, #4294967295
 80072b8:	b01d      	add	sp, #116	; 0x74
 80072ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072be:	89ab      	ldrh	r3, [r5, #12]
 80072c0:	0598      	lsls	r0, r3, #22
 80072c2:	d4f7      	bmi.n	80072b4 <_vfiprintf_r+0x44>
 80072c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80072c6:	f7fe f9cf 	bl	8005668 <__retarget_lock_release_recursive>
 80072ca:	e7f3      	b.n	80072b4 <_vfiprintf_r+0x44>
 80072cc:	2300      	movs	r3, #0
 80072ce:	9309      	str	r3, [sp, #36]	; 0x24
 80072d0:	2320      	movs	r3, #32
 80072d2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80072d6:	f8cd 800c 	str.w	r8, [sp, #12]
 80072da:	2330      	movs	r3, #48	; 0x30
 80072dc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8007490 <_vfiprintf_r+0x220>
 80072e0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80072e4:	f04f 0901 	mov.w	r9, #1
 80072e8:	4623      	mov	r3, r4
 80072ea:	469a      	mov	sl, r3
 80072ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 80072f0:	b10a      	cbz	r2, 80072f6 <_vfiprintf_r+0x86>
 80072f2:	2a25      	cmp	r2, #37	; 0x25
 80072f4:	d1f9      	bne.n	80072ea <_vfiprintf_r+0x7a>
 80072f6:	ebba 0b04 	subs.w	fp, sl, r4
 80072fa:	d00b      	beq.n	8007314 <_vfiprintf_r+0xa4>
 80072fc:	465b      	mov	r3, fp
 80072fe:	4622      	mov	r2, r4
 8007300:	4629      	mov	r1, r5
 8007302:	4630      	mov	r0, r6
 8007304:	f7ff ffa2 	bl	800724c <__sfputs_r>
 8007308:	3001      	adds	r0, #1
 800730a:	f000 80a9 	beq.w	8007460 <_vfiprintf_r+0x1f0>
 800730e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007310:	445a      	add	r2, fp
 8007312:	9209      	str	r2, [sp, #36]	; 0x24
 8007314:	f89a 3000 	ldrb.w	r3, [sl]
 8007318:	2b00      	cmp	r3, #0
 800731a:	f000 80a1 	beq.w	8007460 <_vfiprintf_r+0x1f0>
 800731e:	2300      	movs	r3, #0
 8007320:	f04f 32ff 	mov.w	r2, #4294967295
 8007324:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007328:	f10a 0a01 	add.w	sl, sl, #1
 800732c:	9304      	str	r3, [sp, #16]
 800732e:	9307      	str	r3, [sp, #28]
 8007330:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007334:	931a      	str	r3, [sp, #104]	; 0x68
 8007336:	4654      	mov	r4, sl
 8007338:	2205      	movs	r2, #5
 800733a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800733e:	4854      	ldr	r0, [pc, #336]	; (8007490 <_vfiprintf_r+0x220>)
 8007340:	f7f8 ff46 	bl	80001d0 <memchr>
 8007344:	9a04      	ldr	r2, [sp, #16]
 8007346:	b9d8      	cbnz	r0, 8007380 <_vfiprintf_r+0x110>
 8007348:	06d1      	lsls	r1, r2, #27
 800734a:	bf44      	itt	mi
 800734c:	2320      	movmi	r3, #32
 800734e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007352:	0713      	lsls	r3, r2, #28
 8007354:	bf44      	itt	mi
 8007356:	232b      	movmi	r3, #43	; 0x2b
 8007358:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800735c:	f89a 3000 	ldrb.w	r3, [sl]
 8007360:	2b2a      	cmp	r3, #42	; 0x2a
 8007362:	d015      	beq.n	8007390 <_vfiprintf_r+0x120>
 8007364:	9a07      	ldr	r2, [sp, #28]
 8007366:	4654      	mov	r4, sl
 8007368:	2000      	movs	r0, #0
 800736a:	f04f 0c0a 	mov.w	ip, #10
 800736e:	4621      	mov	r1, r4
 8007370:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007374:	3b30      	subs	r3, #48	; 0x30
 8007376:	2b09      	cmp	r3, #9
 8007378:	d94d      	bls.n	8007416 <_vfiprintf_r+0x1a6>
 800737a:	b1b0      	cbz	r0, 80073aa <_vfiprintf_r+0x13a>
 800737c:	9207      	str	r2, [sp, #28]
 800737e:	e014      	b.n	80073aa <_vfiprintf_r+0x13a>
 8007380:	eba0 0308 	sub.w	r3, r0, r8
 8007384:	fa09 f303 	lsl.w	r3, r9, r3
 8007388:	4313      	orrs	r3, r2
 800738a:	9304      	str	r3, [sp, #16]
 800738c:	46a2      	mov	sl, r4
 800738e:	e7d2      	b.n	8007336 <_vfiprintf_r+0xc6>
 8007390:	9b03      	ldr	r3, [sp, #12]
 8007392:	1d19      	adds	r1, r3, #4
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	9103      	str	r1, [sp, #12]
 8007398:	2b00      	cmp	r3, #0
 800739a:	bfbb      	ittet	lt
 800739c:	425b      	neglt	r3, r3
 800739e:	f042 0202 	orrlt.w	r2, r2, #2
 80073a2:	9307      	strge	r3, [sp, #28]
 80073a4:	9307      	strlt	r3, [sp, #28]
 80073a6:	bfb8      	it	lt
 80073a8:	9204      	strlt	r2, [sp, #16]
 80073aa:	7823      	ldrb	r3, [r4, #0]
 80073ac:	2b2e      	cmp	r3, #46	; 0x2e
 80073ae:	d10c      	bne.n	80073ca <_vfiprintf_r+0x15a>
 80073b0:	7863      	ldrb	r3, [r4, #1]
 80073b2:	2b2a      	cmp	r3, #42	; 0x2a
 80073b4:	d134      	bne.n	8007420 <_vfiprintf_r+0x1b0>
 80073b6:	9b03      	ldr	r3, [sp, #12]
 80073b8:	1d1a      	adds	r2, r3, #4
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	9203      	str	r2, [sp, #12]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	bfb8      	it	lt
 80073c2:	f04f 33ff 	movlt.w	r3, #4294967295
 80073c6:	3402      	adds	r4, #2
 80073c8:	9305      	str	r3, [sp, #20]
 80073ca:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80074a0 <_vfiprintf_r+0x230>
 80073ce:	7821      	ldrb	r1, [r4, #0]
 80073d0:	2203      	movs	r2, #3
 80073d2:	4650      	mov	r0, sl
 80073d4:	f7f8 fefc 	bl	80001d0 <memchr>
 80073d8:	b138      	cbz	r0, 80073ea <_vfiprintf_r+0x17a>
 80073da:	9b04      	ldr	r3, [sp, #16]
 80073dc:	eba0 000a 	sub.w	r0, r0, sl
 80073e0:	2240      	movs	r2, #64	; 0x40
 80073e2:	4082      	lsls	r2, r0
 80073e4:	4313      	orrs	r3, r2
 80073e6:	3401      	adds	r4, #1
 80073e8:	9304      	str	r3, [sp, #16]
 80073ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80073ee:	4829      	ldr	r0, [pc, #164]	; (8007494 <_vfiprintf_r+0x224>)
 80073f0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80073f4:	2206      	movs	r2, #6
 80073f6:	f7f8 feeb 	bl	80001d0 <memchr>
 80073fa:	2800      	cmp	r0, #0
 80073fc:	d03f      	beq.n	800747e <_vfiprintf_r+0x20e>
 80073fe:	4b26      	ldr	r3, [pc, #152]	; (8007498 <_vfiprintf_r+0x228>)
 8007400:	bb1b      	cbnz	r3, 800744a <_vfiprintf_r+0x1da>
 8007402:	9b03      	ldr	r3, [sp, #12]
 8007404:	3307      	adds	r3, #7
 8007406:	f023 0307 	bic.w	r3, r3, #7
 800740a:	3308      	adds	r3, #8
 800740c:	9303      	str	r3, [sp, #12]
 800740e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007410:	443b      	add	r3, r7
 8007412:	9309      	str	r3, [sp, #36]	; 0x24
 8007414:	e768      	b.n	80072e8 <_vfiprintf_r+0x78>
 8007416:	fb0c 3202 	mla	r2, ip, r2, r3
 800741a:	460c      	mov	r4, r1
 800741c:	2001      	movs	r0, #1
 800741e:	e7a6      	b.n	800736e <_vfiprintf_r+0xfe>
 8007420:	2300      	movs	r3, #0
 8007422:	3401      	adds	r4, #1
 8007424:	9305      	str	r3, [sp, #20]
 8007426:	4619      	mov	r1, r3
 8007428:	f04f 0c0a 	mov.w	ip, #10
 800742c:	4620      	mov	r0, r4
 800742e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007432:	3a30      	subs	r2, #48	; 0x30
 8007434:	2a09      	cmp	r2, #9
 8007436:	d903      	bls.n	8007440 <_vfiprintf_r+0x1d0>
 8007438:	2b00      	cmp	r3, #0
 800743a:	d0c6      	beq.n	80073ca <_vfiprintf_r+0x15a>
 800743c:	9105      	str	r1, [sp, #20]
 800743e:	e7c4      	b.n	80073ca <_vfiprintf_r+0x15a>
 8007440:	fb0c 2101 	mla	r1, ip, r1, r2
 8007444:	4604      	mov	r4, r0
 8007446:	2301      	movs	r3, #1
 8007448:	e7f0      	b.n	800742c <_vfiprintf_r+0x1bc>
 800744a:	ab03      	add	r3, sp, #12
 800744c:	9300      	str	r3, [sp, #0]
 800744e:	462a      	mov	r2, r5
 8007450:	4b12      	ldr	r3, [pc, #72]	; (800749c <_vfiprintf_r+0x22c>)
 8007452:	a904      	add	r1, sp, #16
 8007454:	4630      	mov	r0, r6
 8007456:	f7fd fb9d 	bl	8004b94 <_printf_float>
 800745a:	4607      	mov	r7, r0
 800745c:	1c78      	adds	r0, r7, #1
 800745e:	d1d6      	bne.n	800740e <_vfiprintf_r+0x19e>
 8007460:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007462:	07d9      	lsls	r1, r3, #31
 8007464:	d405      	bmi.n	8007472 <_vfiprintf_r+0x202>
 8007466:	89ab      	ldrh	r3, [r5, #12]
 8007468:	059a      	lsls	r2, r3, #22
 800746a:	d402      	bmi.n	8007472 <_vfiprintf_r+0x202>
 800746c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800746e:	f7fe f8fb 	bl	8005668 <__retarget_lock_release_recursive>
 8007472:	89ab      	ldrh	r3, [r5, #12]
 8007474:	065b      	lsls	r3, r3, #25
 8007476:	f53f af1d 	bmi.w	80072b4 <_vfiprintf_r+0x44>
 800747a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800747c:	e71c      	b.n	80072b8 <_vfiprintf_r+0x48>
 800747e:	ab03      	add	r3, sp, #12
 8007480:	9300      	str	r3, [sp, #0]
 8007482:	462a      	mov	r2, r5
 8007484:	4b05      	ldr	r3, [pc, #20]	; (800749c <_vfiprintf_r+0x22c>)
 8007486:	a904      	add	r1, sp, #16
 8007488:	4630      	mov	r0, r6
 800748a:	f7fd fe27 	bl	80050dc <_printf_i>
 800748e:	e7e4      	b.n	800745a <_vfiprintf_r+0x1ea>
 8007490:	080096ec 	.word	0x080096ec
 8007494:	080096f6 	.word	0x080096f6
 8007498:	08004b95 	.word	0x08004b95
 800749c:	0800724d 	.word	0x0800724d
 80074a0:	080096f2 	.word	0x080096f2

080074a4 <__swbuf_r>:
 80074a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074a6:	460e      	mov	r6, r1
 80074a8:	4614      	mov	r4, r2
 80074aa:	4605      	mov	r5, r0
 80074ac:	b118      	cbz	r0, 80074b6 <__swbuf_r+0x12>
 80074ae:	6a03      	ldr	r3, [r0, #32]
 80074b0:	b90b      	cbnz	r3, 80074b6 <__swbuf_r+0x12>
 80074b2:	f7fd ffc1 	bl	8005438 <__sinit>
 80074b6:	69a3      	ldr	r3, [r4, #24]
 80074b8:	60a3      	str	r3, [r4, #8]
 80074ba:	89a3      	ldrh	r3, [r4, #12]
 80074bc:	071a      	lsls	r2, r3, #28
 80074be:	d525      	bpl.n	800750c <__swbuf_r+0x68>
 80074c0:	6923      	ldr	r3, [r4, #16]
 80074c2:	b31b      	cbz	r3, 800750c <__swbuf_r+0x68>
 80074c4:	6823      	ldr	r3, [r4, #0]
 80074c6:	6922      	ldr	r2, [r4, #16]
 80074c8:	1a98      	subs	r0, r3, r2
 80074ca:	6963      	ldr	r3, [r4, #20]
 80074cc:	b2f6      	uxtb	r6, r6
 80074ce:	4283      	cmp	r3, r0
 80074d0:	4637      	mov	r7, r6
 80074d2:	dc04      	bgt.n	80074de <__swbuf_r+0x3a>
 80074d4:	4621      	mov	r1, r4
 80074d6:	4628      	mov	r0, r5
 80074d8:	f7ff fd9e 	bl	8007018 <_fflush_r>
 80074dc:	b9e0      	cbnz	r0, 8007518 <__swbuf_r+0x74>
 80074de:	68a3      	ldr	r3, [r4, #8]
 80074e0:	3b01      	subs	r3, #1
 80074e2:	60a3      	str	r3, [r4, #8]
 80074e4:	6823      	ldr	r3, [r4, #0]
 80074e6:	1c5a      	adds	r2, r3, #1
 80074e8:	6022      	str	r2, [r4, #0]
 80074ea:	701e      	strb	r6, [r3, #0]
 80074ec:	6962      	ldr	r2, [r4, #20]
 80074ee:	1c43      	adds	r3, r0, #1
 80074f0:	429a      	cmp	r2, r3
 80074f2:	d004      	beq.n	80074fe <__swbuf_r+0x5a>
 80074f4:	89a3      	ldrh	r3, [r4, #12]
 80074f6:	07db      	lsls	r3, r3, #31
 80074f8:	d506      	bpl.n	8007508 <__swbuf_r+0x64>
 80074fa:	2e0a      	cmp	r6, #10
 80074fc:	d104      	bne.n	8007508 <__swbuf_r+0x64>
 80074fe:	4621      	mov	r1, r4
 8007500:	4628      	mov	r0, r5
 8007502:	f7ff fd89 	bl	8007018 <_fflush_r>
 8007506:	b938      	cbnz	r0, 8007518 <__swbuf_r+0x74>
 8007508:	4638      	mov	r0, r7
 800750a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800750c:	4621      	mov	r1, r4
 800750e:	4628      	mov	r0, r5
 8007510:	f000 f806 	bl	8007520 <__swsetup_r>
 8007514:	2800      	cmp	r0, #0
 8007516:	d0d5      	beq.n	80074c4 <__swbuf_r+0x20>
 8007518:	f04f 37ff 	mov.w	r7, #4294967295
 800751c:	e7f4      	b.n	8007508 <__swbuf_r+0x64>
	...

08007520 <__swsetup_r>:
 8007520:	b538      	push	{r3, r4, r5, lr}
 8007522:	4b2a      	ldr	r3, [pc, #168]	; (80075cc <__swsetup_r+0xac>)
 8007524:	4605      	mov	r5, r0
 8007526:	6818      	ldr	r0, [r3, #0]
 8007528:	460c      	mov	r4, r1
 800752a:	b118      	cbz	r0, 8007534 <__swsetup_r+0x14>
 800752c:	6a03      	ldr	r3, [r0, #32]
 800752e:	b90b      	cbnz	r3, 8007534 <__swsetup_r+0x14>
 8007530:	f7fd ff82 	bl	8005438 <__sinit>
 8007534:	89a3      	ldrh	r3, [r4, #12]
 8007536:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800753a:	0718      	lsls	r0, r3, #28
 800753c:	d422      	bmi.n	8007584 <__swsetup_r+0x64>
 800753e:	06d9      	lsls	r1, r3, #27
 8007540:	d407      	bmi.n	8007552 <__swsetup_r+0x32>
 8007542:	2309      	movs	r3, #9
 8007544:	602b      	str	r3, [r5, #0]
 8007546:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800754a:	81a3      	strh	r3, [r4, #12]
 800754c:	f04f 30ff 	mov.w	r0, #4294967295
 8007550:	e034      	b.n	80075bc <__swsetup_r+0x9c>
 8007552:	0758      	lsls	r0, r3, #29
 8007554:	d512      	bpl.n	800757c <__swsetup_r+0x5c>
 8007556:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007558:	b141      	cbz	r1, 800756c <__swsetup_r+0x4c>
 800755a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800755e:	4299      	cmp	r1, r3
 8007560:	d002      	beq.n	8007568 <__swsetup_r+0x48>
 8007562:	4628      	mov	r0, r5
 8007564:	f7fe fefe 	bl	8006364 <_free_r>
 8007568:	2300      	movs	r3, #0
 800756a:	6363      	str	r3, [r4, #52]	; 0x34
 800756c:	89a3      	ldrh	r3, [r4, #12]
 800756e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007572:	81a3      	strh	r3, [r4, #12]
 8007574:	2300      	movs	r3, #0
 8007576:	6063      	str	r3, [r4, #4]
 8007578:	6923      	ldr	r3, [r4, #16]
 800757a:	6023      	str	r3, [r4, #0]
 800757c:	89a3      	ldrh	r3, [r4, #12]
 800757e:	f043 0308 	orr.w	r3, r3, #8
 8007582:	81a3      	strh	r3, [r4, #12]
 8007584:	6923      	ldr	r3, [r4, #16]
 8007586:	b94b      	cbnz	r3, 800759c <__swsetup_r+0x7c>
 8007588:	89a3      	ldrh	r3, [r4, #12]
 800758a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800758e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007592:	d003      	beq.n	800759c <__swsetup_r+0x7c>
 8007594:	4621      	mov	r1, r4
 8007596:	4628      	mov	r0, r5
 8007598:	f000 f884 	bl	80076a4 <__smakebuf_r>
 800759c:	89a0      	ldrh	r0, [r4, #12]
 800759e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80075a2:	f010 0301 	ands.w	r3, r0, #1
 80075a6:	d00a      	beq.n	80075be <__swsetup_r+0x9e>
 80075a8:	2300      	movs	r3, #0
 80075aa:	60a3      	str	r3, [r4, #8]
 80075ac:	6963      	ldr	r3, [r4, #20]
 80075ae:	425b      	negs	r3, r3
 80075b0:	61a3      	str	r3, [r4, #24]
 80075b2:	6923      	ldr	r3, [r4, #16]
 80075b4:	b943      	cbnz	r3, 80075c8 <__swsetup_r+0xa8>
 80075b6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80075ba:	d1c4      	bne.n	8007546 <__swsetup_r+0x26>
 80075bc:	bd38      	pop	{r3, r4, r5, pc}
 80075be:	0781      	lsls	r1, r0, #30
 80075c0:	bf58      	it	pl
 80075c2:	6963      	ldrpl	r3, [r4, #20]
 80075c4:	60a3      	str	r3, [r4, #8]
 80075c6:	e7f4      	b.n	80075b2 <__swsetup_r+0x92>
 80075c8:	2000      	movs	r0, #0
 80075ca:	e7f7      	b.n	80075bc <__swsetup_r+0x9c>
 80075cc:	20000064 	.word	0x20000064

080075d0 <_raise_r>:
 80075d0:	291f      	cmp	r1, #31
 80075d2:	b538      	push	{r3, r4, r5, lr}
 80075d4:	4604      	mov	r4, r0
 80075d6:	460d      	mov	r5, r1
 80075d8:	d904      	bls.n	80075e4 <_raise_r+0x14>
 80075da:	2316      	movs	r3, #22
 80075dc:	6003      	str	r3, [r0, #0]
 80075de:	f04f 30ff 	mov.w	r0, #4294967295
 80075e2:	bd38      	pop	{r3, r4, r5, pc}
 80075e4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80075e6:	b112      	cbz	r2, 80075ee <_raise_r+0x1e>
 80075e8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80075ec:	b94b      	cbnz	r3, 8007602 <_raise_r+0x32>
 80075ee:	4620      	mov	r0, r4
 80075f0:	f000 f830 	bl	8007654 <_getpid_r>
 80075f4:	462a      	mov	r2, r5
 80075f6:	4601      	mov	r1, r0
 80075f8:	4620      	mov	r0, r4
 80075fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80075fe:	f000 b817 	b.w	8007630 <_kill_r>
 8007602:	2b01      	cmp	r3, #1
 8007604:	d00a      	beq.n	800761c <_raise_r+0x4c>
 8007606:	1c59      	adds	r1, r3, #1
 8007608:	d103      	bne.n	8007612 <_raise_r+0x42>
 800760a:	2316      	movs	r3, #22
 800760c:	6003      	str	r3, [r0, #0]
 800760e:	2001      	movs	r0, #1
 8007610:	e7e7      	b.n	80075e2 <_raise_r+0x12>
 8007612:	2400      	movs	r4, #0
 8007614:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007618:	4628      	mov	r0, r5
 800761a:	4798      	blx	r3
 800761c:	2000      	movs	r0, #0
 800761e:	e7e0      	b.n	80075e2 <_raise_r+0x12>

08007620 <raise>:
 8007620:	4b02      	ldr	r3, [pc, #8]	; (800762c <raise+0xc>)
 8007622:	4601      	mov	r1, r0
 8007624:	6818      	ldr	r0, [r3, #0]
 8007626:	f7ff bfd3 	b.w	80075d0 <_raise_r>
 800762a:	bf00      	nop
 800762c:	20000064 	.word	0x20000064

08007630 <_kill_r>:
 8007630:	b538      	push	{r3, r4, r5, lr}
 8007632:	4d07      	ldr	r5, [pc, #28]	; (8007650 <_kill_r+0x20>)
 8007634:	2300      	movs	r3, #0
 8007636:	4604      	mov	r4, r0
 8007638:	4608      	mov	r0, r1
 800763a:	4611      	mov	r1, r2
 800763c:	602b      	str	r3, [r5, #0]
 800763e:	f7fa fc81 	bl	8001f44 <_kill>
 8007642:	1c43      	adds	r3, r0, #1
 8007644:	d102      	bne.n	800764c <_kill_r+0x1c>
 8007646:	682b      	ldr	r3, [r5, #0]
 8007648:	b103      	cbz	r3, 800764c <_kill_r+0x1c>
 800764a:	6023      	str	r3, [r4, #0]
 800764c:	bd38      	pop	{r3, r4, r5, pc}
 800764e:	bf00      	nop
 8007650:	200124ec 	.word	0x200124ec

08007654 <_getpid_r>:
 8007654:	f7fa bc74 	b.w	8001f40 <_getpid>

08007658 <__swhatbuf_r>:
 8007658:	b570      	push	{r4, r5, r6, lr}
 800765a:	460c      	mov	r4, r1
 800765c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007660:	2900      	cmp	r1, #0
 8007662:	b096      	sub	sp, #88	; 0x58
 8007664:	4615      	mov	r5, r2
 8007666:	461e      	mov	r6, r3
 8007668:	da0d      	bge.n	8007686 <__swhatbuf_r+0x2e>
 800766a:	89a3      	ldrh	r3, [r4, #12]
 800766c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007670:	f04f 0100 	mov.w	r1, #0
 8007674:	bf0c      	ite	eq
 8007676:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800767a:	2340      	movne	r3, #64	; 0x40
 800767c:	2000      	movs	r0, #0
 800767e:	6031      	str	r1, [r6, #0]
 8007680:	602b      	str	r3, [r5, #0]
 8007682:	b016      	add	sp, #88	; 0x58
 8007684:	bd70      	pop	{r4, r5, r6, pc}
 8007686:	466a      	mov	r2, sp
 8007688:	f000 f848 	bl	800771c <_fstat_r>
 800768c:	2800      	cmp	r0, #0
 800768e:	dbec      	blt.n	800766a <__swhatbuf_r+0x12>
 8007690:	9901      	ldr	r1, [sp, #4]
 8007692:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8007696:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800769a:	4259      	negs	r1, r3
 800769c:	4159      	adcs	r1, r3
 800769e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80076a2:	e7eb      	b.n	800767c <__swhatbuf_r+0x24>

080076a4 <__smakebuf_r>:
 80076a4:	898b      	ldrh	r3, [r1, #12]
 80076a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80076a8:	079d      	lsls	r5, r3, #30
 80076aa:	4606      	mov	r6, r0
 80076ac:	460c      	mov	r4, r1
 80076ae:	d507      	bpl.n	80076c0 <__smakebuf_r+0x1c>
 80076b0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80076b4:	6023      	str	r3, [r4, #0]
 80076b6:	6123      	str	r3, [r4, #16]
 80076b8:	2301      	movs	r3, #1
 80076ba:	6163      	str	r3, [r4, #20]
 80076bc:	b002      	add	sp, #8
 80076be:	bd70      	pop	{r4, r5, r6, pc}
 80076c0:	ab01      	add	r3, sp, #4
 80076c2:	466a      	mov	r2, sp
 80076c4:	f7ff ffc8 	bl	8007658 <__swhatbuf_r>
 80076c8:	9900      	ldr	r1, [sp, #0]
 80076ca:	4605      	mov	r5, r0
 80076cc:	4630      	mov	r0, r6
 80076ce:	f7fe febd 	bl	800644c <_malloc_r>
 80076d2:	b948      	cbnz	r0, 80076e8 <__smakebuf_r+0x44>
 80076d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80076d8:	059a      	lsls	r2, r3, #22
 80076da:	d4ef      	bmi.n	80076bc <__smakebuf_r+0x18>
 80076dc:	f023 0303 	bic.w	r3, r3, #3
 80076e0:	f043 0302 	orr.w	r3, r3, #2
 80076e4:	81a3      	strh	r3, [r4, #12]
 80076e6:	e7e3      	b.n	80076b0 <__smakebuf_r+0xc>
 80076e8:	89a3      	ldrh	r3, [r4, #12]
 80076ea:	6020      	str	r0, [r4, #0]
 80076ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076f0:	81a3      	strh	r3, [r4, #12]
 80076f2:	9b00      	ldr	r3, [sp, #0]
 80076f4:	6163      	str	r3, [r4, #20]
 80076f6:	9b01      	ldr	r3, [sp, #4]
 80076f8:	6120      	str	r0, [r4, #16]
 80076fa:	b15b      	cbz	r3, 8007714 <__smakebuf_r+0x70>
 80076fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007700:	4630      	mov	r0, r6
 8007702:	f000 f81d 	bl	8007740 <_isatty_r>
 8007706:	b128      	cbz	r0, 8007714 <__smakebuf_r+0x70>
 8007708:	89a3      	ldrh	r3, [r4, #12]
 800770a:	f023 0303 	bic.w	r3, r3, #3
 800770e:	f043 0301 	orr.w	r3, r3, #1
 8007712:	81a3      	strh	r3, [r4, #12]
 8007714:	89a3      	ldrh	r3, [r4, #12]
 8007716:	431d      	orrs	r5, r3
 8007718:	81a5      	strh	r5, [r4, #12]
 800771a:	e7cf      	b.n	80076bc <__smakebuf_r+0x18>

0800771c <_fstat_r>:
 800771c:	b538      	push	{r3, r4, r5, lr}
 800771e:	4d07      	ldr	r5, [pc, #28]	; (800773c <_fstat_r+0x20>)
 8007720:	2300      	movs	r3, #0
 8007722:	4604      	mov	r4, r0
 8007724:	4608      	mov	r0, r1
 8007726:	4611      	mov	r1, r2
 8007728:	602b      	str	r3, [r5, #0]
 800772a:	f7fa fc38 	bl	8001f9e <_fstat>
 800772e:	1c43      	adds	r3, r0, #1
 8007730:	d102      	bne.n	8007738 <_fstat_r+0x1c>
 8007732:	682b      	ldr	r3, [r5, #0]
 8007734:	b103      	cbz	r3, 8007738 <_fstat_r+0x1c>
 8007736:	6023      	str	r3, [r4, #0]
 8007738:	bd38      	pop	{r3, r4, r5, pc}
 800773a:	bf00      	nop
 800773c:	200124ec 	.word	0x200124ec

08007740 <_isatty_r>:
 8007740:	b538      	push	{r3, r4, r5, lr}
 8007742:	4d06      	ldr	r5, [pc, #24]	; (800775c <_isatty_r+0x1c>)
 8007744:	2300      	movs	r3, #0
 8007746:	4604      	mov	r4, r0
 8007748:	4608      	mov	r0, r1
 800774a:	602b      	str	r3, [r5, #0]
 800774c:	f7fa fc2c 	bl	8001fa8 <_isatty>
 8007750:	1c43      	adds	r3, r0, #1
 8007752:	d102      	bne.n	800775a <_isatty_r+0x1a>
 8007754:	682b      	ldr	r3, [r5, #0]
 8007756:	b103      	cbz	r3, 800775a <_isatty_r+0x1a>
 8007758:	6023      	str	r3, [r4, #0]
 800775a:	bd38      	pop	{r3, r4, r5, pc}
 800775c:	200124ec 	.word	0x200124ec

08007760 <log>:
 8007760:	b538      	push	{r3, r4, r5, lr}
 8007762:	ed2d 8b02 	vpush	{d8}
 8007766:	ec55 4b10 	vmov	r4, r5, d0
 800776a:	f000 fb7d 	bl	8007e68 <__ieee754_log>
 800776e:	4622      	mov	r2, r4
 8007770:	462b      	mov	r3, r5
 8007772:	4620      	mov	r0, r4
 8007774:	4629      	mov	r1, r5
 8007776:	eeb0 8a40 	vmov.f32	s16, s0
 800777a:	eef0 8a60 	vmov.f32	s17, s1
 800777e:	f7f9 f9d5 	bl	8000b2c <__aeabi_dcmpun>
 8007782:	b998      	cbnz	r0, 80077ac <log+0x4c>
 8007784:	2200      	movs	r2, #0
 8007786:	2300      	movs	r3, #0
 8007788:	4620      	mov	r0, r4
 800778a:	4629      	mov	r1, r5
 800778c:	f7f9 f9c4 	bl	8000b18 <__aeabi_dcmpgt>
 8007790:	b960      	cbnz	r0, 80077ac <log+0x4c>
 8007792:	2200      	movs	r2, #0
 8007794:	2300      	movs	r3, #0
 8007796:	4620      	mov	r0, r4
 8007798:	4629      	mov	r1, r5
 800779a:	f7f9 f995 	bl	8000ac8 <__aeabi_dcmpeq>
 800779e:	b160      	cbz	r0, 80077ba <log+0x5a>
 80077a0:	f7fd ff36 	bl	8005610 <__errno>
 80077a4:	ed9f 8b0a 	vldr	d8, [pc, #40]	; 80077d0 <log+0x70>
 80077a8:	2322      	movs	r3, #34	; 0x22
 80077aa:	6003      	str	r3, [r0, #0]
 80077ac:	eeb0 0a48 	vmov.f32	s0, s16
 80077b0:	eef0 0a68 	vmov.f32	s1, s17
 80077b4:	ecbd 8b02 	vpop	{d8}
 80077b8:	bd38      	pop	{r3, r4, r5, pc}
 80077ba:	f7fd ff29 	bl	8005610 <__errno>
 80077be:	ecbd 8b02 	vpop	{d8}
 80077c2:	2321      	movs	r3, #33	; 0x21
 80077c4:	6003      	str	r3, [r0, #0]
 80077c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80077ca:	4803      	ldr	r0, [pc, #12]	; (80077d8 <log+0x78>)
 80077cc:	f000 b8e0 	b.w	8007990 <nan>
 80077d0:	00000000 	.word	0x00000000
 80077d4:	fff00000 	.word	0xfff00000
 80077d8:	08009742 	.word	0x08009742

080077dc <sqrt>:
 80077dc:	b538      	push	{r3, r4, r5, lr}
 80077de:	ed2d 8b02 	vpush	{d8}
 80077e2:	ec55 4b10 	vmov	r4, r5, d0
 80077e6:	f000 f8db 	bl	80079a0 <__ieee754_sqrt>
 80077ea:	4622      	mov	r2, r4
 80077ec:	462b      	mov	r3, r5
 80077ee:	4620      	mov	r0, r4
 80077f0:	4629      	mov	r1, r5
 80077f2:	eeb0 8a40 	vmov.f32	s16, s0
 80077f6:	eef0 8a60 	vmov.f32	s17, s1
 80077fa:	f7f9 f997 	bl	8000b2c <__aeabi_dcmpun>
 80077fe:	b990      	cbnz	r0, 8007826 <sqrt+0x4a>
 8007800:	2200      	movs	r2, #0
 8007802:	2300      	movs	r3, #0
 8007804:	4620      	mov	r0, r4
 8007806:	4629      	mov	r1, r5
 8007808:	f7f9 f968 	bl	8000adc <__aeabi_dcmplt>
 800780c:	b158      	cbz	r0, 8007826 <sqrt+0x4a>
 800780e:	f7fd feff 	bl	8005610 <__errno>
 8007812:	2321      	movs	r3, #33	; 0x21
 8007814:	6003      	str	r3, [r0, #0]
 8007816:	2200      	movs	r2, #0
 8007818:	2300      	movs	r3, #0
 800781a:	4610      	mov	r0, r2
 800781c:	4619      	mov	r1, r3
 800781e:	f7f9 f815 	bl	800084c <__aeabi_ddiv>
 8007822:	ec41 0b18 	vmov	d8, r0, r1
 8007826:	eeb0 0a48 	vmov.f32	s0, s16
 800782a:	eef0 0a68 	vmov.f32	s1, s17
 800782e:	ecbd 8b02 	vpop	{d8}
 8007832:	bd38      	pop	{r3, r4, r5, pc}
 8007834:	0000      	movs	r0, r0
	...

08007838 <cos>:
 8007838:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800783a:	ec53 2b10 	vmov	r2, r3, d0
 800783e:	4826      	ldr	r0, [pc, #152]	; (80078d8 <cos+0xa0>)
 8007840:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007844:	4281      	cmp	r1, r0
 8007846:	dc06      	bgt.n	8007856 <cos+0x1e>
 8007848:	ed9f 1b21 	vldr	d1, [pc, #132]	; 80078d0 <cos+0x98>
 800784c:	b005      	add	sp, #20
 800784e:	f85d eb04 	ldr.w	lr, [sp], #4
 8007852:	f000 b981 	b.w	8007b58 <__kernel_cos>
 8007856:	4821      	ldr	r0, [pc, #132]	; (80078dc <cos+0xa4>)
 8007858:	4281      	cmp	r1, r0
 800785a:	dd09      	ble.n	8007870 <cos+0x38>
 800785c:	ee10 0a10 	vmov	r0, s0
 8007860:	4619      	mov	r1, r3
 8007862:	f7f8 fd11 	bl	8000288 <__aeabi_dsub>
 8007866:	ec41 0b10 	vmov	d0, r0, r1
 800786a:	b005      	add	sp, #20
 800786c:	f85d fb04 	ldr.w	pc, [sp], #4
 8007870:	4668      	mov	r0, sp
 8007872:	f000 fcb5 	bl	80081e0 <__ieee754_rem_pio2>
 8007876:	f000 0003 	and.w	r0, r0, #3
 800787a:	2801      	cmp	r0, #1
 800787c:	d00b      	beq.n	8007896 <cos+0x5e>
 800787e:	2802      	cmp	r0, #2
 8007880:	d016      	beq.n	80078b0 <cos+0x78>
 8007882:	b9e0      	cbnz	r0, 80078be <cos+0x86>
 8007884:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007888:	ed9d 0b00 	vldr	d0, [sp]
 800788c:	f000 f964 	bl	8007b58 <__kernel_cos>
 8007890:	ec51 0b10 	vmov	r0, r1, d0
 8007894:	e7e7      	b.n	8007866 <cos+0x2e>
 8007896:	ed9d 1b02 	vldr	d1, [sp, #8]
 800789a:	ed9d 0b00 	vldr	d0, [sp]
 800789e:	f000 fa23 	bl	8007ce8 <__kernel_sin>
 80078a2:	ec53 2b10 	vmov	r2, r3, d0
 80078a6:	ee10 0a10 	vmov	r0, s0
 80078aa:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80078ae:	e7da      	b.n	8007866 <cos+0x2e>
 80078b0:	ed9d 1b02 	vldr	d1, [sp, #8]
 80078b4:	ed9d 0b00 	vldr	d0, [sp]
 80078b8:	f000 f94e 	bl	8007b58 <__kernel_cos>
 80078bc:	e7f1      	b.n	80078a2 <cos+0x6a>
 80078be:	ed9d 1b02 	vldr	d1, [sp, #8]
 80078c2:	ed9d 0b00 	vldr	d0, [sp]
 80078c6:	2001      	movs	r0, #1
 80078c8:	f000 fa0e 	bl	8007ce8 <__kernel_sin>
 80078cc:	e7e0      	b.n	8007890 <cos+0x58>
 80078ce:	bf00      	nop
	...
 80078d8:	3fe921fb 	.word	0x3fe921fb
 80078dc:	7fefffff 	.word	0x7fefffff

080078e0 <sin>:
 80078e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80078e2:	ec53 2b10 	vmov	r2, r3, d0
 80078e6:	4828      	ldr	r0, [pc, #160]	; (8007988 <sin+0xa8>)
 80078e8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80078ec:	4281      	cmp	r1, r0
 80078ee:	dc07      	bgt.n	8007900 <sin+0x20>
 80078f0:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8007980 <sin+0xa0>
 80078f4:	2000      	movs	r0, #0
 80078f6:	b005      	add	sp, #20
 80078f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80078fc:	f000 b9f4 	b.w	8007ce8 <__kernel_sin>
 8007900:	4822      	ldr	r0, [pc, #136]	; (800798c <sin+0xac>)
 8007902:	4281      	cmp	r1, r0
 8007904:	dd09      	ble.n	800791a <sin+0x3a>
 8007906:	ee10 0a10 	vmov	r0, s0
 800790a:	4619      	mov	r1, r3
 800790c:	f7f8 fcbc 	bl	8000288 <__aeabi_dsub>
 8007910:	ec41 0b10 	vmov	d0, r0, r1
 8007914:	b005      	add	sp, #20
 8007916:	f85d fb04 	ldr.w	pc, [sp], #4
 800791a:	4668      	mov	r0, sp
 800791c:	f000 fc60 	bl	80081e0 <__ieee754_rem_pio2>
 8007920:	f000 0003 	and.w	r0, r0, #3
 8007924:	2801      	cmp	r0, #1
 8007926:	d00c      	beq.n	8007942 <sin+0x62>
 8007928:	2802      	cmp	r0, #2
 800792a:	d011      	beq.n	8007950 <sin+0x70>
 800792c:	b9f0      	cbnz	r0, 800796c <sin+0x8c>
 800792e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007932:	ed9d 0b00 	vldr	d0, [sp]
 8007936:	2001      	movs	r0, #1
 8007938:	f000 f9d6 	bl	8007ce8 <__kernel_sin>
 800793c:	ec51 0b10 	vmov	r0, r1, d0
 8007940:	e7e6      	b.n	8007910 <sin+0x30>
 8007942:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007946:	ed9d 0b00 	vldr	d0, [sp]
 800794a:	f000 f905 	bl	8007b58 <__kernel_cos>
 800794e:	e7f5      	b.n	800793c <sin+0x5c>
 8007950:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007954:	ed9d 0b00 	vldr	d0, [sp]
 8007958:	2001      	movs	r0, #1
 800795a:	f000 f9c5 	bl	8007ce8 <__kernel_sin>
 800795e:	ec53 2b10 	vmov	r2, r3, d0
 8007962:	ee10 0a10 	vmov	r0, s0
 8007966:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800796a:	e7d1      	b.n	8007910 <sin+0x30>
 800796c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007970:	ed9d 0b00 	vldr	d0, [sp]
 8007974:	f000 f8f0 	bl	8007b58 <__kernel_cos>
 8007978:	e7f1      	b.n	800795e <sin+0x7e>
 800797a:	bf00      	nop
 800797c:	f3af 8000 	nop.w
	...
 8007988:	3fe921fb 	.word	0x3fe921fb
 800798c:	7fefffff 	.word	0x7fefffff

08007990 <nan>:
 8007990:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8007998 <nan+0x8>
 8007994:	4770      	bx	lr
 8007996:	bf00      	nop
 8007998:	00000000 	.word	0x00000000
 800799c:	7ff80000 	.word	0x7ff80000

080079a0 <__ieee754_sqrt>:
 80079a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079a4:	ec55 4b10 	vmov	r4, r5, d0
 80079a8:	4e67      	ldr	r6, [pc, #412]	; (8007b48 <__ieee754_sqrt+0x1a8>)
 80079aa:	43ae      	bics	r6, r5
 80079ac:	ee10 0a10 	vmov	r0, s0
 80079b0:	ee10 2a10 	vmov	r2, s0
 80079b4:	4629      	mov	r1, r5
 80079b6:	462b      	mov	r3, r5
 80079b8:	d10d      	bne.n	80079d6 <__ieee754_sqrt+0x36>
 80079ba:	f7f8 fe1d 	bl	80005f8 <__aeabi_dmul>
 80079be:	4602      	mov	r2, r0
 80079c0:	460b      	mov	r3, r1
 80079c2:	4620      	mov	r0, r4
 80079c4:	4629      	mov	r1, r5
 80079c6:	f7f8 fc61 	bl	800028c <__adddf3>
 80079ca:	4604      	mov	r4, r0
 80079cc:	460d      	mov	r5, r1
 80079ce:	ec45 4b10 	vmov	d0, r4, r5
 80079d2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079d6:	2d00      	cmp	r5, #0
 80079d8:	dc0b      	bgt.n	80079f2 <__ieee754_sqrt+0x52>
 80079da:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80079de:	4326      	orrs	r6, r4
 80079e0:	d0f5      	beq.n	80079ce <__ieee754_sqrt+0x2e>
 80079e2:	b135      	cbz	r5, 80079f2 <__ieee754_sqrt+0x52>
 80079e4:	f7f8 fc50 	bl	8000288 <__aeabi_dsub>
 80079e8:	4602      	mov	r2, r0
 80079ea:	460b      	mov	r3, r1
 80079ec:	f7f8 ff2e 	bl	800084c <__aeabi_ddiv>
 80079f0:	e7eb      	b.n	80079ca <__ieee754_sqrt+0x2a>
 80079f2:	1509      	asrs	r1, r1, #20
 80079f4:	f000 808d 	beq.w	8007b12 <__ieee754_sqrt+0x172>
 80079f8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80079fc:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 8007a00:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007a04:	07c9      	lsls	r1, r1, #31
 8007a06:	bf5c      	itt	pl
 8007a08:	005b      	lslpl	r3, r3, #1
 8007a0a:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 8007a0e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007a12:	bf58      	it	pl
 8007a14:	0052      	lslpl	r2, r2, #1
 8007a16:	2500      	movs	r5, #0
 8007a18:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8007a1c:	1076      	asrs	r6, r6, #1
 8007a1e:	0052      	lsls	r2, r2, #1
 8007a20:	f04f 0e16 	mov.w	lr, #22
 8007a24:	46ac      	mov	ip, r5
 8007a26:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007a2a:	eb0c 0001 	add.w	r0, ip, r1
 8007a2e:	4298      	cmp	r0, r3
 8007a30:	bfde      	ittt	le
 8007a32:	1a1b      	suble	r3, r3, r0
 8007a34:	eb00 0c01 	addle.w	ip, r0, r1
 8007a38:	186d      	addle	r5, r5, r1
 8007a3a:	005b      	lsls	r3, r3, #1
 8007a3c:	f1be 0e01 	subs.w	lr, lr, #1
 8007a40:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8007a44:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8007a48:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8007a4c:	d1ed      	bne.n	8007a2a <__ieee754_sqrt+0x8a>
 8007a4e:	4674      	mov	r4, lr
 8007a50:	2720      	movs	r7, #32
 8007a52:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8007a56:	4563      	cmp	r3, ip
 8007a58:	eb01 000e 	add.w	r0, r1, lr
 8007a5c:	dc02      	bgt.n	8007a64 <__ieee754_sqrt+0xc4>
 8007a5e:	d113      	bne.n	8007a88 <__ieee754_sqrt+0xe8>
 8007a60:	4290      	cmp	r0, r2
 8007a62:	d811      	bhi.n	8007a88 <__ieee754_sqrt+0xe8>
 8007a64:	2800      	cmp	r0, #0
 8007a66:	eb00 0e01 	add.w	lr, r0, r1
 8007a6a:	da57      	bge.n	8007b1c <__ieee754_sqrt+0x17c>
 8007a6c:	f1be 0f00 	cmp.w	lr, #0
 8007a70:	db54      	blt.n	8007b1c <__ieee754_sqrt+0x17c>
 8007a72:	f10c 0801 	add.w	r8, ip, #1
 8007a76:	eba3 030c 	sub.w	r3, r3, ip
 8007a7a:	4290      	cmp	r0, r2
 8007a7c:	bf88      	it	hi
 8007a7e:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8007a82:	1a12      	subs	r2, r2, r0
 8007a84:	440c      	add	r4, r1
 8007a86:	46c4      	mov	ip, r8
 8007a88:	005b      	lsls	r3, r3, #1
 8007a8a:	3f01      	subs	r7, #1
 8007a8c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8007a90:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8007a94:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8007a98:	d1dd      	bne.n	8007a56 <__ieee754_sqrt+0xb6>
 8007a9a:	4313      	orrs	r3, r2
 8007a9c:	d01b      	beq.n	8007ad6 <__ieee754_sqrt+0x136>
 8007a9e:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8007b4c <__ieee754_sqrt+0x1ac>
 8007aa2:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8007b50 <__ieee754_sqrt+0x1b0>
 8007aa6:	e9da 0100 	ldrd	r0, r1, [sl]
 8007aaa:	e9db 2300 	ldrd	r2, r3, [fp]
 8007aae:	f7f8 fbeb 	bl	8000288 <__aeabi_dsub>
 8007ab2:	e9da 8900 	ldrd	r8, r9, [sl]
 8007ab6:	4602      	mov	r2, r0
 8007ab8:	460b      	mov	r3, r1
 8007aba:	4640      	mov	r0, r8
 8007abc:	4649      	mov	r1, r9
 8007abe:	f7f9 f817 	bl	8000af0 <__aeabi_dcmple>
 8007ac2:	b140      	cbz	r0, 8007ad6 <__ieee754_sqrt+0x136>
 8007ac4:	f1b4 3fff 	cmp.w	r4, #4294967295
 8007ac8:	e9da 0100 	ldrd	r0, r1, [sl]
 8007acc:	e9db 2300 	ldrd	r2, r3, [fp]
 8007ad0:	d126      	bne.n	8007b20 <__ieee754_sqrt+0x180>
 8007ad2:	3501      	adds	r5, #1
 8007ad4:	463c      	mov	r4, r7
 8007ad6:	106a      	asrs	r2, r5, #1
 8007ad8:	0863      	lsrs	r3, r4, #1
 8007ada:	07e9      	lsls	r1, r5, #31
 8007adc:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8007ae0:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8007ae4:	bf48      	it	mi
 8007ae6:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8007aea:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 8007aee:	461c      	mov	r4, r3
 8007af0:	e76d      	b.n	80079ce <__ieee754_sqrt+0x2e>
 8007af2:	0ad3      	lsrs	r3, r2, #11
 8007af4:	3815      	subs	r0, #21
 8007af6:	0552      	lsls	r2, r2, #21
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d0fa      	beq.n	8007af2 <__ieee754_sqrt+0x152>
 8007afc:	02dc      	lsls	r4, r3, #11
 8007afe:	d50a      	bpl.n	8007b16 <__ieee754_sqrt+0x176>
 8007b00:	f1c1 0420 	rsb	r4, r1, #32
 8007b04:	fa22 f404 	lsr.w	r4, r2, r4
 8007b08:	1e4d      	subs	r5, r1, #1
 8007b0a:	408a      	lsls	r2, r1
 8007b0c:	4323      	orrs	r3, r4
 8007b0e:	1b41      	subs	r1, r0, r5
 8007b10:	e772      	b.n	80079f8 <__ieee754_sqrt+0x58>
 8007b12:	4608      	mov	r0, r1
 8007b14:	e7f0      	b.n	8007af8 <__ieee754_sqrt+0x158>
 8007b16:	005b      	lsls	r3, r3, #1
 8007b18:	3101      	adds	r1, #1
 8007b1a:	e7ef      	b.n	8007afc <__ieee754_sqrt+0x15c>
 8007b1c:	46e0      	mov	r8, ip
 8007b1e:	e7aa      	b.n	8007a76 <__ieee754_sqrt+0xd6>
 8007b20:	f7f8 fbb4 	bl	800028c <__adddf3>
 8007b24:	e9da 8900 	ldrd	r8, r9, [sl]
 8007b28:	4602      	mov	r2, r0
 8007b2a:	460b      	mov	r3, r1
 8007b2c:	4640      	mov	r0, r8
 8007b2e:	4649      	mov	r1, r9
 8007b30:	f7f8 ffd4 	bl	8000adc <__aeabi_dcmplt>
 8007b34:	b120      	cbz	r0, 8007b40 <__ieee754_sqrt+0x1a0>
 8007b36:	1ca0      	adds	r0, r4, #2
 8007b38:	bf08      	it	eq
 8007b3a:	3501      	addeq	r5, #1
 8007b3c:	3402      	adds	r4, #2
 8007b3e:	e7ca      	b.n	8007ad6 <__ieee754_sqrt+0x136>
 8007b40:	3401      	adds	r4, #1
 8007b42:	f024 0401 	bic.w	r4, r4, #1
 8007b46:	e7c6      	b.n	8007ad6 <__ieee754_sqrt+0x136>
 8007b48:	7ff00000 	.word	0x7ff00000
 8007b4c:	200001d8 	.word	0x200001d8
 8007b50:	200001e0 	.word	0x200001e0
 8007b54:	00000000 	.word	0x00000000

08007b58 <__kernel_cos>:
 8007b58:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b5c:	ec57 6b10 	vmov	r6, r7, d0
 8007b60:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8007b64:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8007b68:	ed8d 1b00 	vstr	d1, [sp]
 8007b6c:	da07      	bge.n	8007b7e <__kernel_cos+0x26>
 8007b6e:	ee10 0a10 	vmov	r0, s0
 8007b72:	4639      	mov	r1, r7
 8007b74:	f7f8 fff0 	bl	8000b58 <__aeabi_d2iz>
 8007b78:	2800      	cmp	r0, #0
 8007b7a:	f000 8088 	beq.w	8007c8e <__kernel_cos+0x136>
 8007b7e:	4632      	mov	r2, r6
 8007b80:	463b      	mov	r3, r7
 8007b82:	4630      	mov	r0, r6
 8007b84:	4639      	mov	r1, r7
 8007b86:	f7f8 fd37 	bl	80005f8 <__aeabi_dmul>
 8007b8a:	4b51      	ldr	r3, [pc, #324]	; (8007cd0 <__kernel_cos+0x178>)
 8007b8c:	2200      	movs	r2, #0
 8007b8e:	4604      	mov	r4, r0
 8007b90:	460d      	mov	r5, r1
 8007b92:	f7f8 fd31 	bl	80005f8 <__aeabi_dmul>
 8007b96:	a340      	add	r3, pc, #256	; (adr r3, 8007c98 <__kernel_cos+0x140>)
 8007b98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b9c:	4682      	mov	sl, r0
 8007b9e:	468b      	mov	fp, r1
 8007ba0:	4620      	mov	r0, r4
 8007ba2:	4629      	mov	r1, r5
 8007ba4:	f7f8 fd28 	bl	80005f8 <__aeabi_dmul>
 8007ba8:	a33d      	add	r3, pc, #244	; (adr r3, 8007ca0 <__kernel_cos+0x148>)
 8007baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bae:	f7f8 fb6d 	bl	800028c <__adddf3>
 8007bb2:	4622      	mov	r2, r4
 8007bb4:	462b      	mov	r3, r5
 8007bb6:	f7f8 fd1f 	bl	80005f8 <__aeabi_dmul>
 8007bba:	a33b      	add	r3, pc, #236	; (adr r3, 8007ca8 <__kernel_cos+0x150>)
 8007bbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bc0:	f7f8 fb62 	bl	8000288 <__aeabi_dsub>
 8007bc4:	4622      	mov	r2, r4
 8007bc6:	462b      	mov	r3, r5
 8007bc8:	f7f8 fd16 	bl	80005f8 <__aeabi_dmul>
 8007bcc:	a338      	add	r3, pc, #224	; (adr r3, 8007cb0 <__kernel_cos+0x158>)
 8007bce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bd2:	f7f8 fb5b 	bl	800028c <__adddf3>
 8007bd6:	4622      	mov	r2, r4
 8007bd8:	462b      	mov	r3, r5
 8007bda:	f7f8 fd0d 	bl	80005f8 <__aeabi_dmul>
 8007bde:	a336      	add	r3, pc, #216	; (adr r3, 8007cb8 <__kernel_cos+0x160>)
 8007be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007be4:	f7f8 fb50 	bl	8000288 <__aeabi_dsub>
 8007be8:	4622      	mov	r2, r4
 8007bea:	462b      	mov	r3, r5
 8007bec:	f7f8 fd04 	bl	80005f8 <__aeabi_dmul>
 8007bf0:	a333      	add	r3, pc, #204	; (adr r3, 8007cc0 <__kernel_cos+0x168>)
 8007bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bf6:	f7f8 fb49 	bl	800028c <__adddf3>
 8007bfa:	4622      	mov	r2, r4
 8007bfc:	462b      	mov	r3, r5
 8007bfe:	f7f8 fcfb 	bl	80005f8 <__aeabi_dmul>
 8007c02:	4622      	mov	r2, r4
 8007c04:	462b      	mov	r3, r5
 8007c06:	f7f8 fcf7 	bl	80005f8 <__aeabi_dmul>
 8007c0a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007c0e:	4604      	mov	r4, r0
 8007c10:	460d      	mov	r5, r1
 8007c12:	4630      	mov	r0, r6
 8007c14:	4639      	mov	r1, r7
 8007c16:	f7f8 fcef 	bl	80005f8 <__aeabi_dmul>
 8007c1a:	460b      	mov	r3, r1
 8007c1c:	4602      	mov	r2, r0
 8007c1e:	4629      	mov	r1, r5
 8007c20:	4620      	mov	r0, r4
 8007c22:	f7f8 fb31 	bl	8000288 <__aeabi_dsub>
 8007c26:	4b2b      	ldr	r3, [pc, #172]	; (8007cd4 <__kernel_cos+0x17c>)
 8007c28:	4598      	cmp	r8, r3
 8007c2a:	4606      	mov	r6, r0
 8007c2c:	460f      	mov	r7, r1
 8007c2e:	dc10      	bgt.n	8007c52 <__kernel_cos+0xfa>
 8007c30:	4602      	mov	r2, r0
 8007c32:	460b      	mov	r3, r1
 8007c34:	4650      	mov	r0, sl
 8007c36:	4659      	mov	r1, fp
 8007c38:	f7f8 fb26 	bl	8000288 <__aeabi_dsub>
 8007c3c:	460b      	mov	r3, r1
 8007c3e:	4926      	ldr	r1, [pc, #152]	; (8007cd8 <__kernel_cos+0x180>)
 8007c40:	4602      	mov	r2, r0
 8007c42:	2000      	movs	r0, #0
 8007c44:	f7f8 fb20 	bl	8000288 <__aeabi_dsub>
 8007c48:	ec41 0b10 	vmov	d0, r0, r1
 8007c4c:	b003      	add	sp, #12
 8007c4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c52:	4b22      	ldr	r3, [pc, #136]	; (8007cdc <__kernel_cos+0x184>)
 8007c54:	4920      	ldr	r1, [pc, #128]	; (8007cd8 <__kernel_cos+0x180>)
 8007c56:	4598      	cmp	r8, r3
 8007c58:	bfcc      	ite	gt
 8007c5a:	4d21      	ldrgt	r5, [pc, #132]	; (8007ce0 <__kernel_cos+0x188>)
 8007c5c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8007c60:	2400      	movs	r4, #0
 8007c62:	4622      	mov	r2, r4
 8007c64:	462b      	mov	r3, r5
 8007c66:	2000      	movs	r0, #0
 8007c68:	f7f8 fb0e 	bl	8000288 <__aeabi_dsub>
 8007c6c:	4622      	mov	r2, r4
 8007c6e:	4680      	mov	r8, r0
 8007c70:	4689      	mov	r9, r1
 8007c72:	462b      	mov	r3, r5
 8007c74:	4650      	mov	r0, sl
 8007c76:	4659      	mov	r1, fp
 8007c78:	f7f8 fb06 	bl	8000288 <__aeabi_dsub>
 8007c7c:	4632      	mov	r2, r6
 8007c7e:	463b      	mov	r3, r7
 8007c80:	f7f8 fb02 	bl	8000288 <__aeabi_dsub>
 8007c84:	4602      	mov	r2, r0
 8007c86:	460b      	mov	r3, r1
 8007c88:	4640      	mov	r0, r8
 8007c8a:	4649      	mov	r1, r9
 8007c8c:	e7da      	b.n	8007c44 <__kernel_cos+0xec>
 8007c8e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8007cc8 <__kernel_cos+0x170>
 8007c92:	e7db      	b.n	8007c4c <__kernel_cos+0xf4>
 8007c94:	f3af 8000 	nop.w
 8007c98:	be8838d4 	.word	0xbe8838d4
 8007c9c:	bda8fae9 	.word	0xbda8fae9
 8007ca0:	bdb4b1c4 	.word	0xbdb4b1c4
 8007ca4:	3e21ee9e 	.word	0x3e21ee9e
 8007ca8:	809c52ad 	.word	0x809c52ad
 8007cac:	3e927e4f 	.word	0x3e927e4f
 8007cb0:	19cb1590 	.word	0x19cb1590
 8007cb4:	3efa01a0 	.word	0x3efa01a0
 8007cb8:	16c15177 	.word	0x16c15177
 8007cbc:	3f56c16c 	.word	0x3f56c16c
 8007cc0:	5555554c 	.word	0x5555554c
 8007cc4:	3fa55555 	.word	0x3fa55555
 8007cc8:	00000000 	.word	0x00000000
 8007ccc:	3ff00000 	.word	0x3ff00000
 8007cd0:	3fe00000 	.word	0x3fe00000
 8007cd4:	3fd33332 	.word	0x3fd33332
 8007cd8:	3ff00000 	.word	0x3ff00000
 8007cdc:	3fe90000 	.word	0x3fe90000
 8007ce0:	3fd20000 	.word	0x3fd20000
 8007ce4:	00000000 	.word	0x00000000

08007ce8 <__kernel_sin>:
 8007ce8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cec:	ed2d 8b04 	vpush	{d8-d9}
 8007cf0:	eeb0 8a41 	vmov.f32	s16, s2
 8007cf4:	eef0 8a61 	vmov.f32	s17, s3
 8007cf8:	ec55 4b10 	vmov	r4, r5, d0
 8007cfc:	b083      	sub	sp, #12
 8007cfe:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8007d02:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8007d06:	9001      	str	r0, [sp, #4]
 8007d08:	da06      	bge.n	8007d18 <__kernel_sin+0x30>
 8007d0a:	ee10 0a10 	vmov	r0, s0
 8007d0e:	4629      	mov	r1, r5
 8007d10:	f7f8 ff22 	bl	8000b58 <__aeabi_d2iz>
 8007d14:	2800      	cmp	r0, #0
 8007d16:	d051      	beq.n	8007dbc <__kernel_sin+0xd4>
 8007d18:	4622      	mov	r2, r4
 8007d1a:	462b      	mov	r3, r5
 8007d1c:	4620      	mov	r0, r4
 8007d1e:	4629      	mov	r1, r5
 8007d20:	f7f8 fc6a 	bl	80005f8 <__aeabi_dmul>
 8007d24:	4682      	mov	sl, r0
 8007d26:	468b      	mov	fp, r1
 8007d28:	4602      	mov	r2, r0
 8007d2a:	460b      	mov	r3, r1
 8007d2c:	4620      	mov	r0, r4
 8007d2e:	4629      	mov	r1, r5
 8007d30:	f7f8 fc62 	bl	80005f8 <__aeabi_dmul>
 8007d34:	a341      	add	r3, pc, #260	; (adr r3, 8007e3c <__kernel_sin+0x154>)
 8007d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d3a:	4680      	mov	r8, r0
 8007d3c:	4689      	mov	r9, r1
 8007d3e:	4650      	mov	r0, sl
 8007d40:	4659      	mov	r1, fp
 8007d42:	f7f8 fc59 	bl	80005f8 <__aeabi_dmul>
 8007d46:	a33f      	add	r3, pc, #252	; (adr r3, 8007e44 <__kernel_sin+0x15c>)
 8007d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d4c:	f7f8 fa9c 	bl	8000288 <__aeabi_dsub>
 8007d50:	4652      	mov	r2, sl
 8007d52:	465b      	mov	r3, fp
 8007d54:	f7f8 fc50 	bl	80005f8 <__aeabi_dmul>
 8007d58:	a33c      	add	r3, pc, #240	; (adr r3, 8007e4c <__kernel_sin+0x164>)
 8007d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d5e:	f7f8 fa95 	bl	800028c <__adddf3>
 8007d62:	4652      	mov	r2, sl
 8007d64:	465b      	mov	r3, fp
 8007d66:	f7f8 fc47 	bl	80005f8 <__aeabi_dmul>
 8007d6a:	a33a      	add	r3, pc, #232	; (adr r3, 8007e54 <__kernel_sin+0x16c>)
 8007d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d70:	f7f8 fa8a 	bl	8000288 <__aeabi_dsub>
 8007d74:	4652      	mov	r2, sl
 8007d76:	465b      	mov	r3, fp
 8007d78:	f7f8 fc3e 	bl	80005f8 <__aeabi_dmul>
 8007d7c:	a337      	add	r3, pc, #220	; (adr r3, 8007e5c <__kernel_sin+0x174>)
 8007d7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d82:	f7f8 fa83 	bl	800028c <__adddf3>
 8007d86:	9b01      	ldr	r3, [sp, #4]
 8007d88:	4606      	mov	r6, r0
 8007d8a:	460f      	mov	r7, r1
 8007d8c:	b9eb      	cbnz	r3, 8007dca <__kernel_sin+0xe2>
 8007d8e:	4602      	mov	r2, r0
 8007d90:	460b      	mov	r3, r1
 8007d92:	4650      	mov	r0, sl
 8007d94:	4659      	mov	r1, fp
 8007d96:	f7f8 fc2f 	bl	80005f8 <__aeabi_dmul>
 8007d9a:	a325      	add	r3, pc, #148	; (adr r3, 8007e30 <__kernel_sin+0x148>)
 8007d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007da0:	f7f8 fa72 	bl	8000288 <__aeabi_dsub>
 8007da4:	4642      	mov	r2, r8
 8007da6:	464b      	mov	r3, r9
 8007da8:	f7f8 fc26 	bl	80005f8 <__aeabi_dmul>
 8007dac:	4602      	mov	r2, r0
 8007dae:	460b      	mov	r3, r1
 8007db0:	4620      	mov	r0, r4
 8007db2:	4629      	mov	r1, r5
 8007db4:	f7f8 fa6a 	bl	800028c <__adddf3>
 8007db8:	4604      	mov	r4, r0
 8007dba:	460d      	mov	r5, r1
 8007dbc:	ec45 4b10 	vmov	d0, r4, r5
 8007dc0:	b003      	add	sp, #12
 8007dc2:	ecbd 8b04 	vpop	{d8-d9}
 8007dc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007dca:	4b1b      	ldr	r3, [pc, #108]	; (8007e38 <__kernel_sin+0x150>)
 8007dcc:	ec51 0b18 	vmov	r0, r1, d8
 8007dd0:	2200      	movs	r2, #0
 8007dd2:	f7f8 fc11 	bl	80005f8 <__aeabi_dmul>
 8007dd6:	4632      	mov	r2, r6
 8007dd8:	ec41 0b19 	vmov	d9, r0, r1
 8007ddc:	463b      	mov	r3, r7
 8007dde:	4640      	mov	r0, r8
 8007de0:	4649      	mov	r1, r9
 8007de2:	f7f8 fc09 	bl	80005f8 <__aeabi_dmul>
 8007de6:	4602      	mov	r2, r0
 8007de8:	460b      	mov	r3, r1
 8007dea:	ec51 0b19 	vmov	r0, r1, d9
 8007dee:	f7f8 fa4b 	bl	8000288 <__aeabi_dsub>
 8007df2:	4652      	mov	r2, sl
 8007df4:	465b      	mov	r3, fp
 8007df6:	f7f8 fbff 	bl	80005f8 <__aeabi_dmul>
 8007dfa:	ec53 2b18 	vmov	r2, r3, d8
 8007dfe:	f7f8 fa43 	bl	8000288 <__aeabi_dsub>
 8007e02:	a30b      	add	r3, pc, #44	; (adr r3, 8007e30 <__kernel_sin+0x148>)
 8007e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e08:	4606      	mov	r6, r0
 8007e0a:	460f      	mov	r7, r1
 8007e0c:	4640      	mov	r0, r8
 8007e0e:	4649      	mov	r1, r9
 8007e10:	f7f8 fbf2 	bl	80005f8 <__aeabi_dmul>
 8007e14:	4602      	mov	r2, r0
 8007e16:	460b      	mov	r3, r1
 8007e18:	4630      	mov	r0, r6
 8007e1a:	4639      	mov	r1, r7
 8007e1c:	f7f8 fa36 	bl	800028c <__adddf3>
 8007e20:	4602      	mov	r2, r0
 8007e22:	460b      	mov	r3, r1
 8007e24:	4620      	mov	r0, r4
 8007e26:	4629      	mov	r1, r5
 8007e28:	f7f8 fa2e 	bl	8000288 <__aeabi_dsub>
 8007e2c:	e7c4      	b.n	8007db8 <__kernel_sin+0xd0>
 8007e2e:	bf00      	nop
 8007e30:	55555549 	.word	0x55555549
 8007e34:	3fc55555 	.word	0x3fc55555
 8007e38:	3fe00000 	.word	0x3fe00000
 8007e3c:	5acfd57c 	.word	0x5acfd57c
 8007e40:	3de5d93a 	.word	0x3de5d93a
 8007e44:	8a2b9ceb 	.word	0x8a2b9ceb
 8007e48:	3e5ae5e6 	.word	0x3e5ae5e6
 8007e4c:	57b1fe7d 	.word	0x57b1fe7d
 8007e50:	3ec71de3 	.word	0x3ec71de3
 8007e54:	19c161d5 	.word	0x19c161d5
 8007e58:	3f2a01a0 	.word	0x3f2a01a0
 8007e5c:	1110f8a6 	.word	0x1110f8a6
 8007e60:	3f811111 	.word	0x3f811111
 8007e64:	00000000 	.word	0x00000000

08007e68 <__ieee754_log>:
 8007e68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e6c:	ec51 0b10 	vmov	r0, r1, d0
 8007e70:	ed2d 8b04 	vpush	{d8-d9}
 8007e74:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8007e78:	b083      	sub	sp, #12
 8007e7a:	460d      	mov	r5, r1
 8007e7c:	da29      	bge.n	8007ed2 <__ieee754_log+0x6a>
 8007e7e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007e82:	4303      	orrs	r3, r0
 8007e84:	ee10 2a10 	vmov	r2, s0
 8007e88:	d10c      	bne.n	8007ea4 <__ieee754_log+0x3c>
 8007e8a:	49cf      	ldr	r1, [pc, #828]	; (80081c8 <__ieee754_log+0x360>)
 8007e8c:	2200      	movs	r2, #0
 8007e8e:	2300      	movs	r3, #0
 8007e90:	2000      	movs	r0, #0
 8007e92:	f7f8 fcdb 	bl	800084c <__aeabi_ddiv>
 8007e96:	ec41 0b10 	vmov	d0, r0, r1
 8007e9a:	b003      	add	sp, #12
 8007e9c:	ecbd 8b04 	vpop	{d8-d9}
 8007ea0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ea4:	2900      	cmp	r1, #0
 8007ea6:	da05      	bge.n	8007eb4 <__ieee754_log+0x4c>
 8007ea8:	460b      	mov	r3, r1
 8007eaa:	f7f8 f9ed 	bl	8000288 <__aeabi_dsub>
 8007eae:	2200      	movs	r2, #0
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	e7ee      	b.n	8007e92 <__ieee754_log+0x2a>
 8007eb4:	4bc5      	ldr	r3, [pc, #788]	; (80081cc <__ieee754_log+0x364>)
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	f7f8 fb9e 	bl	80005f8 <__aeabi_dmul>
 8007ebc:	f06f 0335 	mvn.w	r3, #53	; 0x35
 8007ec0:	460d      	mov	r5, r1
 8007ec2:	4ac3      	ldr	r2, [pc, #780]	; (80081d0 <__ieee754_log+0x368>)
 8007ec4:	4295      	cmp	r5, r2
 8007ec6:	dd06      	ble.n	8007ed6 <__ieee754_log+0x6e>
 8007ec8:	4602      	mov	r2, r0
 8007eca:	460b      	mov	r3, r1
 8007ecc:	f7f8 f9de 	bl	800028c <__adddf3>
 8007ed0:	e7e1      	b.n	8007e96 <__ieee754_log+0x2e>
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	e7f5      	b.n	8007ec2 <__ieee754_log+0x5a>
 8007ed6:	152c      	asrs	r4, r5, #20
 8007ed8:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8007edc:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8007ee0:	441c      	add	r4, r3
 8007ee2:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 8007ee6:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 8007eea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007eee:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 8007ef2:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 8007ef6:	ea42 0105 	orr.w	r1, r2, r5
 8007efa:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 8007efe:	2200      	movs	r2, #0
 8007f00:	4bb4      	ldr	r3, [pc, #720]	; (80081d4 <__ieee754_log+0x36c>)
 8007f02:	f7f8 f9c1 	bl	8000288 <__aeabi_dsub>
 8007f06:	1cab      	adds	r3, r5, #2
 8007f08:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007f0c:	2b02      	cmp	r3, #2
 8007f0e:	4682      	mov	sl, r0
 8007f10:	468b      	mov	fp, r1
 8007f12:	f04f 0200 	mov.w	r2, #0
 8007f16:	dc53      	bgt.n	8007fc0 <__ieee754_log+0x158>
 8007f18:	2300      	movs	r3, #0
 8007f1a:	f7f8 fdd5 	bl	8000ac8 <__aeabi_dcmpeq>
 8007f1e:	b1d0      	cbz	r0, 8007f56 <__ieee754_log+0xee>
 8007f20:	2c00      	cmp	r4, #0
 8007f22:	f000 8122 	beq.w	800816a <__ieee754_log+0x302>
 8007f26:	4620      	mov	r0, r4
 8007f28:	f7f8 fafc 	bl	8000524 <__aeabi_i2d>
 8007f2c:	a390      	add	r3, pc, #576	; (adr r3, 8008170 <__ieee754_log+0x308>)
 8007f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f32:	4606      	mov	r6, r0
 8007f34:	460f      	mov	r7, r1
 8007f36:	f7f8 fb5f 	bl	80005f8 <__aeabi_dmul>
 8007f3a:	a38f      	add	r3, pc, #572	; (adr r3, 8008178 <__ieee754_log+0x310>)
 8007f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f40:	4604      	mov	r4, r0
 8007f42:	460d      	mov	r5, r1
 8007f44:	4630      	mov	r0, r6
 8007f46:	4639      	mov	r1, r7
 8007f48:	f7f8 fb56 	bl	80005f8 <__aeabi_dmul>
 8007f4c:	4602      	mov	r2, r0
 8007f4e:	460b      	mov	r3, r1
 8007f50:	4620      	mov	r0, r4
 8007f52:	4629      	mov	r1, r5
 8007f54:	e7ba      	b.n	8007ecc <__ieee754_log+0x64>
 8007f56:	a38a      	add	r3, pc, #552	; (adr r3, 8008180 <__ieee754_log+0x318>)
 8007f58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f5c:	4650      	mov	r0, sl
 8007f5e:	4659      	mov	r1, fp
 8007f60:	f7f8 fb4a 	bl	80005f8 <__aeabi_dmul>
 8007f64:	4602      	mov	r2, r0
 8007f66:	460b      	mov	r3, r1
 8007f68:	2000      	movs	r0, #0
 8007f6a:	499b      	ldr	r1, [pc, #620]	; (80081d8 <__ieee754_log+0x370>)
 8007f6c:	f7f8 f98c 	bl	8000288 <__aeabi_dsub>
 8007f70:	4652      	mov	r2, sl
 8007f72:	4606      	mov	r6, r0
 8007f74:	460f      	mov	r7, r1
 8007f76:	465b      	mov	r3, fp
 8007f78:	4650      	mov	r0, sl
 8007f7a:	4659      	mov	r1, fp
 8007f7c:	f7f8 fb3c 	bl	80005f8 <__aeabi_dmul>
 8007f80:	4602      	mov	r2, r0
 8007f82:	460b      	mov	r3, r1
 8007f84:	4630      	mov	r0, r6
 8007f86:	4639      	mov	r1, r7
 8007f88:	f7f8 fb36 	bl	80005f8 <__aeabi_dmul>
 8007f8c:	4606      	mov	r6, r0
 8007f8e:	460f      	mov	r7, r1
 8007f90:	b914      	cbnz	r4, 8007f98 <__ieee754_log+0x130>
 8007f92:	4632      	mov	r2, r6
 8007f94:	463b      	mov	r3, r7
 8007f96:	e0a2      	b.n	80080de <__ieee754_log+0x276>
 8007f98:	4620      	mov	r0, r4
 8007f9a:	f7f8 fac3 	bl	8000524 <__aeabi_i2d>
 8007f9e:	a374      	add	r3, pc, #464	; (adr r3, 8008170 <__ieee754_log+0x308>)
 8007fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fa4:	4680      	mov	r8, r0
 8007fa6:	4689      	mov	r9, r1
 8007fa8:	f7f8 fb26 	bl	80005f8 <__aeabi_dmul>
 8007fac:	a372      	add	r3, pc, #456	; (adr r3, 8008178 <__ieee754_log+0x310>)
 8007fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fb2:	4604      	mov	r4, r0
 8007fb4:	460d      	mov	r5, r1
 8007fb6:	4640      	mov	r0, r8
 8007fb8:	4649      	mov	r1, r9
 8007fba:	f7f8 fb1d 	bl	80005f8 <__aeabi_dmul>
 8007fbe:	e0a7      	b.n	8008110 <__ieee754_log+0x2a8>
 8007fc0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007fc4:	f7f8 f962 	bl	800028c <__adddf3>
 8007fc8:	4602      	mov	r2, r0
 8007fca:	460b      	mov	r3, r1
 8007fcc:	4650      	mov	r0, sl
 8007fce:	4659      	mov	r1, fp
 8007fd0:	f7f8 fc3c 	bl	800084c <__aeabi_ddiv>
 8007fd4:	ec41 0b18 	vmov	d8, r0, r1
 8007fd8:	4620      	mov	r0, r4
 8007fda:	f7f8 faa3 	bl	8000524 <__aeabi_i2d>
 8007fde:	ec53 2b18 	vmov	r2, r3, d8
 8007fe2:	ec41 0b19 	vmov	d9, r0, r1
 8007fe6:	ec51 0b18 	vmov	r0, r1, d8
 8007fea:	f7f8 fb05 	bl	80005f8 <__aeabi_dmul>
 8007fee:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 8007ff2:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 8007ff6:	9301      	str	r3, [sp, #4]
 8007ff8:	4602      	mov	r2, r0
 8007ffa:	460b      	mov	r3, r1
 8007ffc:	4680      	mov	r8, r0
 8007ffe:	4689      	mov	r9, r1
 8008000:	f7f8 fafa 	bl	80005f8 <__aeabi_dmul>
 8008004:	a360      	add	r3, pc, #384	; (adr r3, 8008188 <__ieee754_log+0x320>)
 8008006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800800a:	4606      	mov	r6, r0
 800800c:	460f      	mov	r7, r1
 800800e:	f7f8 faf3 	bl	80005f8 <__aeabi_dmul>
 8008012:	a35f      	add	r3, pc, #380	; (adr r3, 8008190 <__ieee754_log+0x328>)
 8008014:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008018:	f7f8 f938 	bl	800028c <__adddf3>
 800801c:	4632      	mov	r2, r6
 800801e:	463b      	mov	r3, r7
 8008020:	f7f8 faea 	bl	80005f8 <__aeabi_dmul>
 8008024:	a35c      	add	r3, pc, #368	; (adr r3, 8008198 <__ieee754_log+0x330>)
 8008026:	e9d3 2300 	ldrd	r2, r3, [r3]
 800802a:	f7f8 f92f 	bl	800028c <__adddf3>
 800802e:	4632      	mov	r2, r6
 8008030:	463b      	mov	r3, r7
 8008032:	f7f8 fae1 	bl	80005f8 <__aeabi_dmul>
 8008036:	a35a      	add	r3, pc, #360	; (adr r3, 80081a0 <__ieee754_log+0x338>)
 8008038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800803c:	f7f8 f926 	bl	800028c <__adddf3>
 8008040:	4642      	mov	r2, r8
 8008042:	464b      	mov	r3, r9
 8008044:	f7f8 fad8 	bl	80005f8 <__aeabi_dmul>
 8008048:	a357      	add	r3, pc, #348	; (adr r3, 80081a8 <__ieee754_log+0x340>)
 800804a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800804e:	4680      	mov	r8, r0
 8008050:	4689      	mov	r9, r1
 8008052:	4630      	mov	r0, r6
 8008054:	4639      	mov	r1, r7
 8008056:	f7f8 facf 	bl	80005f8 <__aeabi_dmul>
 800805a:	a355      	add	r3, pc, #340	; (adr r3, 80081b0 <__ieee754_log+0x348>)
 800805c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008060:	f7f8 f914 	bl	800028c <__adddf3>
 8008064:	4632      	mov	r2, r6
 8008066:	463b      	mov	r3, r7
 8008068:	f7f8 fac6 	bl	80005f8 <__aeabi_dmul>
 800806c:	a352      	add	r3, pc, #328	; (adr r3, 80081b8 <__ieee754_log+0x350>)
 800806e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008072:	f7f8 f90b 	bl	800028c <__adddf3>
 8008076:	4632      	mov	r2, r6
 8008078:	463b      	mov	r3, r7
 800807a:	f7f8 fabd 	bl	80005f8 <__aeabi_dmul>
 800807e:	460b      	mov	r3, r1
 8008080:	4602      	mov	r2, r0
 8008082:	4649      	mov	r1, r9
 8008084:	4640      	mov	r0, r8
 8008086:	f7f8 f901 	bl	800028c <__adddf3>
 800808a:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 800808e:	9b01      	ldr	r3, [sp, #4]
 8008090:	3551      	adds	r5, #81	; 0x51
 8008092:	431d      	orrs	r5, r3
 8008094:	2d00      	cmp	r5, #0
 8008096:	4680      	mov	r8, r0
 8008098:	4689      	mov	r9, r1
 800809a:	dd48      	ble.n	800812e <__ieee754_log+0x2c6>
 800809c:	4b4e      	ldr	r3, [pc, #312]	; (80081d8 <__ieee754_log+0x370>)
 800809e:	2200      	movs	r2, #0
 80080a0:	4650      	mov	r0, sl
 80080a2:	4659      	mov	r1, fp
 80080a4:	f7f8 faa8 	bl	80005f8 <__aeabi_dmul>
 80080a8:	4652      	mov	r2, sl
 80080aa:	465b      	mov	r3, fp
 80080ac:	f7f8 faa4 	bl	80005f8 <__aeabi_dmul>
 80080b0:	4602      	mov	r2, r0
 80080b2:	460b      	mov	r3, r1
 80080b4:	4606      	mov	r6, r0
 80080b6:	460f      	mov	r7, r1
 80080b8:	4640      	mov	r0, r8
 80080ba:	4649      	mov	r1, r9
 80080bc:	f7f8 f8e6 	bl	800028c <__adddf3>
 80080c0:	ec53 2b18 	vmov	r2, r3, d8
 80080c4:	f7f8 fa98 	bl	80005f8 <__aeabi_dmul>
 80080c8:	4680      	mov	r8, r0
 80080ca:	4689      	mov	r9, r1
 80080cc:	b964      	cbnz	r4, 80080e8 <__ieee754_log+0x280>
 80080ce:	4602      	mov	r2, r0
 80080d0:	460b      	mov	r3, r1
 80080d2:	4630      	mov	r0, r6
 80080d4:	4639      	mov	r1, r7
 80080d6:	f7f8 f8d7 	bl	8000288 <__aeabi_dsub>
 80080da:	4602      	mov	r2, r0
 80080dc:	460b      	mov	r3, r1
 80080de:	4650      	mov	r0, sl
 80080e0:	4659      	mov	r1, fp
 80080e2:	f7f8 f8d1 	bl	8000288 <__aeabi_dsub>
 80080e6:	e6d6      	b.n	8007e96 <__ieee754_log+0x2e>
 80080e8:	a321      	add	r3, pc, #132	; (adr r3, 8008170 <__ieee754_log+0x308>)
 80080ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080ee:	ec51 0b19 	vmov	r0, r1, d9
 80080f2:	f7f8 fa81 	bl	80005f8 <__aeabi_dmul>
 80080f6:	a320      	add	r3, pc, #128	; (adr r3, 8008178 <__ieee754_log+0x310>)
 80080f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080fc:	4604      	mov	r4, r0
 80080fe:	460d      	mov	r5, r1
 8008100:	ec51 0b19 	vmov	r0, r1, d9
 8008104:	f7f8 fa78 	bl	80005f8 <__aeabi_dmul>
 8008108:	4642      	mov	r2, r8
 800810a:	464b      	mov	r3, r9
 800810c:	f7f8 f8be 	bl	800028c <__adddf3>
 8008110:	4602      	mov	r2, r0
 8008112:	460b      	mov	r3, r1
 8008114:	4630      	mov	r0, r6
 8008116:	4639      	mov	r1, r7
 8008118:	f7f8 f8b6 	bl	8000288 <__aeabi_dsub>
 800811c:	4652      	mov	r2, sl
 800811e:	465b      	mov	r3, fp
 8008120:	f7f8 f8b2 	bl	8000288 <__aeabi_dsub>
 8008124:	4602      	mov	r2, r0
 8008126:	460b      	mov	r3, r1
 8008128:	4620      	mov	r0, r4
 800812a:	4629      	mov	r1, r5
 800812c:	e7d9      	b.n	80080e2 <__ieee754_log+0x27a>
 800812e:	4602      	mov	r2, r0
 8008130:	460b      	mov	r3, r1
 8008132:	4650      	mov	r0, sl
 8008134:	4659      	mov	r1, fp
 8008136:	f7f8 f8a7 	bl	8000288 <__aeabi_dsub>
 800813a:	ec53 2b18 	vmov	r2, r3, d8
 800813e:	f7f8 fa5b 	bl	80005f8 <__aeabi_dmul>
 8008142:	4606      	mov	r6, r0
 8008144:	460f      	mov	r7, r1
 8008146:	2c00      	cmp	r4, #0
 8008148:	f43f af23 	beq.w	8007f92 <__ieee754_log+0x12a>
 800814c:	a308      	add	r3, pc, #32	; (adr r3, 8008170 <__ieee754_log+0x308>)
 800814e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008152:	ec51 0b19 	vmov	r0, r1, d9
 8008156:	f7f8 fa4f 	bl	80005f8 <__aeabi_dmul>
 800815a:	a307      	add	r3, pc, #28	; (adr r3, 8008178 <__ieee754_log+0x310>)
 800815c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008160:	4604      	mov	r4, r0
 8008162:	460d      	mov	r5, r1
 8008164:	ec51 0b19 	vmov	r0, r1, d9
 8008168:	e727      	b.n	8007fba <__ieee754_log+0x152>
 800816a:	ed9f 0b15 	vldr	d0, [pc, #84]	; 80081c0 <__ieee754_log+0x358>
 800816e:	e694      	b.n	8007e9a <__ieee754_log+0x32>
 8008170:	fee00000 	.word	0xfee00000
 8008174:	3fe62e42 	.word	0x3fe62e42
 8008178:	35793c76 	.word	0x35793c76
 800817c:	3dea39ef 	.word	0x3dea39ef
 8008180:	55555555 	.word	0x55555555
 8008184:	3fd55555 	.word	0x3fd55555
 8008188:	df3e5244 	.word	0xdf3e5244
 800818c:	3fc2f112 	.word	0x3fc2f112
 8008190:	96cb03de 	.word	0x96cb03de
 8008194:	3fc74664 	.word	0x3fc74664
 8008198:	94229359 	.word	0x94229359
 800819c:	3fd24924 	.word	0x3fd24924
 80081a0:	55555593 	.word	0x55555593
 80081a4:	3fe55555 	.word	0x3fe55555
 80081a8:	d078c69f 	.word	0xd078c69f
 80081ac:	3fc39a09 	.word	0x3fc39a09
 80081b0:	1d8e78af 	.word	0x1d8e78af
 80081b4:	3fcc71c5 	.word	0x3fcc71c5
 80081b8:	9997fa04 	.word	0x9997fa04
 80081bc:	3fd99999 	.word	0x3fd99999
	...
 80081c8:	c3500000 	.word	0xc3500000
 80081cc:	43500000 	.word	0x43500000
 80081d0:	7fefffff 	.word	0x7fefffff
 80081d4:	3ff00000 	.word	0x3ff00000
 80081d8:	3fe00000 	.word	0x3fe00000
 80081dc:	00000000 	.word	0x00000000

080081e0 <__ieee754_rem_pio2>:
 80081e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081e4:	ed2d 8b02 	vpush	{d8}
 80081e8:	ec55 4b10 	vmov	r4, r5, d0
 80081ec:	4bca      	ldr	r3, [pc, #808]	; (8008518 <__ieee754_rem_pio2+0x338>)
 80081ee:	b08b      	sub	sp, #44	; 0x2c
 80081f0:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 80081f4:	4598      	cmp	r8, r3
 80081f6:	4682      	mov	sl, r0
 80081f8:	9502      	str	r5, [sp, #8]
 80081fa:	dc08      	bgt.n	800820e <__ieee754_rem_pio2+0x2e>
 80081fc:	2200      	movs	r2, #0
 80081fe:	2300      	movs	r3, #0
 8008200:	ed80 0b00 	vstr	d0, [r0]
 8008204:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8008208:	f04f 0b00 	mov.w	fp, #0
 800820c:	e028      	b.n	8008260 <__ieee754_rem_pio2+0x80>
 800820e:	4bc3      	ldr	r3, [pc, #780]	; (800851c <__ieee754_rem_pio2+0x33c>)
 8008210:	4598      	cmp	r8, r3
 8008212:	dc78      	bgt.n	8008306 <__ieee754_rem_pio2+0x126>
 8008214:	9b02      	ldr	r3, [sp, #8]
 8008216:	4ec2      	ldr	r6, [pc, #776]	; (8008520 <__ieee754_rem_pio2+0x340>)
 8008218:	2b00      	cmp	r3, #0
 800821a:	ee10 0a10 	vmov	r0, s0
 800821e:	a3b0      	add	r3, pc, #704	; (adr r3, 80084e0 <__ieee754_rem_pio2+0x300>)
 8008220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008224:	4629      	mov	r1, r5
 8008226:	dd39      	ble.n	800829c <__ieee754_rem_pio2+0xbc>
 8008228:	f7f8 f82e 	bl	8000288 <__aeabi_dsub>
 800822c:	45b0      	cmp	r8, r6
 800822e:	4604      	mov	r4, r0
 8008230:	460d      	mov	r5, r1
 8008232:	d01b      	beq.n	800826c <__ieee754_rem_pio2+0x8c>
 8008234:	a3ac      	add	r3, pc, #688	; (adr r3, 80084e8 <__ieee754_rem_pio2+0x308>)
 8008236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800823a:	f7f8 f825 	bl	8000288 <__aeabi_dsub>
 800823e:	4602      	mov	r2, r0
 8008240:	460b      	mov	r3, r1
 8008242:	e9ca 2300 	strd	r2, r3, [sl]
 8008246:	4620      	mov	r0, r4
 8008248:	4629      	mov	r1, r5
 800824a:	f7f8 f81d 	bl	8000288 <__aeabi_dsub>
 800824e:	a3a6      	add	r3, pc, #664	; (adr r3, 80084e8 <__ieee754_rem_pio2+0x308>)
 8008250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008254:	f7f8 f818 	bl	8000288 <__aeabi_dsub>
 8008258:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800825c:	f04f 0b01 	mov.w	fp, #1
 8008260:	4658      	mov	r0, fp
 8008262:	b00b      	add	sp, #44	; 0x2c
 8008264:	ecbd 8b02 	vpop	{d8}
 8008268:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800826c:	a3a0      	add	r3, pc, #640	; (adr r3, 80084f0 <__ieee754_rem_pio2+0x310>)
 800826e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008272:	f7f8 f809 	bl	8000288 <__aeabi_dsub>
 8008276:	a3a0      	add	r3, pc, #640	; (adr r3, 80084f8 <__ieee754_rem_pio2+0x318>)
 8008278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800827c:	4604      	mov	r4, r0
 800827e:	460d      	mov	r5, r1
 8008280:	f7f8 f802 	bl	8000288 <__aeabi_dsub>
 8008284:	4602      	mov	r2, r0
 8008286:	460b      	mov	r3, r1
 8008288:	e9ca 2300 	strd	r2, r3, [sl]
 800828c:	4620      	mov	r0, r4
 800828e:	4629      	mov	r1, r5
 8008290:	f7f7 fffa 	bl	8000288 <__aeabi_dsub>
 8008294:	a398      	add	r3, pc, #608	; (adr r3, 80084f8 <__ieee754_rem_pio2+0x318>)
 8008296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800829a:	e7db      	b.n	8008254 <__ieee754_rem_pio2+0x74>
 800829c:	f7f7 fff6 	bl	800028c <__adddf3>
 80082a0:	45b0      	cmp	r8, r6
 80082a2:	4604      	mov	r4, r0
 80082a4:	460d      	mov	r5, r1
 80082a6:	d016      	beq.n	80082d6 <__ieee754_rem_pio2+0xf6>
 80082a8:	a38f      	add	r3, pc, #572	; (adr r3, 80084e8 <__ieee754_rem_pio2+0x308>)
 80082aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082ae:	f7f7 ffed 	bl	800028c <__adddf3>
 80082b2:	4602      	mov	r2, r0
 80082b4:	460b      	mov	r3, r1
 80082b6:	e9ca 2300 	strd	r2, r3, [sl]
 80082ba:	4620      	mov	r0, r4
 80082bc:	4629      	mov	r1, r5
 80082be:	f7f7 ffe3 	bl	8000288 <__aeabi_dsub>
 80082c2:	a389      	add	r3, pc, #548	; (adr r3, 80084e8 <__ieee754_rem_pio2+0x308>)
 80082c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082c8:	f7f7 ffe0 	bl	800028c <__adddf3>
 80082cc:	f04f 3bff 	mov.w	fp, #4294967295
 80082d0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80082d4:	e7c4      	b.n	8008260 <__ieee754_rem_pio2+0x80>
 80082d6:	a386      	add	r3, pc, #536	; (adr r3, 80084f0 <__ieee754_rem_pio2+0x310>)
 80082d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082dc:	f7f7 ffd6 	bl	800028c <__adddf3>
 80082e0:	a385      	add	r3, pc, #532	; (adr r3, 80084f8 <__ieee754_rem_pio2+0x318>)
 80082e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082e6:	4604      	mov	r4, r0
 80082e8:	460d      	mov	r5, r1
 80082ea:	f7f7 ffcf 	bl	800028c <__adddf3>
 80082ee:	4602      	mov	r2, r0
 80082f0:	460b      	mov	r3, r1
 80082f2:	e9ca 2300 	strd	r2, r3, [sl]
 80082f6:	4620      	mov	r0, r4
 80082f8:	4629      	mov	r1, r5
 80082fa:	f7f7 ffc5 	bl	8000288 <__aeabi_dsub>
 80082fe:	a37e      	add	r3, pc, #504	; (adr r3, 80084f8 <__ieee754_rem_pio2+0x318>)
 8008300:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008304:	e7e0      	b.n	80082c8 <__ieee754_rem_pio2+0xe8>
 8008306:	4b87      	ldr	r3, [pc, #540]	; (8008524 <__ieee754_rem_pio2+0x344>)
 8008308:	4598      	cmp	r8, r3
 800830a:	f300 80d8 	bgt.w	80084be <__ieee754_rem_pio2+0x2de>
 800830e:	f000 f96d 	bl	80085ec <fabs>
 8008312:	ec55 4b10 	vmov	r4, r5, d0
 8008316:	ee10 0a10 	vmov	r0, s0
 800831a:	a379      	add	r3, pc, #484	; (adr r3, 8008500 <__ieee754_rem_pio2+0x320>)
 800831c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008320:	4629      	mov	r1, r5
 8008322:	f7f8 f969 	bl	80005f8 <__aeabi_dmul>
 8008326:	4b80      	ldr	r3, [pc, #512]	; (8008528 <__ieee754_rem_pio2+0x348>)
 8008328:	2200      	movs	r2, #0
 800832a:	f7f7 ffaf 	bl	800028c <__adddf3>
 800832e:	f7f8 fc13 	bl	8000b58 <__aeabi_d2iz>
 8008332:	4683      	mov	fp, r0
 8008334:	f7f8 f8f6 	bl	8000524 <__aeabi_i2d>
 8008338:	4602      	mov	r2, r0
 800833a:	460b      	mov	r3, r1
 800833c:	ec43 2b18 	vmov	d8, r2, r3
 8008340:	a367      	add	r3, pc, #412	; (adr r3, 80084e0 <__ieee754_rem_pio2+0x300>)
 8008342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008346:	f7f8 f957 	bl	80005f8 <__aeabi_dmul>
 800834a:	4602      	mov	r2, r0
 800834c:	460b      	mov	r3, r1
 800834e:	4620      	mov	r0, r4
 8008350:	4629      	mov	r1, r5
 8008352:	f7f7 ff99 	bl	8000288 <__aeabi_dsub>
 8008356:	a364      	add	r3, pc, #400	; (adr r3, 80084e8 <__ieee754_rem_pio2+0x308>)
 8008358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800835c:	4606      	mov	r6, r0
 800835e:	460f      	mov	r7, r1
 8008360:	ec51 0b18 	vmov	r0, r1, d8
 8008364:	f7f8 f948 	bl	80005f8 <__aeabi_dmul>
 8008368:	f1bb 0f1f 	cmp.w	fp, #31
 800836c:	4604      	mov	r4, r0
 800836e:	460d      	mov	r5, r1
 8008370:	dc0d      	bgt.n	800838e <__ieee754_rem_pio2+0x1ae>
 8008372:	4b6e      	ldr	r3, [pc, #440]	; (800852c <__ieee754_rem_pio2+0x34c>)
 8008374:	f10b 32ff 	add.w	r2, fp, #4294967295
 8008378:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800837c:	4543      	cmp	r3, r8
 800837e:	d006      	beq.n	800838e <__ieee754_rem_pio2+0x1ae>
 8008380:	4622      	mov	r2, r4
 8008382:	462b      	mov	r3, r5
 8008384:	4630      	mov	r0, r6
 8008386:	4639      	mov	r1, r7
 8008388:	f7f7 ff7e 	bl	8000288 <__aeabi_dsub>
 800838c:	e00e      	b.n	80083ac <__ieee754_rem_pio2+0x1cc>
 800838e:	462b      	mov	r3, r5
 8008390:	4622      	mov	r2, r4
 8008392:	4630      	mov	r0, r6
 8008394:	4639      	mov	r1, r7
 8008396:	f7f7 ff77 	bl	8000288 <__aeabi_dsub>
 800839a:	ea4f 5328 	mov.w	r3, r8, asr #20
 800839e:	9303      	str	r3, [sp, #12]
 80083a0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80083a4:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 80083a8:	2b10      	cmp	r3, #16
 80083aa:	dc02      	bgt.n	80083b2 <__ieee754_rem_pio2+0x1d2>
 80083ac:	e9ca 0100 	strd	r0, r1, [sl]
 80083b0:	e039      	b.n	8008426 <__ieee754_rem_pio2+0x246>
 80083b2:	a34f      	add	r3, pc, #316	; (adr r3, 80084f0 <__ieee754_rem_pio2+0x310>)
 80083b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083b8:	ec51 0b18 	vmov	r0, r1, d8
 80083bc:	f7f8 f91c 	bl	80005f8 <__aeabi_dmul>
 80083c0:	4604      	mov	r4, r0
 80083c2:	460d      	mov	r5, r1
 80083c4:	4602      	mov	r2, r0
 80083c6:	460b      	mov	r3, r1
 80083c8:	4630      	mov	r0, r6
 80083ca:	4639      	mov	r1, r7
 80083cc:	f7f7 ff5c 	bl	8000288 <__aeabi_dsub>
 80083d0:	4602      	mov	r2, r0
 80083d2:	460b      	mov	r3, r1
 80083d4:	4680      	mov	r8, r0
 80083d6:	4689      	mov	r9, r1
 80083d8:	4630      	mov	r0, r6
 80083da:	4639      	mov	r1, r7
 80083dc:	f7f7 ff54 	bl	8000288 <__aeabi_dsub>
 80083e0:	4622      	mov	r2, r4
 80083e2:	462b      	mov	r3, r5
 80083e4:	f7f7 ff50 	bl	8000288 <__aeabi_dsub>
 80083e8:	a343      	add	r3, pc, #268	; (adr r3, 80084f8 <__ieee754_rem_pio2+0x318>)
 80083ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083ee:	4604      	mov	r4, r0
 80083f0:	460d      	mov	r5, r1
 80083f2:	ec51 0b18 	vmov	r0, r1, d8
 80083f6:	f7f8 f8ff 	bl	80005f8 <__aeabi_dmul>
 80083fa:	4622      	mov	r2, r4
 80083fc:	462b      	mov	r3, r5
 80083fe:	f7f7 ff43 	bl	8000288 <__aeabi_dsub>
 8008402:	4602      	mov	r2, r0
 8008404:	460b      	mov	r3, r1
 8008406:	4604      	mov	r4, r0
 8008408:	460d      	mov	r5, r1
 800840a:	4640      	mov	r0, r8
 800840c:	4649      	mov	r1, r9
 800840e:	f7f7 ff3b 	bl	8000288 <__aeabi_dsub>
 8008412:	9a03      	ldr	r2, [sp, #12]
 8008414:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008418:	1ad3      	subs	r3, r2, r3
 800841a:	2b31      	cmp	r3, #49	; 0x31
 800841c:	dc24      	bgt.n	8008468 <__ieee754_rem_pio2+0x288>
 800841e:	e9ca 0100 	strd	r0, r1, [sl]
 8008422:	4646      	mov	r6, r8
 8008424:	464f      	mov	r7, r9
 8008426:	e9da 8900 	ldrd	r8, r9, [sl]
 800842a:	4630      	mov	r0, r6
 800842c:	4642      	mov	r2, r8
 800842e:	464b      	mov	r3, r9
 8008430:	4639      	mov	r1, r7
 8008432:	f7f7 ff29 	bl	8000288 <__aeabi_dsub>
 8008436:	462b      	mov	r3, r5
 8008438:	4622      	mov	r2, r4
 800843a:	f7f7 ff25 	bl	8000288 <__aeabi_dsub>
 800843e:	9b02      	ldr	r3, [sp, #8]
 8008440:	2b00      	cmp	r3, #0
 8008442:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008446:	f6bf af0b 	bge.w	8008260 <__ieee754_rem_pio2+0x80>
 800844a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800844e:	f8ca 3004 	str.w	r3, [sl, #4]
 8008452:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008456:	f8ca 8000 	str.w	r8, [sl]
 800845a:	f8ca 0008 	str.w	r0, [sl, #8]
 800845e:	f8ca 300c 	str.w	r3, [sl, #12]
 8008462:	f1cb 0b00 	rsb	fp, fp, #0
 8008466:	e6fb      	b.n	8008260 <__ieee754_rem_pio2+0x80>
 8008468:	a327      	add	r3, pc, #156	; (adr r3, 8008508 <__ieee754_rem_pio2+0x328>)
 800846a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800846e:	ec51 0b18 	vmov	r0, r1, d8
 8008472:	f7f8 f8c1 	bl	80005f8 <__aeabi_dmul>
 8008476:	4604      	mov	r4, r0
 8008478:	460d      	mov	r5, r1
 800847a:	4602      	mov	r2, r0
 800847c:	460b      	mov	r3, r1
 800847e:	4640      	mov	r0, r8
 8008480:	4649      	mov	r1, r9
 8008482:	f7f7 ff01 	bl	8000288 <__aeabi_dsub>
 8008486:	4602      	mov	r2, r0
 8008488:	460b      	mov	r3, r1
 800848a:	4606      	mov	r6, r0
 800848c:	460f      	mov	r7, r1
 800848e:	4640      	mov	r0, r8
 8008490:	4649      	mov	r1, r9
 8008492:	f7f7 fef9 	bl	8000288 <__aeabi_dsub>
 8008496:	4622      	mov	r2, r4
 8008498:	462b      	mov	r3, r5
 800849a:	f7f7 fef5 	bl	8000288 <__aeabi_dsub>
 800849e:	a31c      	add	r3, pc, #112	; (adr r3, 8008510 <__ieee754_rem_pio2+0x330>)
 80084a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084a4:	4604      	mov	r4, r0
 80084a6:	460d      	mov	r5, r1
 80084a8:	ec51 0b18 	vmov	r0, r1, d8
 80084ac:	f7f8 f8a4 	bl	80005f8 <__aeabi_dmul>
 80084b0:	4622      	mov	r2, r4
 80084b2:	462b      	mov	r3, r5
 80084b4:	f7f7 fee8 	bl	8000288 <__aeabi_dsub>
 80084b8:	4604      	mov	r4, r0
 80084ba:	460d      	mov	r5, r1
 80084bc:	e760      	b.n	8008380 <__ieee754_rem_pio2+0x1a0>
 80084be:	4b1c      	ldr	r3, [pc, #112]	; (8008530 <__ieee754_rem_pio2+0x350>)
 80084c0:	4598      	cmp	r8, r3
 80084c2:	dd37      	ble.n	8008534 <__ieee754_rem_pio2+0x354>
 80084c4:	ee10 2a10 	vmov	r2, s0
 80084c8:	462b      	mov	r3, r5
 80084ca:	4620      	mov	r0, r4
 80084cc:	4629      	mov	r1, r5
 80084ce:	f7f7 fedb 	bl	8000288 <__aeabi_dsub>
 80084d2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80084d6:	e9ca 0100 	strd	r0, r1, [sl]
 80084da:	e695      	b.n	8008208 <__ieee754_rem_pio2+0x28>
 80084dc:	f3af 8000 	nop.w
 80084e0:	54400000 	.word	0x54400000
 80084e4:	3ff921fb 	.word	0x3ff921fb
 80084e8:	1a626331 	.word	0x1a626331
 80084ec:	3dd0b461 	.word	0x3dd0b461
 80084f0:	1a600000 	.word	0x1a600000
 80084f4:	3dd0b461 	.word	0x3dd0b461
 80084f8:	2e037073 	.word	0x2e037073
 80084fc:	3ba3198a 	.word	0x3ba3198a
 8008500:	6dc9c883 	.word	0x6dc9c883
 8008504:	3fe45f30 	.word	0x3fe45f30
 8008508:	2e000000 	.word	0x2e000000
 800850c:	3ba3198a 	.word	0x3ba3198a
 8008510:	252049c1 	.word	0x252049c1
 8008514:	397b839a 	.word	0x397b839a
 8008518:	3fe921fb 	.word	0x3fe921fb
 800851c:	4002d97b 	.word	0x4002d97b
 8008520:	3ff921fb 	.word	0x3ff921fb
 8008524:	413921fb 	.word	0x413921fb
 8008528:	3fe00000 	.word	0x3fe00000
 800852c:	08009844 	.word	0x08009844
 8008530:	7fefffff 	.word	0x7fefffff
 8008534:	ea4f 5628 	mov.w	r6, r8, asr #20
 8008538:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 800853c:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 8008540:	4620      	mov	r0, r4
 8008542:	460d      	mov	r5, r1
 8008544:	f7f8 fb08 	bl	8000b58 <__aeabi_d2iz>
 8008548:	f7f7 ffec 	bl	8000524 <__aeabi_i2d>
 800854c:	4602      	mov	r2, r0
 800854e:	460b      	mov	r3, r1
 8008550:	4620      	mov	r0, r4
 8008552:	4629      	mov	r1, r5
 8008554:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008558:	f7f7 fe96 	bl	8000288 <__aeabi_dsub>
 800855c:	4b21      	ldr	r3, [pc, #132]	; (80085e4 <__ieee754_rem_pio2+0x404>)
 800855e:	2200      	movs	r2, #0
 8008560:	f7f8 f84a 	bl	80005f8 <__aeabi_dmul>
 8008564:	460d      	mov	r5, r1
 8008566:	4604      	mov	r4, r0
 8008568:	f7f8 faf6 	bl	8000b58 <__aeabi_d2iz>
 800856c:	f7f7 ffda 	bl	8000524 <__aeabi_i2d>
 8008570:	4602      	mov	r2, r0
 8008572:	460b      	mov	r3, r1
 8008574:	4620      	mov	r0, r4
 8008576:	4629      	mov	r1, r5
 8008578:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800857c:	f7f7 fe84 	bl	8000288 <__aeabi_dsub>
 8008580:	4b18      	ldr	r3, [pc, #96]	; (80085e4 <__ieee754_rem_pio2+0x404>)
 8008582:	2200      	movs	r2, #0
 8008584:	f7f8 f838 	bl	80005f8 <__aeabi_dmul>
 8008588:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800858c:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 8008590:	2703      	movs	r7, #3
 8008592:	2400      	movs	r4, #0
 8008594:	2500      	movs	r5, #0
 8008596:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 800859a:	4622      	mov	r2, r4
 800859c:	462b      	mov	r3, r5
 800859e:	46b9      	mov	r9, r7
 80085a0:	3f01      	subs	r7, #1
 80085a2:	f7f8 fa91 	bl	8000ac8 <__aeabi_dcmpeq>
 80085a6:	2800      	cmp	r0, #0
 80085a8:	d1f5      	bne.n	8008596 <__ieee754_rem_pio2+0x3b6>
 80085aa:	4b0f      	ldr	r3, [pc, #60]	; (80085e8 <__ieee754_rem_pio2+0x408>)
 80085ac:	9301      	str	r3, [sp, #4]
 80085ae:	2302      	movs	r3, #2
 80085b0:	9300      	str	r3, [sp, #0]
 80085b2:	4632      	mov	r2, r6
 80085b4:	464b      	mov	r3, r9
 80085b6:	4651      	mov	r1, sl
 80085b8:	a804      	add	r0, sp, #16
 80085ba:	f000 f821 	bl	8008600 <__kernel_rem_pio2>
 80085be:	9b02      	ldr	r3, [sp, #8]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	4683      	mov	fp, r0
 80085c4:	f6bf ae4c 	bge.w	8008260 <__ieee754_rem_pio2+0x80>
 80085c8:	e9da 2100 	ldrd	r2, r1, [sl]
 80085cc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80085d0:	e9ca 2300 	strd	r2, r3, [sl]
 80085d4:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 80085d8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80085dc:	e9ca 2302 	strd	r2, r3, [sl, #8]
 80085e0:	e73f      	b.n	8008462 <__ieee754_rem_pio2+0x282>
 80085e2:	bf00      	nop
 80085e4:	41700000 	.word	0x41700000
 80085e8:	080098c4 	.word	0x080098c4

080085ec <fabs>:
 80085ec:	ec51 0b10 	vmov	r0, r1, d0
 80085f0:	ee10 2a10 	vmov	r2, s0
 80085f4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80085f8:	ec43 2b10 	vmov	d0, r2, r3
 80085fc:	4770      	bx	lr
	...

08008600 <__kernel_rem_pio2>:
 8008600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008604:	ed2d 8b02 	vpush	{d8}
 8008608:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800860c:	f112 0f14 	cmn.w	r2, #20
 8008610:	9306      	str	r3, [sp, #24]
 8008612:	9104      	str	r1, [sp, #16]
 8008614:	4bc2      	ldr	r3, [pc, #776]	; (8008920 <__kernel_rem_pio2+0x320>)
 8008616:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8008618:	9009      	str	r0, [sp, #36]	; 0x24
 800861a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800861e:	9300      	str	r3, [sp, #0]
 8008620:	9b06      	ldr	r3, [sp, #24]
 8008622:	f103 33ff 	add.w	r3, r3, #4294967295
 8008626:	bfa8      	it	ge
 8008628:	1ed4      	subge	r4, r2, #3
 800862a:	9305      	str	r3, [sp, #20]
 800862c:	bfb2      	itee	lt
 800862e:	2400      	movlt	r4, #0
 8008630:	2318      	movge	r3, #24
 8008632:	fb94 f4f3 	sdivge	r4, r4, r3
 8008636:	f06f 0317 	mvn.w	r3, #23
 800863a:	fb04 3303 	mla	r3, r4, r3, r3
 800863e:	eb03 0a02 	add.w	sl, r3, r2
 8008642:	9b00      	ldr	r3, [sp, #0]
 8008644:	9a05      	ldr	r2, [sp, #20]
 8008646:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 8008910 <__kernel_rem_pio2+0x310>
 800864a:	eb03 0802 	add.w	r8, r3, r2
 800864e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8008650:	1aa7      	subs	r7, r4, r2
 8008652:	ae20      	add	r6, sp, #128	; 0x80
 8008654:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8008658:	2500      	movs	r5, #0
 800865a:	4545      	cmp	r5, r8
 800865c:	dd13      	ble.n	8008686 <__kernel_rem_pio2+0x86>
 800865e:	9b06      	ldr	r3, [sp, #24]
 8008660:	aa20      	add	r2, sp, #128	; 0x80
 8008662:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8008666:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800866a:	f04f 0800 	mov.w	r8, #0
 800866e:	9b00      	ldr	r3, [sp, #0]
 8008670:	4598      	cmp	r8, r3
 8008672:	dc31      	bgt.n	80086d8 <__kernel_rem_pio2+0xd8>
 8008674:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 8008910 <__kernel_rem_pio2+0x310>
 8008678:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800867c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008680:	462f      	mov	r7, r5
 8008682:	2600      	movs	r6, #0
 8008684:	e01b      	b.n	80086be <__kernel_rem_pio2+0xbe>
 8008686:	42ef      	cmn	r7, r5
 8008688:	d407      	bmi.n	800869a <__kernel_rem_pio2+0x9a>
 800868a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800868e:	f7f7 ff49 	bl	8000524 <__aeabi_i2d>
 8008692:	e8e6 0102 	strd	r0, r1, [r6], #8
 8008696:	3501      	adds	r5, #1
 8008698:	e7df      	b.n	800865a <__kernel_rem_pio2+0x5a>
 800869a:	ec51 0b18 	vmov	r0, r1, d8
 800869e:	e7f8      	b.n	8008692 <__kernel_rem_pio2+0x92>
 80086a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80086a4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80086a8:	f7f7 ffa6 	bl	80005f8 <__aeabi_dmul>
 80086ac:	4602      	mov	r2, r0
 80086ae:	460b      	mov	r3, r1
 80086b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80086b4:	f7f7 fdea 	bl	800028c <__adddf3>
 80086b8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80086bc:	3601      	adds	r6, #1
 80086be:	9b05      	ldr	r3, [sp, #20]
 80086c0:	429e      	cmp	r6, r3
 80086c2:	f1a7 0708 	sub.w	r7, r7, #8
 80086c6:	ddeb      	ble.n	80086a0 <__kernel_rem_pio2+0xa0>
 80086c8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80086cc:	f108 0801 	add.w	r8, r8, #1
 80086d0:	ecab 7b02 	vstmia	fp!, {d7}
 80086d4:	3508      	adds	r5, #8
 80086d6:	e7ca      	b.n	800866e <__kernel_rem_pio2+0x6e>
 80086d8:	9b00      	ldr	r3, [sp, #0]
 80086da:	aa0c      	add	r2, sp, #48	; 0x30
 80086dc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80086e0:	930b      	str	r3, [sp, #44]	; 0x2c
 80086e2:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 80086e4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80086e8:	9c00      	ldr	r4, [sp, #0]
 80086ea:	930a      	str	r3, [sp, #40]	; 0x28
 80086ec:	00e3      	lsls	r3, r4, #3
 80086ee:	9308      	str	r3, [sp, #32]
 80086f0:	ab98      	add	r3, sp, #608	; 0x260
 80086f2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80086f6:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 80086fa:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 80086fe:	ab70      	add	r3, sp, #448	; 0x1c0
 8008700:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8008704:	46c3      	mov	fp, r8
 8008706:	46a1      	mov	r9, r4
 8008708:	f1b9 0f00 	cmp.w	r9, #0
 800870c:	f1a5 0508 	sub.w	r5, r5, #8
 8008710:	dc77      	bgt.n	8008802 <__kernel_rem_pio2+0x202>
 8008712:	ec47 6b10 	vmov	d0, r6, r7
 8008716:	4650      	mov	r0, sl
 8008718:	f000 fac2 	bl	8008ca0 <scalbn>
 800871c:	ec57 6b10 	vmov	r6, r7, d0
 8008720:	2200      	movs	r2, #0
 8008722:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8008726:	ee10 0a10 	vmov	r0, s0
 800872a:	4639      	mov	r1, r7
 800872c:	f7f7 ff64 	bl	80005f8 <__aeabi_dmul>
 8008730:	ec41 0b10 	vmov	d0, r0, r1
 8008734:	f000 fb34 	bl	8008da0 <floor>
 8008738:	4b7a      	ldr	r3, [pc, #488]	; (8008924 <__kernel_rem_pio2+0x324>)
 800873a:	ec51 0b10 	vmov	r0, r1, d0
 800873e:	2200      	movs	r2, #0
 8008740:	f7f7 ff5a 	bl	80005f8 <__aeabi_dmul>
 8008744:	4602      	mov	r2, r0
 8008746:	460b      	mov	r3, r1
 8008748:	4630      	mov	r0, r6
 800874a:	4639      	mov	r1, r7
 800874c:	f7f7 fd9c 	bl	8000288 <__aeabi_dsub>
 8008750:	460f      	mov	r7, r1
 8008752:	4606      	mov	r6, r0
 8008754:	f7f8 fa00 	bl	8000b58 <__aeabi_d2iz>
 8008758:	9002      	str	r0, [sp, #8]
 800875a:	f7f7 fee3 	bl	8000524 <__aeabi_i2d>
 800875e:	4602      	mov	r2, r0
 8008760:	460b      	mov	r3, r1
 8008762:	4630      	mov	r0, r6
 8008764:	4639      	mov	r1, r7
 8008766:	f7f7 fd8f 	bl	8000288 <__aeabi_dsub>
 800876a:	f1ba 0f00 	cmp.w	sl, #0
 800876e:	4606      	mov	r6, r0
 8008770:	460f      	mov	r7, r1
 8008772:	dd6d      	ble.n	8008850 <__kernel_rem_pio2+0x250>
 8008774:	1e61      	subs	r1, r4, #1
 8008776:	ab0c      	add	r3, sp, #48	; 0x30
 8008778:	9d02      	ldr	r5, [sp, #8]
 800877a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800877e:	f1ca 0018 	rsb	r0, sl, #24
 8008782:	fa43 f200 	asr.w	r2, r3, r0
 8008786:	4415      	add	r5, r2
 8008788:	4082      	lsls	r2, r0
 800878a:	1a9b      	subs	r3, r3, r2
 800878c:	aa0c      	add	r2, sp, #48	; 0x30
 800878e:	9502      	str	r5, [sp, #8]
 8008790:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8008794:	f1ca 0217 	rsb	r2, sl, #23
 8008798:	fa43 fb02 	asr.w	fp, r3, r2
 800879c:	f1bb 0f00 	cmp.w	fp, #0
 80087a0:	dd65      	ble.n	800886e <__kernel_rem_pio2+0x26e>
 80087a2:	9b02      	ldr	r3, [sp, #8]
 80087a4:	2200      	movs	r2, #0
 80087a6:	3301      	adds	r3, #1
 80087a8:	9302      	str	r3, [sp, #8]
 80087aa:	4615      	mov	r5, r2
 80087ac:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80087b0:	4294      	cmp	r4, r2
 80087b2:	f300 809f 	bgt.w	80088f4 <__kernel_rem_pio2+0x2f4>
 80087b6:	f1ba 0f00 	cmp.w	sl, #0
 80087ba:	dd07      	ble.n	80087cc <__kernel_rem_pio2+0x1cc>
 80087bc:	f1ba 0f01 	cmp.w	sl, #1
 80087c0:	f000 80c1 	beq.w	8008946 <__kernel_rem_pio2+0x346>
 80087c4:	f1ba 0f02 	cmp.w	sl, #2
 80087c8:	f000 80c7 	beq.w	800895a <__kernel_rem_pio2+0x35a>
 80087cc:	f1bb 0f02 	cmp.w	fp, #2
 80087d0:	d14d      	bne.n	800886e <__kernel_rem_pio2+0x26e>
 80087d2:	4632      	mov	r2, r6
 80087d4:	463b      	mov	r3, r7
 80087d6:	4954      	ldr	r1, [pc, #336]	; (8008928 <__kernel_rem_pio2+0x328>)
 80087d8:	2000      	movs	r0, #0
 80087da:	f7f7 fd55 	bl	8000288 <__aeabi_dsub>
 80087de:	4606      	mov	r6, r0
 80087e0:	460f      	mov	r7, r1
 80087e2:	2d00      	cmp	r5, #0
 80087e4:	d043      	beq.n	800886e <__kernel_rem_pio2+0x26e>
 80087e6:	4650      	mov	r0, sl
 80087e8:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 8008918 <__kernel_rem_pio2+0x318>
 80087ec:	f000 fa58 	bl	8008ca0 <scalbn>
 80087f0:	4630      	mov	r0, r6
 80087f2:	4639      	mov	r1, r7
 80087f4:	ec53 2b10 	vmov	r2, r3, d0
 80087f8:	f7f7 fd46 	bl	8000288 <__aeabi_dsub>
 80087fc:	4606      	mov	r6, r0
 80087fe:	460f      	mov	r7, r1
 8008800:	e035      	b.n	800886e <__kernel_rem_pio2+0x26e>
 8008802:	4b4a      	ldr	r3, [pc, #296]	; (800892c <__kernel_rem_pio2+0x32c>)
 8008804:	2200      	movs	r2, #0
 8008806:	4630      	mov	r0, r6
 8008808:	4639      	mov	r1, r7
 800880a:	f7f7 fef5 	bl	80005f8 <__aeabi_dmul>
 800880e:	f7f8 f9a3 	bl	8000b58 <__aeabi_d2iz>
 8008812:	f7f7 fe87 	bl	8000524 <__aeabi_i2d>
 8008816:	4602      	mov	r2, r0
 8008818:	460b      	mov	r3, r1
 800881a:	ec43 2b18 	vmov	d8, r2, r3
 800881e:	4b44      	ldr	r3, [pc, #272]	; (8008930 <__kernel_rem_pio2+0x330>)
 8008820:	2200      	movs	r2, #0
 8008822:	f7f7 fee9 	bl	80005f8 <__aeabi_dmul>
 8008826:	4602      	mov	r2, r0
 8008828:	460b      	mov	r3, r1
 800882a:	4630      	mov	r0, r6
 800882c:	4639      	mov	r1, r7
 800882e:	f7f7 fd2b 	bl	8000288 <__aeabi_dsub>
 8008832:	f7f8 f991 	bl	8000b58 <__aeabi_d2iz>
 8008836:	e9d5 2300 	ldrd	r2, r3, [r5]
 800883a:	f84b 0b04 	str.w	r0, [fp], #4
 800883e:	ec51 0b18 	vmov	r0, r1, d8
 8008842:	f7f7 fd23 	bl	800028c <__adddf3>
 8008846:	f109 39ff 	add.w	r9, r9, #4294967295
 800884a:	4606      	mov	r6, r0
 800884c:	460f      	mov	r7, r1
 800884e:	e75b      	b.n	8008708 <__kernel_rem_pio2+0x108>
 8008850:	d106      	bne.n	8008860 <__kernel_rem_pio2+0x260>
 8008852:	1e63      	subs	r3, r4, #1
 8008854:	aa0c      	add	r2, sp, #48	; 0x30
 8008856:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800885a:	ea4f 5be3 	mov.w	fp, r3, asr #23
 800885e:	e79d      	b.n	800879c <__kernel_rem_pio2+0x19c>
 8008860:	4b34      	ldr	r3, [pc, #208]	; (8008934 <__kernel_rem_pio2+0x334>)
 8008862:	2200      	movs	r2, #0
 8008864:	f7f8 f94e 	bl	8000b04 <__aeabi_dcmpge>
 8008868:	2800      	cmp	r0, #0
 800886a:	d140      	bne.n	80088ee <__kernel_rem_pio2+0x2ee>
 800886c:	4683      	mov	fp, r0
 800886e:	2200      	movs	r2, #0
 8008870:	2300      	movs	r3, #0
 8008872:	4630      	mov	r0, r6
 8008874:	4639      	mov	r1, r7
 8008876:	f7f8 f927 	bl	8000ac8 <__aeabi_dcmpeq>
 800887a:	2800      	cmp	r0, #0
 800887c:	f000 80c1 	beq.w	8008a02 <__kernel_rem_pio2+0x402>
 8008880:	1e65      	subs	r5, r4, #1
 8008882:	462b      	mov	r3, r5
 8008884:	2200      	movs	r2, #0
 8008886:	9900      	ldr	r1, [sp, #0]
 8008888:	428b      	cmp	r3, r1
 800888a:	da6d      	bge.n	8008968 <__kernel_rem_pio2+0x368>
 800888c:	2a00      	cmp	r2, #0
 800888e:	f000 808a 	beq.w	80089a6 <__kernel_rem_pio2+0x3a6>
 8008892:	ab0c      	add	r3, sp, #48	; 0x30
 8008894:	f1aa 0a18 	sub.w	sl, sl, #24
 8008898:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800889c:	2b00      	cmp	r3, #0
 800889e:	f000 80ae 	beq.w	80089fe <__kernel_rem_pio2+0x3fe>
 80088a2:	4650      	mov	r0, sl
 80088a4:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 8008918 <__kernel_rem_pio2+0x318>
 80088a8:	f000 f9fa 	bl	8008ca0 <scalbn>
 80088ac:	1c6b      	adds	r3, r5, #1
 80088ae:	00da      	lsls	r2, r3, #3
 80088b0:	9205      	str	r2, [sp, #20]
 80088b2:	ec57 6b10 	vmov	r6, r7, d0
 80088b6:	aa70      	add	r2, sp, #448	; 0x1c0
 80088b8:	f8df 9070 	ldr.w	r9, [pc, #112]	; 800892c <__kernel_rem_pio2+0x32c>
 80088bc:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 80088c0:	462c      	mov	r4, r5
 80088c2:	f04f 0800 	mov.w	r8, #0
 80088c6:	2c00      	cmp	r4, #0
 80088c8:	f280 80d4 	bge.w	8008a74 <__kernel_rem_pio2+0x474>
 80088cc:	462c      	mov	r4, r5
 80088ce:	2c00      	cmp	r4, #0
 80088d0:	f2c0 8102 	blt.w	8008ad8 <__kernel_rem_pio2+0x4d8>
 80088d4:	4b18      	ldr	r3, [pc, #96]	; (8008938 <__kernel_rem_pio2+0x338>)
 80088d6:	461e      	mov	r6, r3
 80088d8:	ab70      	add	r3, sp, #448	; 0x1c0
 80088da:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 80088de:	1b2b      	subs	r3, r5, r4
 80088e0:	f04f 0900 	mov.w	r9, #0
 80088e4:	f04f 0a00 	mov.w	sl, #0
 80088e8:	2700      	movs	r7, #0
 80088ea:	9306      	str	r3, [sp, #24]
 80088ec:	e0e6      	b.n	8008abc <__kernel_rem_pio2+0x4bc>
 80088ee:	f04f 0b02 	mov.w	fp, #2
 80088f2:	e756      	b.n	80087a2 <__kernel_rem_pio2+0x1a2>
 80088f4:	f8d8 3000 	ldr.w	r3, [r8]
 80088f8:	bb05      	cbnz	r5, 800893c <__kernel_rem_pio2+0x33c>
 80088fa:	b123      	cbz	r3, 8008906 <__kernel_rem_pio2+0x306>
 80088fc:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8008900:	f8c8 3000 	str.w	r3, [r8]
 8008904:	2301      	movs	r3, #1
 8008906:	3201      	adds	r2, #1
 8008908:	f108 0804 	add.w	r8, r8, #4
 800890c:	461d      	mov	r5, r3
 800890e:	e74f      	b.n	80087b0 <__kernel_rem_pio2+0x1b0>
	...
 800891c:	3ff00000 	.word	0x3ff00000
 8008920:	08009a10 	.word	0x08009a10
 8008924:	40200000 	.word	0x40200000
 8008928:	3ff00000 	.word	0x3ff00000
 800892c:	3e700000 	.word	0x3e700000
 8008930:	41700000 	.word	0x41700000
 8008934:	3fe00000 	.word	0x3fe00000
 8008938:	080099d0 	.word	0x080099d0
 800893c:	1acb      	subs	r3, r1, r3
 800893e:	f8c8 3000 	str.w	r3, [r8]
 8008942:	462b      	mov	r3, r5
 8008944:	e7df      	b.n	8008906 <__kernel_rem_pio2+0x306>
 8008946:	1e62      	subs	r2, r4, #1
 8008948:	ab0c      	add	r3, sp, #48	; 0x30
 800894a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800894e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8008952:	a90c      	add	r1, sp, #48	; 0x30
 8008954:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8008958:	e738      	b.n	80087cc <__kernel_rem_pio2+0x1cc>
 800895a:	1e62      	subs	r2, r4, #1
 800895c:	ab0c      	add	r3, sp, #48	; 0x30
 800895e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008962:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8008966:	e7f4      	b.n	8008952 <__kernel_rem_pio2+0x352>
 8008968:	a90c      	add	r1, sp, #48	; 0x30
 800896a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800896e:	3b01      	subs	r3, #1
 8008970:	430a      	orrs	r2, r1
 8008972:	e788      	b.n	8008886 <__kernel_rem_pio2+0x286>
 8008974:	3301      	adds	r3, #1
 8008976:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800897a:	2900      	cmp	r1, #0
 800897c:	d0fa      	beq.n	8008974 <__kernel_rem_pio2+0x374>
 800897e:	9a08      	ldr	r2, [sp, #32]
 8008980:	f502 7218 	add.w	r2, r2, #608	; 0x260
 8008984:	446a      	add	r2, sp
 8008986:	3a98      	subs	r2, #152	; 0x98
 8008988:	9208      	str	r2, [sp, #32]
 800898a:	9a06      	ldr	r2, [sp, #24]
 800898c:	a920      	add	r1, sp, #128	; 0x80
 800898e:	18a2      	adds	r2, r4, r2
 8008990:	18e3      	adds	r3, r4, r3
 8008992:	f104 0801 	add.w	r8, r4, #1
 8008996:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 800899a:	9302      	str	r3, [sp, #8]
 800899c:	9b02      	ldr	r3, [sp, #8]
 800899e:	4543      	cmp	r3, r8
 80089a0:	da04      	bge.n	80089ac <__kernel_rem_pio2+0x3ac>
 80089a2:	461c      	mov	r4, r3
 80089a4:	e6a2      	b.n	80086ec <__kernel_rem_pio2+0xec>
 80089a6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80089a8:	2301      	movs	r3, #1
 80089aa:	e7e4      	b.n	8008976 <__kernel_rem_pio2+0x376>
 80089ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80089ae:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80089b2:	f7f7 fdb7 	bl	8000524 <__aeabi_i2d>
 80089b6:	e8e5 0102 	strd	r0, r1, [r5], #8
 80089ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089bc:	46ab      	mov	fp, r5
 80089be:	461c      	mov	r4, r3
 80089c0:	f04f 0900 	mov.w	r9, #0
 80089c4:	2600      	movs	r6, #0
 80089c6:	2700      	movs	r7, #0
 80089c8:	9b05      	ldr	r3, [sp, #20]
 80089ca:	4599      	cmp	r9, r3
 80089cc:	dd06      	ble.n	80089dc <__kernel_rem_pio2+0x3dc>
 80089ce:	9b08      	ldr	r3, [sp, #32]
 80089d0:	e8e3 6702 	strd	r6, r7, [r3], #8
 80089d4:	f108 0801 	add.w	r8, r8, #1
 80089d8:	9308      	str	r3, [sp, #32]
 80089da:	e7df      	b.n	800899c <__kernel_rem_pio2+0x39c>
 80089dc:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 80089e0:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80089e4:	f7f7 fe08 	bl	80005f8 <__aeabi_dmul>
 80089e8:	4602      	mov	r2, r0
 80089ea:	460b      	mov	r3, r1
 80089ec:	4630      	mov	r0, r6
 80089ee:	4639      	mov	r1, r7
 80089f0:	f7f7 fc4c 	bl	800028c <__adddf3>
 80089f4:	f109 0901 	add.w	r9, r9, #1
 80089f8:	4606      	mov	r6, r0
 80089fa:	460f      	mov	r7, r1
 80089fc:	e7e4      	b.n	80089c8 <__kernel_rem_pio2+0x3c8>
 80089fe:	3d01      	subs	r5, #1
 8008a00:	e747      	b.n	8008892 <__kernel_rem_pio2+0x292>
 8008a02:	ec47 6b10 	vmov	d0, r6, r7
 8008a06:	f1ca 0000 	rsb	r0, sl, #0
 8008a0a:	f000 f949 	bl	8008ca0 <scalbn>
 8008a0e:	ec57 6b10 	vmov	r6, r7, d0
 8008a12:	4ba0      	ldr	r3, [pc, #640]	; (8008c94 <__kernel_rem_pio2+0x694>)
 8008a14:	ee10 0a10 	vmov	r0, s0
 8008a18:	2200      	movs	r2, #0
 8008a1a:	4639      	mov	r1, r7
 8008a1c:	f7f8 f872 	bl	8000b04 <__aeabi_dcmpge>
 8008a20:	b1f8      	cbz	r0, 8008a62 <__kernel_rem_pio2+0x462>
 8008a22:	4b9d      	ldr	r3, [pc, #628]	; (8008c98 <__kernel_rem_pio2+0x698>)
 8008a24:	2200      	movs	r2, #0
 8008a26:	4630      	mov	r0, r6
 8008a28:	4639      	mov	r1, r7
 8008a2a:	f7f7 fde5 	bl	80005f8 <__aeabi_dmul>
 8008a2e:	f7f8 f893 	bl	8000b58 <__aeabi_d2iz>
 8008a32:	4680      	mov	r8, r0
 8008a34:	f7f7 fd76 	bl	8000524 <__aeabi_i2d>
 8008a38:	4b96      	ldr	r3, [pc, #600]	; (8008c94 <__kernel_rem_pio2+0x694>)
 8008a3a:	2200      	movs	r2, #0
 8008a3c:	f7f7 fddc 	bl	80005f8 <__aeabi_dmul>
 8008a40:	460b      	mov	r3, r1
 8008a42:	4602      	mov	r2, r0
 8008a44:	4639      	mov	r1, r7
 8008a46:	4630      	mov	r0, r6
 8008a48:	f7f7 fc1e 	bl	8000288 <__aeabi_dsub>
 8008a4c:	f7f8 f884 	bl	8000b58 <__aeabi_d2iz>
 8008a50:	1c65      	adds	r5, r4, #1
 8008a52:	ab0c      	add	r3, sp, #48	; 0x30
 8008a54:	f10a 0a18 	add.w	sl, sl, #24
 8008a58:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8008a5c:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8008a60:	e71f      	b.n	80088a2 <__kernel_rem_pio2+0x2a2>
 8008a62:	4630      	mov	r0, r6
 8008a64:	4639      	mov	r1, r7
 8008a66:	f7f8 f877 	bl	8000b58 <__aeabi_d2iz>
 8008a6a:	ab0c      	add	r3, sp, #48	; 0x30
 8008a6c:	4625      	mov	r5, r4
 8008a6e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8008a72:	e716      	b.n	80088a2 <__kernel_rem_pio2+0x2a2>
 8008a74:	ab0c      	add	r3, sp, #48	; 0x30
 8008a76:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8008a7a:	f7f7 fd53 	bl	8000524 <__aeabi_i2d>
 8008a7e:	4632      	mov	r2, r6
 8008a80:	463b      	mov	r3, r7
 8008a82:	f7f7 fdb9 	bl	80005f8 <__aeabi_dmul>
 8008a86:	4642      	mov	r2, r8
 8008a88:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8008a8c:	464b      	mov	r3, r9
 8008a8e:	4630      	mov	r0, r6
 8008a90:	4639      	mov	r1, r7
 8008a92:	f7f7 fdb1 	bl	80005f8 <__aeabi_dmul>
 8008a96:	3c01      	subs	r4, #1
 8008a98:	4606      	mov	r6, r0
 8008a9a:	460f      	mov	r7, r1
 8008a9c:	e713      	b.n	80088c6 <__kernel_rem_pio2+0x2c6>
 8008a9e:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 8008aa2:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 8008aa6:	f7f7 fda7 	bl	80005f8 <__aeabi_dmul>
 8008aaa:	4602      	mov	r2, r0
 8008aac:	460b      	mov	r3, r1
 8008aae:	4648      	mov	r0, r9
 8008ab0:	4651      	mov	r1, sl
 8008ab2:	f7f7 fbeb 	bl	800028c <__adddf3>
 8008ab6:	3701      	adds	r7, #1
 8008ab8:	4681      	mov	r9, r0
 8008aba:	468a      	mov	sl, r1
 8008abc:	9b00      	ldr	r3, [sp, #0]
 8008abe:	429f      	cmp	r7, r3
 8008ac0:	dc02      	bgt.n	8008ac8 <__kernel_rem_pio2+0x4c8>
 8008ac2:	9b06      	ldr	r3, [sp, #24]
 8008ac4:	429f      	cmp	r7, r3
 8008ac6:	ddea      	ble.n	8008a9e <__kernel_rem_pio2+0x49e>
 8008ac8:	9a06      	ldr	r2, [sp, #24]
 8008aca:	ab48      	add	r3, sp, #288	; 0x120
 8008acc:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 8008ad0:	e9c6 9a00 	strd	r9, sl, [r6]
 8008ad4:	3c01      	subs	r4, #1
 8008ad6:	e6fa      	b.n	80088ce <__kernel_rem_pio2+0x2ce>
 8008ad8:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8008ada:	2b02      	cmp	r3, #2
 8008adc:	dc0b      	bgt.n	8008af6 <__kernel_rem_pio2+0x4f6>
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	dc39      	bgt.n	8008b56 <__kernel_rem_pio2+0x556>
 8008ae2:	d05d      	beq.n	8008ba0 <__kernel_rem_pio2+0x5a0>
 8008ae4:	9b02      	ldr	r3, [sp, #8]
 8008ae6:	f003 0007 	and.w	r0, r3, #7
 8008aea:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8008aee:	ecbd 8b02 	vpop	{d8}
 8008af2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008af6:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8008af8:	2b03      	cmp	r3, #3
 8008afa:	d1f3      	bne.n	8008ae4 <__kernel_rem_pio2+0x4e4>
 8008afc:	9b05      	ldr	r3, [sp, #20]
 8008afe:	9500      	str	r5, [sp, #0]
 8008b00:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8008b04:	eb0d 0403 	add.w	r4, sp, r3
 8008b08:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 8008b0c:	46a2      	mov	sl, r4
 8008b0e:	9b00      	ldr	r3, [sp, #0]
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	f1aa 0a08 	sub.w	sl, sl, #8
 8008b16:	dc69      	bgt.n	8008bec <__kernel_rem_pio2+0x5ec>
 8008b18:	46aa      	mov	sl, r5
 8008b1a:	f1ba 0f01 	cmp.w	sl, #1
 8008b1e:	f1a4 0408 	sub.w	r4, r4, #8
 8008b22:	f300 8083 	bgt.w	8008c2c <__kernel_rem_pio2+0x62c>
 8008b26:	9c05      	ldr	r4, [sp, #20]
 8008b28:	ab48      	add	r3, sp, #288	; 0x120
 8008b2a:	441c      	add	r4, r3
 8008b2c:	2000      	movs	r0, #0
 8008b2e:	2100      	movs	r1, #0
 8008b30:	2d01      	cmp	r5, #1
 8008b32:	f300 809a 	bgt.w	8008c6a <__kernel_rem_pio2+0x66a>
 8008b36:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 8008b3a:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8008b3e:	f1bb 0f00 	cmp.w	fp, #0
 8008b42:	f040 8098 	bne.w	8008c76 <__kernel_rem_pio2+0x676>
 8008b46:	9b04      	ldr	r3, [sp, #16]
 8008b48:	e9c3 7800 	strd	r7, r8, [r3]
 8008b4c:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8008b50:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8008b54:	e7c6      	b.n	8008ae4 <__kernel_rem_pio2+0x4e4>
 8008b56:	9e05      	ldr	r6, [sp, #20]
 8008b58:	ab48      	add	r3, sp, #288	; 0x120
 8008b5a:	441e      	add	r6, r3
 8008b5c:	462c      	mov	r4, r5
 8008b5e:	2000      	movs	r0, #0
 8008b60:	2100      	movs	r1, #0
 8008b62:	2c00      	cmp	r4, #0
 8008b64:	da33      	bge.n	8008bce <__kernel_rem_pio2+0x5ce>
 8008b66:	f1bb 0f00 	cmp.w	fp, #0
 8008b6a:	d036      	beq.n	8008bda <__kernel_rem_pio2+0x5da>
 8008b6c:	4602      	mov	r2, r0
 8008b6e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008b72:	9c04      	ldr	r4, [sp, #16]
 8008b74:	e9c4 2300 	strd	r2, r3, [r4]
 8008b78:	4602      	mov	r2, r0
 8008b7a:	460b      	mov	r3, r1
 8008b7c:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8008b80:	f7f7 fb82 	bl	8000288 <__aeabi_dsub>
 8008b84:	ae4a      	add	r6, sp, #296	; 0x128
 8008b86:	2401      	movs	r4, #1
 8008b88:	42a5      	cmp	r5, r4
 8008b8a:	da29      	bge.n	8008be0 <__kernel_rem_pio2+0x5e0>
 8008b8c:	f1bb 0f00 	cmp.w	fp, #0
 8008b90:	d002      	beq.n	8008b98 <__kernel_rem_pio2+0x598>
 8008b92:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008b96:	4619      	mov	r1, r3
 8008b98:	9b04      	ldr	r3, [sp, #16]
 8008b9a:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8008b9e:	e7a1      	b.n	8008ae4 <__kernel_rem_pio2+0x4e4>
 8008ba0:	9c05      	ldr	r4, [sp, #20]
 8008ba2:	ab48      	add	r3, sp, #288	; 0x120
 8008ba4:	441c      	add	r4, r3
 8008ba6:	2000      	movs	r0, #0
 8008ba8:	2100      	movs	r1, #0
 8008baa:	2d00      	cmp	r5, #0
 8008bac:	da09      	bge.n	8008bc2 <__kernel_rem_pio2+0x5c2>
 8008bae:	f1bb 0f00 	cmp.w	fp, #0
 8008bb2:	d002      	beq.n	8008bba <__kernel_rem_pio2+0x5ba>
 8008bb4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008bb8:	4619      	mov	r1, r3
 8008bba:	9b04      	ldr	r3, [sp, #16]
 8008bbc:	e9c3 0100 	strd	r0, r1, [r3]
 8008bc0:	e790      	b.n	8008ae4 <__kernel_rem_pio2+0x4e4>
 8008bc2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8008bc6:	f7f7 fb61 	bl	800028c <__adddf3>
 8008bca:	3d01      	subs	r5, #1
 8008bcc:	e7ed      	b.n	8008baa <__kernel_rem_pio2+0x5aa>
 8008bce:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8008bd2:	f7f7 fb5b 	bl	800028c <__adddf3>
 8008bd6:	3c01      	subs	r4, #1
 8008bd8:	e7c3      	b.n	8008b62 <__kernel_rem_pio2+0x562>
 8008bda:	4602      	mov	r2, r0
 8008bdc:	460b      	mov	r3, r1
 8008bde:	e7c8      	b.n	8008b72 <__kernel_rem_pio2+0x572>
 8008be0:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8008be4:	f7f7 fb52 	bl	800028c <__adddf3>
 8008be8:	3401      	adds	r4, #1
 8008bea:	e7cd      	b.n	8008b88 <__kernel_rem_pio2+0x588>
 8008bec:	e9da 8900 	ldrd	r8, r9, [sl]
 8008bf0:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8008bf4:	9b00      	ldr	r3, [sp, #0]
 8008bf6:	3b01      	subs	r3, #1
 8008bf8:	9300      	str	r3, [sp, #0]
 8008bfa:	4632      	mov	r2, r6
 8008bfc:	463b      	mov	r3, r7
 8008bfe:	4640      	mov	r0, r8
 8008c00:	4649      	mov	r1, r9
 8008c02:	f7f7 fb43 	bl	800028c <__adddf3>
 8008c06:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008c0a:	4602      	mov	r2, r0
 8008c0c:	460b      	mov	r3, r1
 8008c0e:	4640      	mov	r0, r8
 8008c10:	4649      	mov	r1, r9
 8008c12:	f7f7 fb39 	bl	8000288 <__aeabi_dsub>
 8008c16:	4632      	mov	r2, r6
 8008c18:	463b      	mov	r3, r7
 8008c1a:	f7f7 fb37 	bl	800028c <__adddf3>
 8008c1e:	ed9d 7b06 	vldr	d7, [sp, #24]
 8008c22:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008c26:	ed8a 7b00 	vstr	d7, [sl]
 8008c2a:	e770      	b.n	8008b0e <__kernel_rem_pio2+0x50e>
 8008c2c:	e9d4 8900 	ldrd	r8, r9, [r4]
 8008c30:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8008c34:	4640      	mov	r0, r8
 8008c36:	4632      	mov	r2, r6
 8008c38:	463b      	mov	r3, r7
 8008c3a:	4649      	mov	r1, r9
 8008c3c:	f7f7 fb26 	bl	800028c <__adddf3>
 8008c40:	e9cd 0100 	strd	r0, r1, [sp]
 8008c44:	4602      	mov	r2, r0
 8008c46:	460b      	mov	r3, r1
 8008c48:	4640      	mov	r0, r8
 8008c4a:	4649      	mov	r1, r9
 8008c4c:	f7f7 fb1c 	bl	8000288 <__aeabi_dsub>
 8008c50:	4632      	mov	r2, r6
 8008c52:	463b      	mov	r3, r7
 8008c54:	f7f7 fb1a 	bl	800028c <__adddf3>
 8008c58:	ed9d 7b00 	vldr	d7, [sp]
 8008c5c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008c60:	ed84 7b00 	vstr	d7, [r4]
 8008c64:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008c68:	e757      	b.n	8008b1a <__kernel_rem_pio2+0x51a>
 8008c6a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8008c6e:	f7f7 fb0d 	bl	800028c <__adddf3>
 8008c72:	3d01      	subs	r5, #1
 8008c74:	e75c      	b.n	8008b30 <__kernel_rem_pio2+0x530>
 8008c76:	9b04      	ldr	r3, [sp, #16]
 8008c78:	9a04      	ldr	r2, [sp, #16]
 8008c7a:	601f      	str	r7, [r3, #0]
 8008c7c:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8008c80:	605c      	str	r4, [r3, #4]
 8008c82:	609d      	str	r5, [r3, #8]
 8008c84:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8008c88:	60d3      	str	r3, [r2, #12]
 8008c8a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008c8e:	6110      	str	r0, [r2, #16]
 8008c90:	6153      	str	r3, [r2, #20]
 8008c92:	e727      	b.n	8008ae4 <__kernel_rem_pio2+0x4e4>
 8008c94:	41700000 	.word	0x41700000
 8008c98:	3e700000 	.word	0x3e700000
 8008c9c:	00000000 	.word	0x00000000

08008ca0 <scalbn>:
 8008ca0:	b570      	push	{r4, r5, r6, lr}
 8008ca2:	ec55 4b10 	vmov	r4, r5, d0
 8008ca6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8008caa:	4606      	mov	r6, r0
 8008cac:	462b      	mov	r3, r5
 8008cae:	b999      	cbnz	r1, 8008cd8 <scalbn+0x38>
 8008cb0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8008cb4:	4323      	orrs	r3, r4
 8008cb6:	d03f      	beq.n	8008d38 <scalbn+0x98>
 8008cb8:	4b35      	ldr	r3, [pc, #212]	; (8008d90 <scalbn+0xf0>)
 8008cba:	4629      	mov	r1, r5
 8008cbc:	ee10 0a10 	vmov	r0, s0
 8008cc0:	2200      	movs	r2, #0
 8008cc2:	f7f7 fc99 	bl	80005f8 <__aeabi_dmul>
 8008cc6:	4b33      	ldr	r3, [pc, #204]	; (8008d94 <scalbn+0xf4>)
 8008cc8:	429e      	cmp	r6, r3
 8008cca:	4604      	mov	r4, r0
 8008ccc:	460d      	mov	r5, r1
 8008cce:	da10      	bge.n	8008cf2 <scalbn+0x52>
 8008cd0:	a327      	add	r3, pc, #156	; (adr r3, 8008d70 <scalbn+0xd0>)
 8008cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cd6:	e01f      	b.n	8008d18 <scalbn+0x78>
 8008cd8:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8008cdc:	4291      	cmp	r1, r2
 8008cde:	d10c      	bne.n	8008cfa <scalbn+0x5a>
 8008ce0:	ee10 2a10 	vmov	r2, s0
 8008ce4:	4620      	mov	r0, r4
 8008ce6:	4629      	mov	r1, r5
 8008ce8:	f7f7 fad0 	bl	800028c <__adddf3>
 8008cec:	4604      	mov	r4, r0
 8008cee:	460d      	mov	r5, r1
 8008cf0:	e022      	b.n	8008d38 <scalbn+0x98>
 8008cf2:	460b      	mov	r3, r1
 8008cf4:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8008cf8:	3936      	subs	r1, #54	; 0x36
 8008cfa:	f24c 3250 	movw	r2, #50000	; 0xc350
 8008cfe:	4296      	cmp	r6, r2
 8008d00:	dd0d      	ble.n	8008d1e <scalbn+0x7e>
 8008d02:	2d00      	cmp	r5, #0
 8008d04:	a11c      	add	r1, pc, #112	; (adr r1, 8008d78 <scalbn+0xd8>)
 8008d06:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008d0a:	da02      	bge.n	8008d12 <scalbn+0x72>
 8008d0c:	a11c      	add	r1, pc, #112	; (adr r1, 8008d80 <scalbn+0xe0>)
 8008d0e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008d12:	a319      	add	r3, pc, #100	; (adr r3, 8008d78 <scalbn+0xd8>)
 8008d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d18:	f7f7 fc6e 	bl	80005f8 <__aeabi_dmul>
 8008d1c:	e7e6      	b.n	8008cec <scalbn+0x4c>
 8008d1e:	1872      	adds	r2, r6, r1
 8008d20:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8008d24:	428a      	cmp	r2, r1
 8008d26:	dcec      	bgt.n	8008d02 <scalbn+0x62>
 8008d28:	2a00      	cmp	r2, #0
 8008d2a:	dd08      	ble.n	8008d3e <scalbn+0x9e>
 8008d2c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008d30:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008d34:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008d38:	ec45 4b10 	vmov	d0, r4, r5
 8008d3c:	bd70      	pop	{r4, r5, r6, pc}
 8008d3e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8008d42:	da08      	bge.n	8008d56 <scalbn+0xb6>
 8008d44:	2d00      	cmp	r5, #0
 8008d46:	a10a      	add	r1, pc, #40	; (adr r1, 8008d70 <scalbn+0xd0>)
 8008d48:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008d4c:	dac0      	bge.n	8008cd0 <scalbn+0x30>
 8008d4e:	a10e      	add	r1, pc, #56	; (adr r1, 8008d88 <scalbn+0xe8>)
 8008d50:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008d54:	e7bc      	b.n	8008cd0 <scalbn+0x30>
 8008d56:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008d5a:	3236      	adds	r2, #54	; 0x36
 8008d5c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008d60:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8008d64:	4620      	mov	r0, r4
 8008d66:	4b0c      	ldr	r3, [pc, #48]	; (8008d98 <scalbn+0xf8>)
 8008d68:	2200      	movs	r2, #0
 8008d6a:	e7d5      	b.n	8008d18 <scalbn+0x78>
 8008d6c:	f3af 8000 	nop.w
 8008d70:	c2f8f359 	.word	0xc2f8f359
 8008d74:	01a56e1f 	.word	0x01a56e1f
 8008d78:	8800759c 	.word	0x8800759c
 8008d7c:	7e37e43c 	.word	0x7e37e43c
 8008d80:	8800759c 	.word	0x8800759c
 8008d84:	fe37e43c 	.word	0xfe37e43c
 8008d88:	c2f8f359 	.word	0xc2f8f359
 8008d8c:	81a56e1f 	.word	0x81a56e1f
 8008d90:	43500000 	.word	0x43500000
 8008d94:	ffff3cb0 	.word	0xffff3cb0
 8008d98:	3c900000 	.word	0x3c900000
 8008d9c:	00000000 	.word	0x00000000

08008da0 <floor>:
 8008da0:	ec51 0b10 	vmov	r0, r1, d0
 8008da4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008da8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008dac:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 8008db0:	2e13      	cmp	r6, #19
 8008db2:	ee10 5a10 	vmov	r5, s0
 8008db6:	ee10 8a10 	vmov	r8, s0
 8008dba:	460c      	mov	r4, r1
 8008dbc:	dc31      	bgt.n	8008e22 <floor+0x82>
 8008dbe:	2e00      	cmp	r6, #0
 8008dc0:	da14      	bge.n	8008dec <floor+0x4c>
 8008dc2:	a333      	add	r3, pc, #204	; (adr r3, 8008e90 <floor+0xf0>)
 8008dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dc8:	f7f7 fa60 	bl	800028c <__adddf3>
 8008dcc:	2200      	movs	r2, #0
 8008dce:	2300      	movs	r3, #0
 8008dd0:	f7f7 fea2 	bl	8000b18 <__aeabi_dcmpgt>
 8008dd4:	b138      	cbz	r0, 8008de6 <floor+0x46>
 8008dd6:	2c00      	cmp	r4, #0
 8008dd8:	da53      	bge.n	8008e82 <floor+0xe2>
 8008dda:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8008dde:	4325      	orrs	r5, r4
 8008de0:	d052      	beq.n	8008e88 <floor+0xe8>
 8008de2:	4c2d      	ldr	r4, [pc, #180]	; (8008e98 <floor+0xf8>)
 8008de4:	2500      	movs	r5, #0
 8008de6:	4621      	mov	r1, r4
 8008de8:	4628      	mov	r0, r5
 8008dea:	e024      	b.n	8008e36 <floor+0x96>
 8008dec:	4f2b      	ldr	r7, [pc, #172]	; (8008e9c <floor+0xfc>)
 8008dee:	4137      	asrs	r7, r6
 8008df0:	ea01 0307 	and.w	r3, r1, r7
 8008df4:	4303      	orrs	r3, r0
 8008df6:	d01e      	beq.n	8008e36 <floor+0x96>
 8008df8:	a325      	add	r3, pc, #148	; (adr r3, 8008e90 <floor+0xf0>)
 8008dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dfe:	f7f7 fa45 	bl	800028c <__adddf3>
 8008e02:	2200      	movs	r2, #0
 8008e04:	2300      	movs	r3, #0
 8008e06:	f7f7 fe87 	bl	8000b18 <__aeabi_dcmpgt>
 8008e0a:	2800      	cmp	r0, #0
 8008e0c:	d0eb      	beq.n	8008de6 <floor+0x46>
 8008e0e:	2c00      	cmp	r4, #0
 8008e10:	bfbe      	ittt	lt
 8008e12:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8008e16:	4133      	asrlt	r3, r6
 8008e18:	18e4      	addlt	r4, r4, r3
 8008e1a:	ea24 0407 	bic.w	r4, r4, r7
 8008e1e:	2500      	movs	r5, #0
 8008e20:	e7e1      	b.n	8008de6 <floor+0x46>
 8008e22:	2e33      	cmp	r6, #51	; 0x33
 8008e24:	dd0b      	ble.n	8008e3e <floor+0x9e>
 8008e26:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8008e2a:	d104      	bne.n	8008e36 <floor+0x96>
 8008e2c:	ee10 2a10 	vmov	r2, s0
 8008e30:	460b      	mov	r3, r1
 8008e32:	f7f7 fa2b 	bl	800028c <__adddf3>
 8008e36:	ec41 0b10 	vmov	d0, r0, r1
 8008e3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e3e:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 8008e42:	f04f 37ff 	mov.w	r7, #4294967295
 8008e46:	40df      	lsrs	r7, r3
 8008e48:	4238      	tst	r0, r7
 8008e4a:	d0f4      	beq.n	8008e36 <floor+0x96>
 8008e4c:	a310      	add	r3, pc, #64	; (adr r3, 8008e90 <floor+0xf0>)
 8008e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e52:	f7f7 fa1b 	bl	800028c <__adddf3>
 8008e56:	2200      	movs	r2, #0
 8008e58:	2300      	movs	r3, #0
 8008e5a:	f7f7 fe5d 	bl	8000b18 <__aeabi_dcmpgt>
 8008e5e:	2800      	cmp	r0, #0
 8008e60:	d0c1      	beq.n	8008de6 <floor+0x46>
 8008e62:	2c00      	cmp	r4, #0
 8008e64:	da0a      	bge.n	8008e7c <floor+0xdc>
 8008e66:	2e14      	cmp	r6, #20
 8008e68:	d101      	bne.n	8008e6e <floor+0xce>
 8008e6a:	3401      	adds	r4, #1
 8008e6c:	e006      	b.n	8008e7c <floor+0xdc>
 8008e6e:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8008e72:	2301      	movs	r3, #1
 8008e74:	40b3      	lsls	r3, r6
 8008e76:	441d      	add	r5, r3
 8008e78:	45a8      	cmp	r8, r5
 8008e7a:	d8f6      	bhi.n	8008e6a <floor+0xca>
 8008e7c:	ea25 0507 	bic.w	r5, r5, r7
 8008e80:	e7b1      	b.n	8008de6 <floor+0x46>
 8008e82:	2500      	movs	r5, #0
 8008e84:	462c      	mov	r4, r5
 8008e86:	e7ae      	b.n	8008de6 <floor+0x46>
 8008e88:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8008e8c:	e7ab      	b.n	8008de6 <floor+0x46>
 8008e8e:	bf00      	nop
 8008e90:	8800759c 	.word	0x8800759c
 8008e94:	7e37e43c 	.word	0x7e37e43c
 8008e98:	bff00000 	.word	0xbff00000
 8008e9c:	000fffff 	.word	0x000fffff

08008ea0 <_init>:
 8008ea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ea2:	bf00      	nop
 8008ea4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ea6:	bc08      	pop	{r3}
 8008ea8:	469e      	mov	lr, r3
 8008eaa:	4770      	bx	lr

08008eac <_fini>:
 8008eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008eae:	bf00      	nop
 8008eb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008eb2:	bc08      	pop	{r3}
 8008eb4:	469e      	mov	lr, r3
 8008eb6:	4770      	bx	lr
